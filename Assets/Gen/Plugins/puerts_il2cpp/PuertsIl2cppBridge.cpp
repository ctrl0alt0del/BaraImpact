// Auto Gen

#include "il2cpp-api.h"
#include "il2cpp-class-internals.h"
#include "il2cpp-object-internals.h"
#include "vm/InternalCalls.h"
#include "vm/Object.h"
#include "vm/Array.h"
#include "vm/Runtime.h"
#include "vm/Reflection.h"
#include "vm/MetadataCache.h"
#include "vm/Field.h"
#include "vm/GenericClass.h"
#include "vm/Thread.h"
#include "vm/Method.h"
#include "vm/Parameter.h"
#include "vm/Image.h"
#include "utils/StringUtils.h"
#include "gc/WriteBarrier.h"
#include "pesapi.h"
#include "TDataTrans.h"
#include "PuertsValueType.h"

namespace puerts
{


static struct N_bS_i4i4i4i4u8__ b_N_bS_i4i4i4i4u8__o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_N_bS_i4i4i4i4u8__o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_bS_i4i4i4i4u8__* pret = DataTransfer::GetPointer<N_bS_i4i4i4i4u8__>(apis, env, jsret);
    N_bS_i4i4i4i4u8__ ret = pret ? *pret : N_bS_i4i4i4i4u8__ {};
    return ret;
        
}

static struct N_bi4_ b_N_bi4_(void* target, MethodInfo* method) {
    // PLog("Running b_N_bi4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_bi4_* pret = DataTransfer::GetPointer<N_bi4_>(apis, env, jsret);
    N_bi4_ ret = pret ? *pret : N_bi4_ {};
    return ret;
        
}

static struct N_bi4_ b_N_bi4_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_N_bi4_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_bi4_* pret = DataTransfer::GetPointer<N_bi4_>(apis, env, jsret);
    N_bi4_ ret = pret ? *pret : N_bi4_ {};
    return ret;
        
}

static struct N_bi4_ b_N_bi4_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_N_bi4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_bi4_* pret = DataTransfer::GetPointer<N_bi4_>(apis, env, jsret);
    N_bi4_ ret = pret ? *pret : N_bi4_ {};
    return ret;
        
}

static struct N_bi8_ b_N_bi8_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_N_bi8_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_bi8_* pret = DataTransfer::GetPointer<N_bi8_>(apis, env, jsret);
    N_bi8_ ret = pret ? *pret : N_bi8_ {};
    return ret;
        
}

static struct N_bi8_ b_N_bi8_oPS_S_i4_i4_(void* target, Il2CppObject* p0, struct S_S_i4_i4_* p1, MethodInfo* method) {
    // PLog("Running b_N_bi8_oPS_S_i4_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_bi8_* pret = DataTransfer::GetPointer<N_bi8_>(apis, env, jsret);
    N_bi8_ ret = pret ? *pret : N_bi8_ {};
    return ret;
        
}

static struct N_br4_ b_N_br4_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_N_br4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_br4_* pret = DataTransfer::GetPointer<N_br4_>(apis, env, jsret);
    N_br4_ ret = pret ? *pret : N_br4_ {};
    return ret;
        
}

static struct N_br8_ b_N_br8_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_N_br8_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    N_br8_* pret = DataTransfer::GetPointer<N_br8_>(apis, env, jsret);
    N_br8_ ret = pret ? *pret : N_br8_ {};
    return ret;
        
}

static Il2CppObject* b_O(void* target, MethodInfo* method) {
    // PLog("Running b_O");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OO(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_OO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OOO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_OOO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OOVO(void* target, Il2CppObject* p0, Il2CppArray* p1, MethodInfo* method) {
    // PLog("Running b_OOVO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    auto arrayLength = il2cpp::vm::Array::GetLength(p1);
    pesapi_value *argv = (pesapi_value *)alloca(sizeof(pesapi_value) * (1 + arrayLength));
    memset(argv, 0, sizeof(pesapi_value) * (1 + arrayLength));
    argv[0] = CSRefToJsValue(apis, env, TIp0, p0);
    Params<Il2CppObject*>::UnPackRefOrBoxedValueType(apis, env, p1, arrayLength, TIp1, argv + 1);
    auto jsret = apis->call_function(env, func, nullptr, 2 + arrayLength - 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OS_oo_(void* target, struct S_oo_ p0, MethodInfo* method) {
    // PLog("Running b_OS_oo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OS_oooObS_r4r4r4r4_bb_(void* target, struct S_oooObS_r4r4r4r4_bb_ p0, MethodInfo* method) {
    // PLog("Running b_OS_oooObS_r4r4r4r4_bb_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OVO(void* target, Il2CppArray* p0, MethodInfo* method) {
    // PLog("Running b_OVO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    auto arrayLength = il2cpp::vm::Array::GetLength(p0);
    pesapi_value *argv = (pesapi_value *)alloca(sizeof(pesapi_value) * (0 + arrayLength));
    memset(argv, 0, sizeof(pesapi_value) * (0 + arrayLength));
    
    Params<Il2CppObject*>::UnPackRefOrBoxedValueType(apis, env, p0, arrayLength, TIp0, argv + 0);
    auto jsret = apis->call_function(env, func, nullptr, 1 + arrayLength - 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Oi4popb(void* target, int32_t p0, void* p1, Il2CppObject* p2, void* p3, bool p4, MethodInfo* method) {
    // PLog("Running b_Oi4popb");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        apis->create_binary(env, p1, 0),
        CSRefToJsValue(apis, env, TIp2, p2),
        apis->create_binary(env, p3, 0),
        converter::Converter<bool>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Oo(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_Oo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OoO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_OoO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_OoOO(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_OoOO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Ooo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_Ooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Oooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_Oooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Ooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_Ooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Oooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_Oooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Oppi4(void* target, void* p0, void* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_Oppi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_Oso(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_Oso");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static struct S__* b_PS__PS_u4u4u8_(void* target, struct S_u4u4u8_* p0, MethodInfo* method) {
    // PLog("Running b_PS__PS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal Pstruct
    S__* ret = DataTransfer::GetPointer<S__>(apis, env, apis->unboxing(env, jsret)); // valuetype ref
    S__ uret;
    if (!ret) {
        memset(&uret, 0, sizeof(S__));
        ret = &uret;
    }
        
    return ret;
        
}

static struct S__* b_PS__Pu1pPu1pPS_u4u4u8_(void* target, uint8_t* p0, void* p1, uint8_t* p2, void* p3, struct S_u4u4u8_* p4, MethodInfo* method) {
    // PLog("Running b_PS__Pu1pPu1pPS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p0),
        apis->create_binary(env, p1, 0),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p2),
        apis->create_binary(env, p3, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal Pstruct
    S__* ret = DataTransfer::GetPointer<S__>(apis, env, apis->unboxing(env, jsret)); // valuetype ref
    S__ uret;
    if (!ret) {
        memset(&uret, 0, sizeof(S__));
        ret = &uret;
    }
        
    return ret;
        
}

static struct S__* b_PS__S_u4u4_S_ooPv_Pu1pPS_u4u4u8_(void* target, struct S_u4u4_ p0, struct S_ooPv_ p1, uint8_t* p2, void* p3, struct S_u4u4u8_* p4, MethodInfo* method) {
    // PLog("Running b_PS__S_u4u4_S_ooPv_Pu1pPS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p2),
        apis->create_binary(env, p3, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal Pstruct
    S__* ret = DataTransfer::GetPointer<S__>(apis, env, apis->unboxing(env, jsret)); // valuetype ref
    S__ uret;
    if (!ret) {
        memset(&uret, 0, sizeof(S__));
        ret = &uret;
    }
        
    return ret;
        
}

static struct S__* b_PS__S_u4u4_S_ooPv_u8u8PS_u4u4u8_(void* target, struct S_u4u4_ p0, struct S_ooPv_ p1, uint64_t p2, uint64_t p3, struct S_u4u4u8_* p4, MethodInfo* method) {
    // PLog("Running b_PS__S_u4u4_S_ooPv_u8u8PS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<uint64_t>::toScript(apis, env, p2),
        converter::Converter<uint64_t>::toScript(apis, env, p3),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal Pstruct
    S__* ret = DataTransfer::GetPointer<S__>(apis, env, apis->unboxing(env, jsret)); // valuetype ref
    S__ uret;
    if (!ret) {
        memset(&uret, 0, sizeof(S__));
        ret = &uret;
    }
        
    return ret;
        
}

static struct S_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__* b_PS_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__(void* target, MethodInfo* method) {
    // PLog("Running b_PS_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal Pstruct
    S_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__* ret = DataTransfer::GetPointer<S_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__>(apis, env, apis->unboxing(env, jsret)); // valuetype ref
    S_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__ uret;
    if (!ret) {
        memset(&uret, 0, sizeof(S_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__));
        ret = &uret;
    }
        
    return ret;
        
}

static Il2CppChar* b_Pcu4(void* target, uint32_t p0, MethodInfo* method) {
    // PLog("Running b_Pcu4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P primitive
    Il2CppChar uret = converter::Converter<std::reference_wrapper<Il2CppChar>>::toCpp(apis, env, jsret);
    Il2CppChar* ret = &uret;
    return ret;
        
}

static struct S_S_i4_bo_ b_S_S_i4_bo_(void* target, MethodInfo* method) {
    // PLog("Running b_S_S_i4_bo_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4_bo_* pret = DataTransfer::GetPointer<S_S_i4_bo_>(apis, env, jsret);
    S_S_i4_bo_ ret = pret ? *pret : S_S_i4_bo_ {};
    return ret;
        
}

static struct S_S_i4_bo_ b_S_S_i4_bo_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_S_i4_bo_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4_bo_* pret = DataTransfer::GetPointer<S_S_i4_bo_>(apis, env, jsret);
    S_S_i4_bo_ ret = pret ? *pret : S_S_i4_bo_ {};
    return ret;
        
}

static struct S_S_i4i4S_r4r4__oS_u8__ b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__(void* target, struct S_i4i4S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4i4S_r4r4__oS_u8__* pret = DataTransfer::GetPointer<S_S_i4i4S_r4r4__oS_u8__>(apis, env, jsret);
    S_S_i4i4S_r4r4__oS_u8__ ret = pret ? *pret : S_S_i4i4S_r4r4__oS_u8__ {};
    return ret;
        
}

static struct S_S_i4i4S_r4r4__oS_u8__ b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__(void* target, struct S_i4i4S_r4r4__ p0, struct S_S_i4i4S_r4r4__oS_u8__ p1, MethodInfo* method) {
    // PLog("Running b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4i4S_r4r4__oS_u8__* pret = DataTransfer::GetPointer<S_S_i4i4S_r4r4__oS_u8__>(apis, env, jsret);
    S_S_i4i4S_r4r4__oS_u8__ ret = pret ? *pret : S_S_i4i4S_r4r4__oS_u8__ {};
    return ret;
        
}

static struct S_S_i4i4S_r4r4__oS_u8__ b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__o(void* target, struct S_i4i4S_r4r4__ p0, struct S_S_i4i4S_r4r4__oS_u8__ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4i4S_r4r4__oS_u8__* pret = DataTransfer::GetPointer<S_S_i4i4S_r4r4__oS_u8__>(apis, env, jsret);
    S_S_i4i4S_r4r4__oS_u8__ ret = pret ? *pret : S_S_i4i4S_r4r4__oS_u8__ {};
    return ret;
        
}

static struct S_S_i4i4S_r4r4__oS_u8__ b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__o(void* target, struct S_i4i4S_r4r4__ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4i4S_r4r4__oS_u8__* pret = DataTransfer::GetPointer<S_S_i4i4S_r4r4__oS_u8__>(apis, env, jsret);
    S_S_i4i4S_r4r4__oS_u8__ ret = pret ? *pret : S_S_i4i4S_r4r4__oS_u8__ {};
    return ret;
        
}

static struct S_S_i4i4S_r4r4__oS_u8__ b_S_S_i4i4S_r4r4__oS_u8__ooi4S_r4r4_(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, struct S_r4r4_ p3, MethodInfo* method) {
    // PLog("Running b_S_S_i4i4S_r4r4__oS_u8__ooi4S_r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_i4i4S_r4r4__oS_u8__* pret = DataTransfer::GetPointer<S_S_i4i4S_r4r4__oS_u8__>(apis, env, jsret);
    S_S_i4i4S_r4r4__oS_u8__ ret = pret ? *pret : S_S_i4i4S_r4r4__oS_u8__ {};
    return ret;
        
}

static struct S_S_pu4__ b_S_S_pu4__S_pu4_s(void* target, struct S_pu4_ p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_S_S_pu4__S_pu4_s");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_pu4__* pret = DataTransfer::GetPointer<S_S_pu4__>(apis, env, jsret);
    S_S_pu4__ ret = pret ? *pret : S_S_pu4__ {};
    return ret;
        
}

static struct S_S_r4r4r4_S_r4r4r4__ b_S_S_r4r4r4_S_r4r4r4__(void* target, MethodInfo* method) {
    // PLog("Running b_S_S_r4r4r4_S_r4r4r4__");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pret = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(apis, env, jsret);
    S_S_r4r4r4_S_r4r4r4__ ret = pret ? *pret : S_S_r4r4r4_S_r4r4r4__ {};
    return ret;
        
}

static struct S_S_r4r4r4r4_S_r4r4r4r4__ b_S_S_r4r4r4r4_S_r4r4r4r4__(void* target, MethodInfo* method) {
    // PLog("Running b_S_S_r4r4r4r4_S_r4r4r4r4__");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_S_r4r4r4r4_S_r4r4r4r4__* pret = DataTransfer::GetPointer<S_S_r4r4r4r4_S_r4r4r4r4__>(apis, env, jsret);
    S_S_r4r4r4r4_S_r4r4r4r4__ ret = pret ? *pret : S_S_r4r4r4r4_S_r4r4r4r4__ {};
    return ret;
        
}

static struct S__ b_S__(void* target, MethodInfo* method) {
    // PLog("Running b_S__");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S__O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__S_S_oooo_ooi4_S__(void* target, struct S_S_oooo_ooi4_ p0, struct S__ p1, MethodInfo* method) {
    // PLog("Running b_S__S_S_oooo_ooi4_S__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__S_S_oooo_ooi4_oS__(void* target, struct S_S_oooo_ooi4_ p0, Il2CppObject* p1, struct S__ p2, MethodInfo* method) {
    // PLog("Running b_S__S_S_oooo_ooi4_oS__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__S_o_(void* target, struct S_o_ p0, MethodInfo* method) {
    // PLog("Running b_S__S_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S__o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S__oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__oo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_S__oo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__ooS_o_(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_o_ p2, MethodInfo* method) {
    // PLog("Running b_S__ooS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__ooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_S__ooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__oooS_o_(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, struct S_o_ p3, MethodInfo* method) {
    // PLog("Running b_S__oooS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__oooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_S__oooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S__ b_S__ooooS_o_(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, struct S_o_ p4, MethodInfo* method) {
    // PLog("Running b_S__ooooS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        DataTransfer::CopyValueType(apis, env, p4, TIp4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S__* pret = DataTransfer::GetPointer<S__>(apis, env, jsret);
    S__ ret = pret ? *pret : S__ {};
    return ret;
        
}

static struct S_bo_ b_S_bo_(void* target, MethodInfo* method) {
    // PLog("Running b_S_bo_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_bo_* pret = DataTransfer::GetPointer<S_bo_>(apis, env, jsret);
    S_bo_ ret = pret ? *pret : S_bo_ {};
    return ret;
        
}

static struct S_bo_ b_S_bo_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_bo_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_bo_* pret = DataTransfer::GetPointer<S_bo_>(apis, env, jsret);
    S_bo_ ret = pret ? *pret : S_bo_ {};
    return ret;
        
}

static struct S_bo_ b_S_bo_S_sObi4ooO_(void* target, struct S_sObi4ooO_ p0, MethodInfo* method) {
    // PLog("Running b_S_bo_S_sObi4ooO_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_bo_* pret = DataTransfer::GetPointer<S_bo_>(apis, env, jsret);
    S_bo_ ret = pret ? *pret : S_bo_ {};
    return ret;
        
}

static struct S_bo_ b_S_bo_s(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_S_bo_s");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_bo_* pret = DataTransfer::GetPointer<S_bo_>(apis, env, jsret);
    S_bo_ ret = pret ? *pret : S_bo_ {};
    return ret;
        
}

static struct S_i4_ b_S_i4_oi4S_i4_(void* target, Il2CppObject* p0, int32_t p1, struct S_i4_ p2, MethodInfo* method) {
    // PLog("Running b_S_i4_oi4S_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4_* pret = DataTransfer::GetPointer<S_i4_>(apis, env, jsret);
    S_i4_ ret = pret ? *pret : S_i4_ {};
    return ret;
        
}

static struct S_i4i4_ b_S_i4i4_S_i4i4_(void* target, struct S_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_S_i4i4_S_i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4i4_* pret = DataTransfer::GetPointer<S_i4i4_>(apis, env, jsret);
    S_i4i4_ ret = pret ? *pret : S_i4i4_ {};
    return ret;
        
}

static struct S_i4i4i4i4u8_ b_S_i4i4i4i4u8_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_i4i4i4i4u8_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4i4i4i4u8_* pret = DataTransfer::GetPointer<S_i4i4i4i4u8_>(apis, env, jsret);
    S_i4i4i4i4u8_ ret = pret ? *pret : S_i4i4i4i4u8_ {};
    return ret;
        
}

static struct S_i4i4oS_oi4__ b_S_i4i4oS_oi4__(void* target, MethodInfo* method) {
    // PLog("Running b_S_i4i4oS_oi4__");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4i4oS_oi4__* pret = DataTransfer::GetPointer<S_i4i4oS_oi4__>(apis, env, jsret);
    S_i4i4oS_oi4__ ret = pret ? *pret : S_i4i4oS_oi4__ {};
    return ret;
        
}

static struct S_i4i4oS_oi4__ b_S_i4i4oS_oi4__O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_i4i4oS_oi4__O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4i4oS_oi4__* pret = DataTransfer::GetPointer<S_i4i4oS_oi4__>(apis, env, jsret);
    S_i4i4oS_oi4__ ret = pret ? *pret : S_i4i4oS_oi4__ {};
    return ret;
        
}

static struct S_i4o_ b_S_i4o_(void* target, MethodInfo* method) {
    // PLog("Running b_S_i4o_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4o_* pret = DataTransfer::GetPointer<S_i4o_>(apis, env, jsret);
    S_i4o_ ret = pret ? *pret : S_i4o_ {};
    return ret;
        
}

static struct S_i4o_ b_S_i4o_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_i4o_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4o_* pret = DataTransfer::GetPointer<S_i4o_>(apis, env, jsret);
    S_i4o_ ret = pret ? *pret : S_i4o_ {};
    return ret;
        
}

static struct S_i4oo_ b_S_i4oo_PS_i4i4o_(void* target, struct S_i4i4o_* p0, MethodInfo* method) {
    // PLog("Running b_S_i4oo_PS_i4i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4oo_* pret = DataTransfer::GetPointer<S_i4oo_>(apis, env, jsret);
    S_i4oo_ ret = pret ? *pret : S_i4oo_ {};
    return ret;
        
}

static struct S_i4r4o_ b_S_i4r4o_ooS_i4r4o_o(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_i4r4o_ p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_S_i4r4o_ooS_i4r4o_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i4r4o_* pret = DataTransfer::GetPointer<S_i4r4o_>(apis, env, jsret);
    S_i4r4o_ ret = pret ? *pret : S_i4r4o_ {};
    return ret;
        
}

static struct S_i8_ b_S_i8_i4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_S_i8_i4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i8_* pret = DataTransfer::GetPointer<S_i8_>(apis, env, jsret);
    S_i8_ ret = pret ? *pret : S_i8_ {};
    return ret;
        
}

static struct S_i8_ b_S_i8_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_i8_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i8_* pret = DataTransfer::GetPointer<S_i8_>(apis, env, jsret);
    S_i8_ ret = pret ? *pret : S_i8_ {};
    return ret;
        
}

static struct S_i8i8b_ b_S_i8i8b_(void* target, MethodInfo* method) {
    // PLog("Running b_S_i8i8b_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_i8i8b_* pret = DataTransfer::GetPointer<S_i8i8b_>(apis, env, jsret);
    S_i8i8b_ ret = pret ? *pret : S_i8i8b_ {};
    return ret;
        
}

static struct S_oN_bS_i4i4i4i4u8__i2_ b_S_oN_bS_i4i4i4i4u8__i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oN_bS_i4i4i4i4u8__i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_bS_i4i4i4i4u8__i2_* pret = DataTransfer::GetPointer<S_oN_bS_i4i4i4i4u8__i2_>(apis, env, jsret);
    S_oN_bS_i4i4i4i4u8__i2_ ret = pret ? *pret : S_oN_bS_i4i4i4i4u8__i2_ {};
    return ret;
        
}

static struct S_oN_bS_i4i4i4i4u8__i2_ b_S_oN_bS_i4i4i4i4u8__i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oN_bS_i4i4i4i4u8__i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_bS_i4i4i4i4u8__i2_* pret = DataTransfer::GetPointer<S_oN_bS_i4i4i4i4u8__i2_>(apis, env, jsret);
    S_oN_bS_i4i4i4i4u8__i2_ ret = pret ? *pret : S_oN_bS_i4i4i4i4u8__i2_ {};
    return ret;
        
}

static struct S_oN_bi4_i2_ b_S_oN_bi4_i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oN_bi4_i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_bi4_i2_* pret = DataTransfer::GetPointer<S_oN_bi4_i2_>(apis, env, jsret);
    S_oN_bi4_i2_ ret = pret ? *pret : S_oN_bi4_i2_ {};
    return ret;
        
}

static struct S_oN_bi4_i2_ b_S_oN_bi4_i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oN_bi4_i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_bi4_i2_* pret = DataTransfer::GetPointer<S_oN_bi4_i2_>(apis, env, jsret);
    S_oN_bi4_i2_ ret = pret ? *pret : S_oN_bi4_i2_ {};
    return ret;
        
}

static struct S_oN_bi8_i2_ b_S_oN_bi8_i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oN_bi8_i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_bi8_i2_* pret = DataTransfer::GetPointer<S_oN_bi8_i2_>(apis, env, jsret);
    S_oN_bi8_i2_ ret = pret ? *pret : S_oN_bi8_i2_ {};
    return ret;
        
}

static struct S_oN_bi8_i2_ b_S_oN_bi8_i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oN_bi8_i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_bi8_i2_* pret = DataTransfer::GetPointer<S_oN_bi8_i2_>(apis, env, jsret);
    S_oN_bi8_i2_ ret = pret ? *pret : S_oN_bi8_i2_ {};
    return ret;
        
}

static struct S_oN_br4_i2_ b_S_oN_br4_i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oN_br4_i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_br4_i2_* pret = DataTransfer::GetPointer<S_oN_br4_i2_>(apis, env, jsret);
    S_oN_br4_i2_ ret = pret ? *pret : S_oN_br4_i2_ {};
    return ret;
        
}

static struct S_oN_br4_i2_ b_S_oN_br4_i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oN_br4_i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_br4_i2_* pret = DataTransfer::GetPointer<S_oN_br4_i2_>(apis, env, jsret);
    S_oN_br4_i2_ ret = pret ? *pret : S_oN_br4_i2_ {};
    return ret;
        
}

static struct S_oN_br8_i2_ b_S_oN_br8_i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oN_br8_i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_br8_i2_* pret = DataTransfer::GetPointer<S_oN_br8_i2_>(apis, env, jsret);
    S_oN_br8_i2_ ret = pret ? *pret : S_oN_br8_i2_ {};
    return ret;
        
}

static struct S_oN_br8_i2_ b_S_oN_br8_i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oN_br8_i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oN_br8_i2_* pret = DataTransfer::GetPointer<S_oN_br8_i2_>(apis, env, jsret);
    S_oN_br8_i2_ ret = pret ? *pret : S_oN_br8_i2_ {};
    return ret;
        
}

static struct S_oS_i4i4i4i4u8_i2_ b_S_oS_i4i4i4i4u8_i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oS_i4i4i4i4u8_i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oS_i4i4i4i4u8_i2_* pret = DataTransfer::GetPointer<S_oS_i4i4i4i4u8_i2_>(apis, env, jsret);
    S_oS_i4i4i4i4u8_i2_ ret = pret ? *pret : S_oS_i4i4i4i4u8_i2_ {};
    return ret;
        
}

static struct S_oS_i4i4i4i4u8_i2_ b_S_oS_i4i4i4i4u8_i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oS_i4i4i4i4u8_i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oS_i4i4i4i4u8_i2_* pret = DataTransfer::GetPointer<S_oS_i4i4i4i4u8_i2_>(apis, env, jsret);
    S_oS_i4i4i4i4u8_i2_ ret = pret ? *pret : S_oS_i4i4i4i4u8_i2_ {};
    return ret;
        
}

static struct S_o_ b_S_o_S_o_S_o_r4(void* target, struct S_o_ p0, struct S_o_ p1, float p2, MethodInfo* method) {
    // PLog("Running b_S_o_S_o_S_o_r4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_o_* pret = DataTransfer::GetPointer<S_o_>(apis, env, jsret);
    S_o_ ret = pret ? *pret : S_o_ {};
    return ret;
        
}

static struct S_o_ b_S_o_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_o_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_o_* pret = DataTransfer::GetPointer<S_o_>(apis, env, jsret);
    S_o_ ret = pret ? *pret : S_o_ {};
    return ret;
        
}

static struct S_obboo_ b_S_obboo_(void* target, MethodInfo* method) {
    // PLog("Running b_S_obboo_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_obboo_* pret = DataTransfer::GetPointer<S_obboo_>(apis, env, jsret);
    S_obboo_ ret = pret ? *pret : S_obboo_ {};
    return ret;
        
}

static struct S_obboo_ b_S_obboo_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_obboo_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_obboo_* pret = DataTransfer::GetPointer<S_obboo_>(apis, env, jsret);
    S_obboo_ ret = pret ? *pret : S_obboo_ {};
    return ret;
        
}

static struct S_obi2_ b_S_obi2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_obi2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_obi2_* pret = DataTransfer::GetPointer<S_obi2_>(apis, env, jsret);
    S_obi2_ ret = pret ? *pret : S_obi2_ {};
    return ret;
        
}

static struct S_obi2_ b_S_obi2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_obi2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_obi2_* pret = DataTransfer::GetPointer<S_obi2_>(apis, env, jsret);
    S_obi2_ ret = pret ? *pret : S_obi2_ {};
    return ret;
        
}

static struct S_obi2_ b_S_obi2_oi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_S_obi2_oi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_obi2_* pret = DataTransfer::GetPointer<S_obi2_>(apis, env, jsret);
    S_obi2_ ret = pret ? *pret : S_obi2_ {};
    return ret;
        
}

static struct S_obi2_ b_S_obi2_oi4S_o_(void* target, Il2CppObject* p0, int32_t p1, struct S_o_ p2, MethodInfo* method) {
    // PLog("Running b_S_obi2_oi4S_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_obi2_* pret = DataTransfer::GetPointer<S_obi2_>(apis, env, jsret);
    S_obi2_ ret = pret ? *pret : S_obi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_(void* target, MethodInfo* method) {
    // PLog("Running b_S_oi2_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oi2_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_S_o_(void* target, struct S_o_ p0, MethodInfo* method) {
    // PLog("Running b_S_oi2_S_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_S_so_(void* target, struct S_so_ p0, MethodInfo* method) {
    // PLog("Running b_S_oi2_S_so_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oi2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oi2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_oi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_S_oi2_oi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi2_ b_S_oi2_oi4S_o_(void* target, Il2CppObject* p0, int32_t p1, struct S_o_ p2, MethodInfo* method) {
    // PLog("Running b_S_oi2_oi4S_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi2_* pret = DataTransfer::GetPointer<S_oi2_>(apis, env, jsret);
    S_oi2_ ret = pret ? *pret : S_oi2_ {};
    return ret;
        
}

static struct S_oi4i2_ b_S_oi4i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oi4i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi4i2_* pret = DataTransfer::GetPointer<S_oi4i2_>(apis, env, jsret);
    S_oi4i2_ ret = pret ? *pret : S_oi4i2_ {};
    return ret;
        
}

static struct S_oi4i2_ b_S_oi4i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oi4i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi4i2_* pret = DataTransfer::GetPointer<S_oi4i2_>(apis, env, jsret);
    S_oi4i2_ ret = pret ? *pret : S_oi4i2_ {};
    return ret;
        
}

static struct S_oi4s_ b_S_oi4s_S_oi4s_(void* target, struct S_oi4s_ p0, MethodInfo* method) {
    // PLog("Running b_S_oi4s_S_oi4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi4s_* pret = DataTransfer::GetPointer<S_oi4s_>(apis, env, jsret);
    S_oi4s_ ret = pret ? *pret : S_oi4s_ {};
    return ret;
        
}

static struct S_oi8i2_ b_S_oi8i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oi8i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi8i2_* pret = DataTransfer::GetPointer<S_oi8i2_>(apis, env, jsret);
    S_oi8i2_ ret = pret ? *pret : S_oi8i2_ {};
    return ret;
        
}

static struct S_oi8i2_ b_S_oi8i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_oi8i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oi8i2_* pret = DataTransfer::GetPointer<S_oi8i2_>(apis, env, jsret);
    S_oi8i2_ ret = pret ? *pret : S_oi8i2_ {};
    return ret;
        
}

static struct S_oo_ b_S_oo_(void* target, MethodInfo* method) {
    // PLog("Running b_S_oo_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oo_* pret = DataTransfer::GetPointer<S_oo_>(apis, env, jsret);
    S_oo_ ret = pret ? *pret : S_oo_ {};
    return ret;
        
}

static struct S_oo_ b_S_oo_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_oo_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oo_* pret = DataTransfer::GetPointer<S_oo_>(apis, env, jsret);
    S_oo_ ret = pret ? *pret : S_oo_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_(void* target, MethodInfo* method) {
    // PLog("Running b_S_ooi2_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_ooi2_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_ooi2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_ooi2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_oi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_S_ooi2_oi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_oi4S_o_(void* target, Il2CppObject* p0, int32_t p1, struct S_o_ p2, MethodInfo* method) {
    // PLog("Running b_S_ooi2_oi4S_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_oo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_S_ooi2_oo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi2_ b_S_ooi2_ooS_o_(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_o_ p2, MethodInfo* method) {
    // PLog("Running b_S_ooi2_ooS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi2_* pret = DataTransfer::GetPointer<S_ooi2_>(apis, env, jsret);
    S_ooi2_ ret = pret ? *pret : S_ooi2_ {};
    return ret;
        
}

static struct S_ooi4_ b_S_ooi4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_ooi4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi4_* pret = DataTransfer::GetPointer<S_ooi4_>(apis, env, jsret);
    S_ooi4_ ret = pret ? *pret : S_ooi4_ {};
    return ret;
        
}

static struct S_ooi4_ b_S_ooi4_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_ooi4_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi4_* pret = DataTransfer::GetPointer<S_ooi4_>(apis, env, jsret);
    S_ooi4_ ret = pret ? *pret : S_ooi4_ {};
    return ret;
        
}

static struct S_ooi4i4o_ b_S_ooi4i4o_S_ooi4i4o_(void* target, struct S_ooi4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_S_ooi4i4o_S_ooi4i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ooi4i4o_* pret = DataTransfer::GetPointer<S_ooi4i4o_>(apis, env, jsret);
    S_ooi4i4o_ ret = pret ? *pret : S_ooi4i4o_ {};
    return ret;
        
}

static struct S_oooS_r4r4__ b_S_oooS_r4r4__S_oooS_r4r4__(void* target, struct S_oooS_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_S_oooS_r4r4__S_oooS_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_oooS_r4r4__* pret = DataTransfer::GetPointer<S_oooS_r4r4__>(apis, env, jsret);
    S_oooS_r4r4__ ret = pret ? *pret : S_oooS_r4r4__ {};
    return ret;
        
}

static struct S_or4i2_ b_S_or4i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_or4i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_or4i2_* pret = DataTransfer::GetPointer<S_or4i2_>(apis, env, jsret);
    S_or4i2_ ret = pret ? *pret : S_or4i2_ {};
    return ret;
        
}

static struct S_or4i2_ b_S_or4i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_or4i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_or4i2_* pret = DataTransfer::GetPointer<S_or4i2_>(apis, env, jsret);
    S_or4i2_ ret = pret ? *pret : S_or4i2_ {};
    return ret;
        
}

static struct S_or8i2_ b_S_or8i2_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_or8i2_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_or8i2_* pret = DataTransfer::GetPointer<S_or8i2_>(apis, env, jsret);
    S_or8i2_ ret = pret ? *pret : S_or8i2_ {};
    return ret;
        
}

static struct S_or8i2_ b_S_or8i2_oS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_S_or8i2_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_or8i2_* pret = DataTransfer::GetPointer<S_or8i2_>(apis, env, jsret);
    S_or8i2_ ret = pret ? *pret : S_or8i2_ {};
    return ret;
        
}

static struct S_ossi4i4i4i4o_ b_S_ossi4i4i4i4o_S_ossi4i4i4i4o_(void* target, struct S_ossi4i4i4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_S_ossi4i4i4i4o_S_ossi4i4i4i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_ossi4i4i4i4o_* pret = DataTransfer::GetPointer<S_ossi4i4i4i4o_>(apis, env, jsret);
    S_ossi4i4i4i4o_ ret = pret ? *pret : S_ossi4i4i4i4o_ {};
    return ret;
        
}

static struct S_r4r4_ b_S_r4r4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_r4r4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4_* pret = DataTransfer::GetPointer<S_r4r4_>(apis, env, jsret);
    S_r4r4_ ret = pret ? *pret : S_r4r4_ {};
    return ret;
        
}

static struct S_r4r4_ b_S_r4r4_S_r4r4_(void* target, struct S_r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_S_r4r4_S_r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4_* pret = DataTransfer::GetPointer<S_r4r4_>(apis, env, jsret);
    S_r4r4_ ret = pret ? *pret : S_r4r4_ {};
    return ret;
        
}

static struct S_r4r4_ b_S_r4r4_S_r4r4_S_r4r4_r4(void* target, struct S_r4r4_ p0, struct S_r4r4_ p1, float p2, MethodInfo* method) {
    // PLog("Running b_S_r4r4_S_r4r4_S_r4r4_r4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4_* pret = DataTransfer::GetPointer<S_r4r4_>(apis, env, jsret);
    S_r4r4_ ret = pret ? *pret : S_r4r4_ {};
    return ret;
        
}

static struct S_r4r4_ b_S_r4r4_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_r4r4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4_* pret = DataTransfer::GetPointer<S_r4r4_>(apis, env, jsret);
    S_r4r4_ ret = pret ? *pret : S_r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4_ b_S_r4r4r4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4_>(apis, env, jsret);
    S_r4r4r4_ ret = pret ? *pret : S_r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4_ b_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4(void* target, struct S_r4r4r4_ p0, struct S_r4r4r4_ p1, float p2, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4_>(apis, env, jsret);
    S_r4r4r4_ ret = pret ? *pret : S_r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4_ b_S_r4r4r4_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4_>(apis, env, jsret);
    S_r4r4r4_ ret = pret ? *pret : S_r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4r4_ b_S_r4r4r4r4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4r4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4r4_>(apis, env, jsret);
    S_r4r4r4r4_ ret = pret ? *pret : S_r4r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4r4_ b_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4(void* target, struct S_r4r4r4r4_ p0, struct S_r4r4r4r4_ p1, float p2, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4r4_>(apis, env, jsret);
    S_r4r4r4r4_ ret = pret ? *pret : S_r4r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4r4_ b_S_r4r4r4r4_i4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4r4_i4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4r4_>(apis, env, jsret);
    S_r4r4r4r4_ ret = pret ? *pret : S_r4r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4r4_ b_S_r4r4r4r4_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4r4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4r4_>(apis, env, jsret);
    S_r4r4r4r4_ ret = pret ? *pret : S_r4r4r4r4_ {};
    return ret;
        
}

static struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ b_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pret = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(apis, env, jsret);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ ret = pret ? *pret : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
    return ret;
        
}

static struct S_sN_bS_i4i4___ b_S_sN_bS_i4i4___(void* target, MethodInfo* method) {
    // PLog("Running b_S_sN_bS_i4i4___");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_sN_bS_i4i4___* pret = DataTransfer::GetPointer<S_sN_bS_i4i4___>(apis, env, jsret);
    S_sN_bS_i4i4___ ret = pret ? *pret : S_sN_bS_i4i4___ {};
    return ret;
        
}

static struct S_si4ooo_ b_S_si4ooo_S_ooS_si4ooo__(void* target, struct S_ooS_si4ooo__ p0, MethodInfo* method) {
    // PLog("Running b_S_si4ooo_S_ooS_si4ooo__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_si4ooo_* pret = DataTransfer::GetPointer<S_si4ooo_>(apis, env, jsret);
    S_si4ooo_ ret = pret ? *pret : S_si4ooo_ {};
    return ret;
        
}

static struct S_si4ssi4_ b_S_si4ssi4_i4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_S_si4ssi4_i4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_si4ssi4_* pret = DataTransfer::GetPointer<S_si4ssi4_>(apis, env, jsret);
    S_si4ssi4_ ret = pret ? *pret : S_si4ssi4_ {};
    return ret;
        
}

static struct S_si4ssi4_ b_S_si4ssi4_i4S_si4ssi4_(void* target, int32_t p0, struct S_si4ssi4_ p1, MethodInfo* method) {
    // PLog("Running b_S_si4ssi4_i4S_si4ssi4_");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_si4ssi4_* pret = DataTransfer::GetPointer<S_si4ssi4_>(apis, env, jsret);
    S_si4ssi4_ ret = pret ? *pret : S_si4ssi4_ {};
    return ret;
        
}

static struct S_si4ssi4_ b_S_si4ssi4_i4S_si4ssi4_o(void* target, int32_t p0, struct S_si4ssi4_ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_S_si4ssi4_i4S_si4ssi4_o");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_si4ssi4_* pret = DataTransfer::GetPointer<S_si4ssi4_>(apis, env, jsret);
    S_si4ssi4_ ret = pret ? *pret : S_si4ssi4_ {};
    return ret;
        
}

static struct S_si4ssi4_ b_S_si4ssi4_i4o(void* target, int32_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_S_si4ssi4_i4o");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_si4ssi4_* pret = DataTransfer::GetPointer<S_si4ssi4_>(apis, env, jsret);
    S_si4ssi4_ ret = pret ? *pret : S_si4ssi4_ {};
    return ret;
        
}

static struct S_u4_ b_S_u4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_u4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u4_* pret = DataTransfer::GetPointer<S_u4_>(apis, env, jsret);
    S_u4_ ret = pret ? *pret : S_u4_ {};
    return ret;
        
}

static struct S_u4i4_ b_S_u4i4_(void* target, MethodInfo* method) {
    // PLog("Running b_S_u4i4_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u4i4_* pret = DataTransfer::GetPointer<S_u4i4_>(apis, env, jsret);
    S_u4i4_ ret = pret ? *pret : S_u4i4_ {};
    return ret;
        
}

static struct S_u4i4_ b_S_u4i4_O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_u4i4_O");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u4i4_* pret = DataTransfer::GetPointer<S_u4i4_>(apis, env, jsret);
    S_u4i4_ ret = pret ? *pret : S_u4i4_ {};
    return ret;
        
}

static struct S_u4u4u8_ b_S_u4u4u8_(void* target, MethodInfo* method) {
    // PLog("Running b_S_u4u4u8_");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u4u4u8_* pret = DataTransfer::GetPointer<S_u4u4u8_>(apis, env, jsret);
    S_u4u4u8_ ret = pret ? *pret : S_u4u4u8_ {};
    return ret;
        
}

static struct S_u8_ b_S_u8_PS__PS_u4u4u8_(void* target, struct S__* p0, struct S_u4u4u8_* p1, MethodInfo* method) {
    // PLog("Running b_S_u8_PS__PS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8_* pret = DataTransfer::GetPointer<S_u8_>(apis, env, jsret);
    S_u8_ ret = pret ? *pret : S_u8_ {};
    return ret;
        
}

static struct S_u8_ b_S_u8_S_u8_pPS_u4u4u8_(void* target, struct S_u8_ p0, void* p1, struct S_u4u4u8_* p2, MethodInfo* method) {
    // PLog("Running b_S_u8_S_u8_pPS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        apis->create_binary(env, p1, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8_* pret = DataTransfer::GetPointer<S_u8_>(apis, env, jsret);
    S_u8_ ret = pret ? *pret : S_u8_ {};
    return ret;
        
}

static struct S_u8_ b_S_u8_i4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_S_u8_i4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8_* pret = DataTransfer::GetPointer<S_u8_>(apis, env, jsret);
    S_u8_ ret = pret ? *pret : S_u8_ {};
    return ret;
        
}

static struct S_u8_ b_S_u8_o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_S_u8_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8_* pret = DataTransfer::GetPointer<S_u8_>(apis, env, jsret);
    S_u8_ ret = pret ? *pret : S_u8_ {};
    return ret;
        
}

static struct S_u8i4i4p_ b_S_u8i4i4p_oS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__p(void* target, Il2CppObject* p0, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_ p1, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__ p2, void* p3, MethodInfo* method) {
    // PLog("Running b_S_u8i4i4p_oS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__p");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        apis->create_binary(env, p3, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8i4i4p_* pret = DataTransfer::GetPointer<S_u8i4i4p_>(apis, env, jsret);
    S_u8i4i4p_ ret = pret ? *pret : S_u8i4i4p_ {};
    return ret;
        
}

static struct S_u8u8_ b_S_u8u8_s(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_S_u8u8_s");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8u8_* pret = DataTransfer::GetPointer<S_u8u8_>(apis, env, jsret);
    S_u8u8_ ret = pret ? *pret : S_u8u8_ {};
    return ret;
        
}

static struct S_u8u8_ b_S_u8u8_sS_u8u8_(void* target, Il2CppString* p0, struct S_u8u8_ p1, MethodInfo* method) {
    // PLog("Running b_S_u8u8_sS_u8u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8u8_* pret = DataTransfer::GetPointer<S_u8u8_>(apis, env, jsret);
    S_u8u8_ ret = pret ? *pret : S_u8u8_ {};
    return ret;
        
}

static struct S_u8u8_ b_S_u8u8_sS_u8u8_o(void* target, Il2CppString* p0, struct S_u8u8_ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_S_u8u8_sS_u8u8_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8u8_* pret = DataTransfer::GetPointer<S_u8u8_>(apis, env, jsret);
    S_u8u8_ ret = pret ? *pret : S_u8u8_ {};
    return ret;
        
}

static struct S_u8u8_ b_S_u8u8_so(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_S_u8u8_so");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal struct
    S_u8u8_* pret = DataTransfer::GetPointer<S_u8u8_>(apis, env, jsret);
    S_u8u8_ ret = pret ? *pret : S_u8u8_ {};
    return ret;
        
}

static bool b_b(void* target, MethodInfo* method) {
    // PLog("Running b_b");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bO(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_bO");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bOooi4(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_bOooi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bPS_i4i4_u4(void* target, struct S_i4i4_* p0, uint32_t p1, MethodInfo* method) {
    // PLog("Running b_bPS_i4i4_u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<uint32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bPoPoPb(void* target, Il2CppObject** p0, Il2CppObject** p1, bool* p2, MethodInfo* method) {
    // PLog("Running b_bPoPoPb");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        converter::Converter<std::reference_wrapper<bool>>::toScript(apis, env, *p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_OS_oi4__(void* target, struct S_OS_oi4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_OS_oi4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_Oi4_(void* target, struct S_Oi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_Oi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_Oi8_(void* target, struct S_Oi8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_Oi8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_Oi8i8S_r4r4r4r4__(void* target, struct S_Oi8i8S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_Oi8i8S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_PS_S_i4u2u2r8i4___(void* target, struct S_PS_S_i4u2u2r8i4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_PS_S_i4u2u2r8i4___o(void* target, struct S_PS_S_i4u2u2r8i4___ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_bS_PS_S_i4u2u2r8i4___o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_Pu1i4i4i4i4S_pi4i4__(void* target, struct S_Pu1i4i4i4i4S_pi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_Pu1i4i4i4i4S_pi4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_Pvi4i4i4S_pi4i4_i4_(void* target, struct S_Pvi4i4i4S_pi4i4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_Pvi4i4i4S_pi4i4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_Oi4i4__(void* target, struct S_S_Oi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_Oi4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_Pvi4i4i4S_pi4i4_i4_i4_(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_Pvi4i4i4S_pi4i4_i4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_(void* target, struct S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4i4i4i4i4i4_S_S_i4i4_i4u4u4i4i4S_i2i2__S_i4_bN_bS_Pvi4i4i4S_pi4i4_i4__N_bS_Pvi4i4i4S_pi4i4_i4___S_pu4u4u4u4__(void* target, struct S_S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4i4i4i4i4i4_S_S_i4i4_i4u4u4i4i4S_i2i2__S_i4_bN_bS_Pvi4i4i4S_pi4i4_i4__N_bS_Pvi4i4i4S_pi4i4_i4___S_pu4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4i4i4i4i4i4_S_S_i4i4_i4u4u4i4i4S_i2i2__S_i4_bN_bS_Pvi4i4i4S_pi4i4_i4__N_bS_Pvi4i4i4S_pi4i4_i4___S_pu4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_p__i4_(void* target, struct S_S_S_p__i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_p__i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_(void* target, struct S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_u4i4i4_b_i4_(void* target, struct S_S_S_u4i4i4_b_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_u4i4i4_b_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__(void* target, struct S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_u4u4u4u4_i8i4s_o_(void* target, struct S_S_S_u4u4u4u4_i8i4s_o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_S_u4u4u4u4_i8i4s_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_S_u8u8_S_u4u4u4u4_i4_oo_oo(void* target, struct S_S_S_u8u8_S_u4u4u4u4_i4_oo_ p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_bS_S_S_u8u8_S_u4u4u4u4_i4_oo_oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_i4i2_S_o__(void* target, struct S_S_i4i2_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_i4i2_S_o__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_i4i2_S_r4r4r4r4r4i4__(void* target, struct S_S_i4i2_S_r4r4r4r4r4i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_i4i2_S_r4r4r4r4r4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_(void* target, struct S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_ooi4_i4i4_(void* target, struct S_S_ooi4_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_ooi4_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_pu4__(void* target, struct S_S_pu4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_pu4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_pu4u4u4u4_b_(void* target, struct S_S_pu4u4u4u4_b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_pu4u4u4u4_b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4_S_r4r4__(void* target, struct S_S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4_r4_(void* target, struct S_S_r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4_r4i4b_(void* target, struct S_S_r4r4r4_S_r4r4r4_r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4_r4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4_r4_(void* target, struct S_S_r4r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4r4_S_r4r4r4r4_o_(void* target, struct S_S_r4r4r4r4_S_r4r4r4r4_o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4r4_S_r4r4r4r4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4r4_i4_(void* target, struct S_S_r4r4r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4r4_r4_(void* target, struct S_S_r4r4r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_s_s_(void* target, struct S_S_s_s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_s_s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_ss_S_o__(void* target, struct S_S_ss_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_ss_S_o__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_ss_S_ss_S_ss_sssS_oi4i4_S_oi4i4_S_oi4i4_S_oi4i4_u4u4u4S_i4_i4i4S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8__(void* target, struct S_S_ss_S_ss_S_ss_sssS_oi4i4_S_oi4i4_S_oi4i4_S_oi4i4_u4u4u4S_i4_i4i4S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_ss_S_ss_S_ss_sssS_oi4i4_S_oi4i4_S_oi4i4_S_oi4i4_u4u4u4S_i4_i4i4S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_(void* target, struct S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u4u4Ob_ob_(void* target, struct S_S_u4u4Ob_ob_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u4u4Ob_ob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u4u4_i8u8b_(void* target, struct S_S_u4u4_i8u8b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u4u4_i8u8b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u4u4_o_(void* target, struct S_S_u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u4u4u4u4_i8i4s_(void* target, struct S_S_u4u4u4u4_i8i4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u4u4u4u4_i8i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u4u4u4u4_o_(void* target, struct S_S_u4u4u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u4u4u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u8S_u8u8__bS_O__(void* target, struct S_S_u8S_u8u8__bS_O__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u8S_u8u8__bS_O__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__(void* target, struct S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_S_u8u8_i4i4_(void* target, struct S_S_u8u8_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_S_u8u8_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS__(void* target, struct S__ p0, MethodInfo* method) {
    // PLog("Running b_bS__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_bi4i4i4i4i4s_S_bi4i4i4i4i4s_S_bi4i4i4i4i4s_(void* target, struct S_bi4i4i4i4i4s_ p0, struct S_bi4i4i4i4i4s_ p1, struct S_bi4i4i4i4i4s_ p2, MethodInfo* method) {
    // PLog("Running b_bS_bi4i4i4i4i4s_S_bi4i4i4i4i4s_S_bi4i4i4i4i4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_bi4i4i4ss_S_bi4i4i4ss_S_bi4i4i4ss_(void* target, struct S_bi4i4i4ss_ p0, struct S_bi4i4i4ss_ p1, struct S_bi4i4i4ss_ p2, MethodInfo* method) {
    // PLog("Running b_bS_bi4i4i4ss_S_bi4i4i4ss_S_bi4i4i4ss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_bsi4bb_(void* target, struct S_bsi4bb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_bsi4bb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_bssos_(void* target, struct S_bssos_ p0, MethodInfo* method) {
    // PLog("Running b_bS_bssos_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_(void* target, struct S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4_(void* target, struct S_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4bi4_(void* target, struct S_i4bi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4bi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i2i2u1u1u1u1u1u1u1u1_(void* target, struct S_i4i2i2u1u1u1u1u1u1u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i2i2u1u1u1u1u1u1u1u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4O_(void* target, struct S_i4i4O_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__(void* target, struct S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_(void* target, struct S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4_(void* target, struct S_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4i4_(void* target, struct S_i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4i4i4_(void* target, struct S_i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4i4i4i4i4i4i4_(void* target, struct S_i4i4i4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4i4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4o_(void* target, struct S_i4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__(void* target, struct S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4r4r4_(void* target, struct S_i4i4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4s_(void* target, struct S_i4i4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4sb_(void* target, struct S_i4i4sb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4sb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4ssi4b_(void* target, struct S_i4i4ssi4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4ssi4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4i4u8_(void* target, struct S_i4i4u8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4i4u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4oOi4_(void* target, struct S_i4oOi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4oOi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4o_(void* target, struct S_i4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4oo_(void* target, struct S_i4oo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4oor4_(void* target, struct S_i4oor4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4oor4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4r4_(void* target, struct S_i4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4r4i4i4i4i4S_r4r4_S_r4r4__(void* target, struct S_i4r4i4i4i4i4S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4r4i4i4i4i4S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4r8i4s_(void* target, struct S_i4r8i4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4r8i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4sS_i4_i4s_(void* target, struct S_i4sS_i4_i4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4sS_i4_i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4s_(void* target, struct S_i4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4si4O_(void* target, struct S_i4si4O_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4si4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4si4_(void* target, struct S_i4si4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4si4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4sr4S_r4i4_b_(void* target, struct S_i4sr4S_r4i4_b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4sr4S_r4i4_b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4ss_(void* target, struct S_i4ss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4ss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4ssb_(void* target, struct S_i4ssb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4ssb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4u1u1u1u1_(void* target, struct S_i4u1u1u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4u1u1u1u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4u2u2so_(void* target, struct S_i4u2u2so_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4u2u2so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4u4u1_(void* target, struct S_i4u4u1_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4u4u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i4u8ss_(void* target, struct S_i4u8ss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i4u8ss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8i4i4i4i4_(void* target, struct S_i8i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8i4u1i4r8S_i4i4i4i4i4pi4__(void* target, struct S_i8i4u1i4r8S_i4i4i4i4i4pi4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8i4u1i4r8S_i4i4i4i4i4pi4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8i8S_Oi8i8S_r4r4r4r4___(void* target, struct S_i8i8S_Oi8i8S_r4r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8i8S_Oi8i8S_r4r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8i8_(void* target, struct S_i8i8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8i8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8i8i8_(void* target, struct S_i8i8i8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8i8i8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8i8o_(void* target, struct S_i8i8o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8i8o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8oo_(void* target, struct S_i8oo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_i8s_(void* target, struct S_i8s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_i8s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oO_(void* target, struct S_oO_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oO_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_i4i4__(void* target, struct S_oS_i4i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_i4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_i4r4o_r4_(void* target, struct S_oS_i4r4o_r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_i4r4o_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_oi4u4__(void* target, struct S_oS_oi4u4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_oi4u4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_osi4o_S_si4i4_S_si4i4__oo(void* target, struct S_oS_osi4o_S_si4i4_S_si4i4__ p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_bS_oS_osi4o_S_si4i4_S_si4i4__oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_osi4o_S_si4i4_S_si4i4__ooi4(void* target, struct S_oS_osi4o_S_si4i4_S_si4i4__ p0, Il2CppObject* p1, Il2CppObject* p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_bS_oS_osi4o_S_si4i4_S_si4i4__ooi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_r4r4r4_S_r4r4_r4_(void* target, struct S_oS_r4r4r4_S_r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_r4r4r4_S_r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_r4r4r4__(void* target, struct S_oS_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_r4r4r4r4_bbo_(void* target, struct S_oS_r4r4r4r4_bbo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_r4r4r4r4_bbo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oS_u4u4_o_(void* target, struct S_oS_u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oS_u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ob_(void* target, struct S_ob_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_obi4_(void* target, struct S_obi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_obi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oi4_(void* target, struct S_oi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oi4i4_(void* target, struct S_oi4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oi4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oi4o_(void* target, struct S_oi4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oi4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oi4r4_(void* target, struct S_oi4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oi4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oi4s_(void* target, struct S_oi4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oi4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oo_(void* target, struct S_oo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oobsoobr4_(void* target, struct S_oobsoobr4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oobsoobr4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ooi4_(void* target, struct S_ooi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ooi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ooi4b_(void* target, struct S_ooi4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ooi4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_(void* target, struct S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ooo_(void* target, struct S_ooo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ooo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oooi4_(void* target, struct S_oooi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oooi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oooi4s_(void* target, struct S_oooi4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oooi4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ooooi4b_(void* target, struct S_ooooi4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ooooi4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oor4r4_(void* target, struct S_oor4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oor4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_(void* target, struct S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_or4_(void* target, struct S_or4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_or4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_or4r4S_r4r4r4_S_r4r4r4__(void* target, struct S_or4r4S_r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_or4r4S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_os_(void* target, struct S_os_ p0, MethodInfo* method) {
    // PLog("Running b_bS_os_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_osi4_(void* target, struct S_osi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_osi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_oso_(void* target, struct S_oso_ p0, MethodInfo* method) {
    // PLog("Running b_bS_oso_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ossS_u4u4u4u4__(void* target, struct S_ossS_u4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_ossS_u4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ou4_(void* target, struct S_ou4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ou4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ou4os_(void* target, struct S_ou4os_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ou4os_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ou4u4u4u4u4u4u8u8_(void* target, struct S_ou4u4u4u4u4u4u8u8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ou4u4u4u4u4u4u8u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_pi4_(void* target, struct S_pi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_pi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_pi4i4_(void* target, struct S_pi4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_pi4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_pu4u4u4u4_(void* target, struct S_pu4u4u4u4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_pu4u4u4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4S_oS_r4r4r4_r4__(void* target, struct S_r4S_oS_r4r4r4_r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4S_oS_r4r4r4_r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4S_r4__(void* target, struct S_r4S_r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4S_r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4S_r4r4r4r4__(void* target, struct S_r4S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4i4_(void* target, struct S_r4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4o_(void* target, struct S_r4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4_(void* target, struct S_r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4_PS_r4r4r4_PS_r4r4r4_(void* target, struct S_r4r4_ p0, struct S_r4r4r4_* p1, struct S_r4r4r4_* p2, MethodInfo* method) {
    // PLog("Running b_bS_r4r4_PS_r4r4r4_PS_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4_(void* target, struct S_r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4r4_(void* target, struct S_r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4r4_bo(void* target, struct S_r4r4r4r4_ p0, bool p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4r4_bo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<bool>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4r4i4i4i4i4_(void* target, struct S_r4r4r4r4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4r4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r4s_(void* target, struct S_r4s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r8obi2_(void* target, struct S_r8obi2_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r8obi2_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_r8r8_(void* target, struct S_r8r8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_r8r8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sOO_(void* target, struct S_sOO_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sOO_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sO_(void* target, struct S_sO_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sO_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___(void* target, struct S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_i4bcu1i1i2u2i4u4i8u8r4r8__(void* target, struct S_sS_i4bcu1i1i2u2i4u4i8u8r4r8__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_i4bcu1i1i2u2i4u4i8u8r4r8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_i4oo__(void* target, struct S_sS_i4oo__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_i4oo__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_oi4i4__(void* target, struct S_sS_oi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_oi4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_r4r4r4_S_r4r4r4r4__(void* target, struct S_sS_r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__(void* target, struct S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_ssob_so_(void* target, struct S_sS_ssob_so_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_ssob_so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sS_u8__(void* target, struct S_sS_u8__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sS_u8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_s_(void* target, struct S_s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sb_(void* target, struct S_sb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sbi4i4ooboo_(void* target, struct S_sbi4i4ooboo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sbi4i4ooboo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4O_(void* target, struct S_si4O_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_(void* target, struct S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4_(void* target, struct S_si4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_(void* target, struct S_si4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_S_osi4o_o(void* target, struct S_si4i4_ p0, struct S_osi4o_ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_S_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_oS_osi4o_o(void* target, struct S_si4i4_ p0, Il2CppObject* p1, struct S_osi4o_ p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_oS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_oso(void* target, struct S_si4i4_ p0, Il2CppObject* p1, Il2CppString* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_oso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_sS_osi4o_o(void* target, struct S_si4i4_ p0, Il2CppString* p1, struct S_osi4o_ p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_sS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_so(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_so");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_soS_osi4o_o(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppObject* p2, struct S_osi4o_ p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_soS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_soso(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppObject* p2, Il2CppString* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_soso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_sso(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_sso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_sss(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_sss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4_ssss(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, Il2CppString* p4, MethodInfo* method) {
    // PLog("Running b_bS_si4i4_ssss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3),
        converter::Converter<Il2CppString*>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4b_(void* target, struct S_si4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4i4o_(void* target, struct S_si4i4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4i4i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4o_(void* target, struct S_si4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4ooS_pi4i4_ooi4i4i4bbbbbbbbb_(void* target, struct S_si4ooS_pi4i4_ooi4i4i4bbbbbbbbb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4ooS_pi4i4_ooi4i4i4bbbbbbbbb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_si4oobbi4i4i4boo_(void* target, struct S_si4oobbi4i4i4boo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_si4oobbi4i4i4boo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_so_(void* target, struct S_so_ p0, MethodInfo* method) {
    // PLog("Running b_bS_so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sob_(void* target, struct S_sob_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_soi4u4_(void* target, struct S_soi4u4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_soi4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_soo_(void* target, struct S_soo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_soo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sosi4_(void* target, struct S_sosi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sosi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_soss_(void* target, struct S_soss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_soss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__(void* target, struct S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sr4_(void* target, struct S_sr4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sr4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssS_i4_i4o_(void* target, struct S_ssS_i4_i4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssS_i4_i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ss_(void* target, struct S_ss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssb_(void* target, struct S_ssb_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssi4_(void* target, struct S_ssi4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sso_(void* target, struct S_sso_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sso_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssob_(void* target, struct S_ssob_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssoo_(void* target, struct S_ssoo_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssoo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sss_(void* target, struct S_sss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sssi4i4i4_(void* target, struct S_sssi4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sssi4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sssi4i4osS_r4r4r4r4_oi4O_(void* target, struct S_sssi4i4osS_r4r4r4r4_oi4O_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sssi4i4osS_r4r4r4r4_oi4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssss_(void* target, struct S_ssss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sssss_(void* target, struct S_sssss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sssss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sssssss_(void* target, struct S_sssssss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sssssss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_sssssssi4sss_(void* target, struct S_sssssssi4sss_ p0, MethodInfo* method) {
    // PLog("Running b_bS_sssssssi4sss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssu1_(void* target, struct S_ssu1_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssu1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_(void* target, struct S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_su4_(void* target, struct S_su4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_su4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_su4so_(void* target, struct S_su4so_ p0, MethodInfo* method) {
    // PLog("Running b_bS_su4so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u2S_i4u1u1u1u1_su2_(void* target, struct S_u2S_i4u1u1u1u1_su2_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u2S_i4u1u1u1u1_su2_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u2u2i4_(void* target, struct S_u2u2i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u2u2i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u4S_r4r4_u4S_r4r4__(void* target, struct S_u4S_r4r4_u4S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_bS_u4S_r4r4_u4S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u4_(void* target, struct S_u4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u4i4i4_(void* target, struct S_u4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u4o_(void* target, struct S_u4o_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_(void* target, struct S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u4u4u4u4_(void* target, struct S_u4u4u4u4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u4u4u4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u8_(void* target, struct S_u8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u8_S_u8_(void* target, struct S_u8_ p0, struct S_u8_ p1, MethodInfo* method) {
    // PLog("Running b_bS_u8_S_u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u8b_(void* target, struct S_u8b_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u8b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u8i4i4S_u4u4_S_i4i4i4i4_s_(void* target, struct S_u8i4i4S_u4u4_S_i4i4i4i4_s_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u8i4i4S_u4u4_S_i4i4i4i4_s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u8u4_(void* target, struct S_u8u4_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u8u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bS_u8u8_(void* target, struct S_u8u8_ p0, MethodInfo* method) {
    // PLog("Running b_bS_u8u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bb(void* target, bool p0, MethodInfo* method) {
    // PLog("Running b_bb");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<bool>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bc(void* target, Il2CppChar p0, MethodInfo* method) {
    // PLog("Running b_bc");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppChar>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bi2(void* target, int16_t p0, MethodInfo* method) {
    // PLog("Running b_bi2");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int16_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bi4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_bi4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bi4O(void* target, int32_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_bi4O");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bi4i4i4po(void* target, int32_t p0, int32_t p1, int32_t p2, void* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_bi4i4i4po");

    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        apis->create_binary(env, p3, 0),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bi4o(void* target, int32_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_bi4o");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bi8(void* target, int64_t p0, MethodInfo* method) {
    // PLog("Running b_bi8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int64_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bo(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_bo");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_boO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boPi4(void* target, Il2CppObject* p0, int32_t* p1, MethodInfo* method) {
    // PLog("Running b_boPi4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<std::reference_wrapper<int32_t>>::toScript(apis, env, *p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boPsPs(void* target, Il2CppObject* p0, Il2CppString** p1, Il2CppString** p2, MethodInfo* method) {
    // PLog("Running b_boPsPs");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<std::reference_wrapper<Il2CppString*>>::toScript(apis, env, *p1),
        converter::Converter<std::reference_wrapper<Il2CppString*>>::toScript(apis, env, *p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boS_PS_S_i4u2u2r8i4___(void* target, Il2CppObject* p0, struct S_PS_S_i4u2u2r8i4___ p1, MethodInfo* method) {
    // PLog("Running b_boS_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boS_osi4o_o(void* target, Il2CppObject* p0, struct S_osi4o_ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_boS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_boi4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boi4O(void* target, Il2CppObject* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_boi4O");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_boo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_booS_osi4o_o(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_osi4o_ p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_booS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boob(void* target, Il2CppObject* p0, Il2CppObject* p1, bool p2, MethodInfo* method) {
    // PLog("Running b_boob");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_booi4(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_booi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boooi4(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_boooi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_booso(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppString* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_booso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bor8S_PS_S_i4u2u2r8i4___(void* target, Il2CppObject* p0, double p1, struct S_PS_S_i4u2u2r8i4___ p2, MethodInfo* method) {
    // PLog("Running b_bor8S_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<double>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bos(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_bos");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bosS_osi4o_o(void* target, Il2CppObject* p0, Il2CppString* p1, struct S_osi4o_ p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_bosS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_boso(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_boso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bosoS_osi4o_o(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, struct S_osi4o_ p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_bosoS_osi4o_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bososo(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, Il2CppString* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_bososo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bosso(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_bosso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bosss(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, MethodInfo* method) {
    // PLog("Running b_bosss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bossss(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, Il2CppString* p4, MethodInfo* method) {
    // PLog("Running b_bossss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3),
        converter::Converter<Il2CppString*>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bou4u4(void* target, Il2CppObject* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_bou4u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bp(void* target, void* p0, MethodInfo* method) {
    // PLog("Running b_bp");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->create_binary(env, p0, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bpp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_bpp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bppPp(void* target, void* p0, void* p1, void** p2, MethodInfo* method) {
    // PLog("Running b_bppPp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        // unknow ret signature: Pp
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bppp(void* target, void* p0, void* p1, void* p2, MethodInfo* method) {
    // PLog("Running b_bppp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_br4(void* target, float p0, MethodInfo* method) {
    // PLog("Running b_br4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<float>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_br8(void* target, double p0, MethodInfo* method) {
    // PLog("Running b_br8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<double>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bs(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_bs");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bsO(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_bsO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bsbi4s(void* target, Il2CppString* p0, bool p1, int32_t p2, Il2CppString* p3, MethodInfo* method) {
    // PLog("Running b_bsbi4s");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bsi4i4PS_si4i4_ooo(void* target, Il2CppString* p0, int32_t p1, int32_t p2, struct S_si4i4_* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, MethodInfo* method) {
    // PLog("Running b_bsi4i4PS_si4i4_ooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[7]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false)),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6)
    };
    auto jsret = apis->call_function(env, func, nullptr, 7, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bso(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_bso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bsooi4(void* target, Il2CppString* p0, Il2CppObject* p1, Il2CppObject* p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_bsooi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bsou2oi2(void* target, Il2CppString* p0, Il2CppObject* p1, uint16_t p2, Il2CppObject* p3, int16_t p4, MethodInfo* method) {
    // PLog("Running b_bsou2oi2");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<uint16_t>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        converter::Converter<int16_t>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bss(void* target, Il2CppString* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_bss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bu1(void* target, uint8_t p0, MethodInfo* method) {
    // PLog("Running b_bu1");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint8_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bu2(void* target, uint16_t p0, MethodInfo* method) {
    // PLog("Running b_bu2");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint16_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bu4(void* target, uint32_t p0, MethodInfo* method) {
    // PLog("Running b_bu4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static bool b_bu8(void* target, uint64_t p0, MethodInfo* method) {
    // PLog("Running b_bu8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint64_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    bool ret = converter::Converter<bool>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppChar b_csi4c(void* target, Il2CppString* p0, int32_t p1, Il2CppChar p2, MethodInfo* method) {
    // PLog("Running b_csi4c");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<Il2CppChar>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    Il2CppChar ret = converter::Converter<Il2CppChar>::toCpp(apis, env, jsret);
    return ret;
        
}

static int16_t b_i2os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_i2os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int16_t ret = converter::Converter<int16_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4(void* target, MethodInfo* method) {
    // PLog("Running b_i4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_i4O");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4OO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_i4OO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_OS_oi4__S_OS_oi4__(void* target, struct S_OS_oi4__ p0, struct S_OS_oi4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_OS_oi4__S_OS_oi4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_Oi4_S_Oi4_(void* target, struct S_Oi4_ p0, struct S_Oi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_Oi4_S_Oi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_Oi8_S_Oi8_(void* target, struct S_Oi8_ p0, struct S_Oi8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_Oi8_S_Oi8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_Oi8i8S_r4r4r4r4__S_Oi8i8S_r4r4r4r4__(void* target, struct S_Oi8i8S_r4r4r4r4__ p0, struct S_Oi8i8S_r4r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_Oi8i8S_r4r4r4r4__S_Oi8i8S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_PS_S_i4u2u2r8i4___S_PS_S_i4u2u2r8i4___(void* target, struct S_PS_S_i4u2u2r8i4___ p0, struct S_PS_S_i4u2u2r8i4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_PS_S_i4u2u2r8i4___S_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__(void* target, struct S_Pu1i4i4i4i4S_pi4i4__ p0, struct S_Pu1i4i4i4i4S_pi4i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_(void* target, struct S_Pvi4i4i4S_pi4i4_i4_ p0, struct S_Pvi4i4i4S_pi4i4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_Oi4i4__S_S_Oi4i4__(void* target, struct S_S_Oi4i4__ p0, struct S_S_Oi4i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_Oi4i4__S_S_Oi4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_Oi4i4i4i4o_S_r4r4__(void* target, struct S_S_Oi4i4i4i4o_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_i4S_S_Oi4i4i4i4o_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_Pvi4i4i4S_pi4i4_i4_i4_S_S_Pvi4i4i4S_pi4i4_i4_i4_(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_i4_ p0, struct S_S_Pvi4i4i4S_pi4i4_i4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_Pvi4i4i4S_pi4i4_i4_i4_S_S_Pvi4i4i4S_pi4i4_i4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_(void* target, struct S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_ p0, struct S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_p__i4_S_S_S_p__i4_(void* target, struct S_S_S_p__i4_ p0, struct S_S_S_p__i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_p__i4_S_S_S_p__i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_ p0, struct S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_(void* target, struct S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_ p0, struct S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_u4i4i4_b_i4_S_S_S_u4i4i4_b_i4_(void* target, struct S_S_S_u4i4i4_b_i4_ p0, struct S_S_S_u4i4i4_b_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_u4i4i4_b_i4_S_S_S_u4i4i4_b_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__(void* target, struct S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__ p0, struct S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_S_u4u4u4u4_i8i4s_o_S_S_S_u4u4u4u4_i8i4s_o_(void* target, struct S_S_S_u4u4u4u4_i8i4s_o_ p0, struct S_S_S_u4u4u4u4_i8i4s_o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_S_u4u4u4u4_i8i4s_o_S_S_S_u4u4u4u4_i8i4s_o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_i4i2_S_o__S_S_i4i2_S_o__(void* target, struct S_S_i4i2_S_o__ p0, struct S_S_i4i2_S_o__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_i4i2_S_o__S_S_i4i2_S_o__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_i4i2_S_r4r4r4r4r4i4__S_S_i4i2_S_r4r4r4r4r4i4__(void* target, struct S_S_i4i2_S_r4r4r4r4r4i4__ p0, struct S_S_i4i2_S_r4r4r4r4r4i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_i4i2_S_r4r4r4r4r4i4__S_S_i4i2_S_r4r4r4r4r4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___ p0, struct S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_ooi4_i4i4_S_S_ooi4_i4i4_(void* target, struct S_S_ooi4_i4i4_ p0, struct S_S_ooi4_i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_ooi4_i4i4_S_S_ooi4_i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b_(void* target, struct S_S_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b_ p0, MethodInfo* method) {
    // PLog("Running b_i4S_S_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_pu4__S_S_pu4__(void* target, struct S_S_pu4__ p0, struct S_S_pu4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_pu4__S_S_pu4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_ p0, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_ p0, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4_S_r4r4__S_S_r4r4_S_r4r4__(void* target, struct S_S_r4r4_S_r4r4__ p0, struct S_S_r4r4_S_r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4_S_r4r4__S_S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4_r4_S_S_r4r4_r4_(void* target, struct S_S_r4r4_r4_ p0, struct S_S_r4r4_r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4_r4_S_S_r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___ p0, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p0, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_ p0, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_ p0, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__ p0, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4__ p0, struct S_S_r4r4r4_S_r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4_r4i4b_S_S_r4r4r4_S_r4r4r4_r4i4b_(void* target, struct S_S_r4r4r4_S_r4r4r4_r4i4b_ p0, struct S_S_r4r4r4_S_r4r4r4_r4i4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4_r4i4b_S_S_r4r4r4_S_r4r4r4_r4i4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__ p0, struct S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4_r4_S_S_r4r4r4_r4_(void* target, struct S_S_r4r4r4_r4_ p0, struct S_S_r4r4r4_r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4_r4_S_S_r4r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4r4_S_r4r4r4r4_o_S_S_r4r4r4r4_S_r4r4r4r4_o_(void* target, struct S_S_r4r4r4r4_S_r4r4r4r4_o_ p0, struct S_S_r4r4r4r4_S_r4r4r4r4_o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4r4_S_r4r4r4r4_o_S_S_r4r4r4r4_S_r4r4r4r4_o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4r4_i4_S_S_r4r4r4r4_i4_(void* target, struct S_S_r4r4r4r4_i4_ p0, struct S_S_r4r4r4r4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4r4_i4_S_S_r4r4r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4r4_r4_S_S_r4r4r4r4_r4_(void* target, struct S_S_r4r4r4r4_r4_ p0, struct S_S_r4r4r4r4_r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4r4_r4_S_S_r4r4r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___ p0, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_ p0, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_ p0, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_s_s_S_S_s_s_(void* target, struct S_S_s_s_ p0, struct S_S_s_s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_s_s_S_S_s_s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_ss_S_o__S_S_ss_S_o__(void* target, struct S_S_ss_S_o__ p0, struct S_S_ss_S_o__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_ss_S_o__S_S_ss_S_o__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_(void* target, struct S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_ p0, struct S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u4u4Ob_ob_S_S_u4u4Ob_ob_(void* target, struct S_S_u4u4Ob_ob_ p0, struct S_S_u4u4Ob_ob_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u4u4Ob_ob_S_S_u4u4Ob_ob_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u4u4_i8u8b_S_S_u4u4_i8u8b_(void* target, struct S_S_u4u4_i8u8b_ p0, struct S_S_u4u4_i8u8b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u4u4_i8u8b_S_S_u4u4_i8u8b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u4u4_o_S_S_u4u4_o_(void* target, struct S_S_u4u4_o_ p0, struct S_S_u4u4_o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u4u4_o_S_S_u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u4u4u4u4_i8i4s_S_S_u4u4u4u4_i8i4s_(void* target, struct S_S_u4u4u4u4_i8i4s_ p0, struct S_S_u4u4u4u4_i8i4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u4u4u4u4_i8i4s_S_S_u4u4u4u4_i8i4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u4u4u4u4_o_S_S_u4u4u4u4_o_(void* target, struct S_S_u4u4u4u4_o_ p0, struct S_S_u4u4u4u4_o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u4u4u4u4_o_S_S_u4u4u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u8S_u8u8__bS_O__S_S_u8S_u8u8__bS_O__(void* target, struct S_S_u8S_u8u8__bS_O__ p0, struct S_S_u8S_u8u8__bS_O__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u8S_u8u8__bS_O__S_S_u8S_u8u8__bS_O__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__(void* target, struct S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__ p0, struct S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_S_u8u8_i4i4_S_S_u8u8_i4i4_(void* target, struct S_S_u8u8_i4i4_ p0, struct S_S_u8u8_i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_S_u8u8_i4i4_S_S_u8u8_i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S__S__(void* target, struct S__ p0, struct S__ p1, MethodInfo* method) {
    // PLog("Running b_i4S__S__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_bsi4bb_S_bsi4bb_(void* target, struct S_bsi4bb_ p0, struct S_bsi4bb_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_bsi4bb_S_bsi4bb_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_bssos_S_bssos_(void* target, struct S_bssos_ p0, struct S_bssos_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_bssos_S_bssos_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__ p0, struct S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_(void* target, struct S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_ p0, struct S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4_S_i4_(void* target, struct S_i4_ p0, struct S_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4_S_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4bi4_S_i4bi4_(void* target, struct S_i4bi4_ p0, struct S_i4bi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4bi4_S_i4bi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i2i2u1u1u1u1u1u1u1u1_S_i4i2i2u1u1u1u1u1u1u1u1_(void* target, struct S_i4i2i2u1u1u1u1u1u1u1u1_ p0, struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i2i2u1u1u1u1u1u1u1u1_S_i4i2i2u1u1u1u1u1u1u1u1_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4O_S_i4i4O_(void* target, struct S_i4i4O_ p0, struct S_i4i4O_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4O_S_i4i4O_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__(void* target, struct S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__ p0, struct S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_(void* target, struct S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_ p0, struct S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4_(void* target, struct S_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4_S_i4i4_(void* target, struct S_i4i4_ p0, struct S_i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4_S_i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4i4_(void* target, struct S_i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4i4_S_i4i4i4_(void* target, struct S_i4i4i4_ p0, struct S_i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4i4_S_i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4i4i4_(void* target, struct S_i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4i4i4_S_i4i4i4i4_(void* target, struct S_i4i4i4i4_ p0, struct S_i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4i4i4_S_i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4i4i4i4i4i4i4_S_i4i4i4i4i4i4i4i4_(void* target, struct S_i4i4i4i4i4i4i4i4_ p0, struct S_i4i4i4i4i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4i4i4i4i4i4i4_S_i4i4i4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4o_S_i4i4o_(void* target, struct S_i4i4o_ p0, struct S_i4i4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4o_S_i4i4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__(void* target, struct S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__ p0, struct S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4r4r4_S_i4i4r4r4_(void* target, struct S_i4i4r4r4_ p0, struct S_i4i4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4r4r4_S_i4i4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4s_S_i4i4s_(void* target, struct S_i4i4s_ p0, struct S_i4i4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4s_S_i4i4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4sb_S_i4i4sb_(void* target, struct S_i4i4sb_ p0, struct S_i4i4sb_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4sb_S_i4i4sb_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4ssi4b_S_i4i4ssi4b_(void* target, struct S_i4i4ssi4b_ p0, struct S_i4i4ssi4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4ssi4b_S_i4i4ssi4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4i4u8_S_i4i4u8_(void* target, struct S_i4i4u8_ p0, struct S_i4i4u8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4i4u8_S_i4i4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4oOi4_S_i4oOi4_(void* target, struct S_i4oOi4_ p0, struct S_i4oOi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4oOi4_S_i4oOi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4o_S_i4o_(void* target, struct S_i4o_ p0, struct S_i4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4o_S_i4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4oo_S_i4oo_(void* target, struct S_i4oo_ p0, struct S_i4oo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4oo_S_i4oo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4oor4_S_i4oor4_(void* target, struct S_i4oor4_ p0, struct S_i4oor4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4oor4_S_i4oor4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__ p0, struct S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4r4_S_i4r4_(void* target, struct S_i4r4_ p0, struct S_i4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4r4_S_i4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4r4i4i4i4i4S_r4r4_S_r4r4__S_i4r4i4i4i4i4S_r4r4_S_r4r4__(void* target, struct S_i4r4i4i4i4i4S_r4r4_S_r4r4__ p0, struct S_i4r4i4i4i4i4S_r4r4_S_r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4r4i4i4i4i4S_r4r4_S_r4r4__S_i4r4i4i4i4i4S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4r8i4s_S_i4r8i4s_(void* target, struct S_i4r8i4s_ p0, struct S_i4r8i4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4r8i4s_S_i4r8i4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4s_S_i4s_(void* target, struct S_i4s_ p0, struct S_i4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4s_S_i4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4si4O_S_i4si4O_(void* target, struct S_i4si4O_ p0, struct S_i4si4O_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4si4O_S_i4si4O_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4si4_S_i4si4_(void* target, struct S_i4si4_ p0, struct S_i4si4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4si4_S_i4si4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4sr4S_r4i4_b_S_i4sr4S_r4i4_b_(void* target, struct S_i4sr4S_r4i4_b_ p0, struct S_i4sr4S_r4i4_b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4sr4S_r4i4_b_S_i4sr4S_r4i4_b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4ss_S_i4ss_(void* target, struct S_i4ss_ p0, struct S_i4ss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4ss_S_i4ss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4u1u1u1u1_S_i4u1u1u1u1_(void* target, struct S_i4u1u1u1u1_ p0, struct S_i4u1u1u1u1_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4u1u1u1u1_S_i4u1u1u1u1_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4u2u2so_S_i4u2u2so_(void* target, struct S_i4u2u2so_ p0, struct S_i4u2u2so_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4u2u2so_S_i4u2u2so_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4u4u1_S_i4u4u1_(void* target, struct S_i4u4u1_ p0, struct S_i4u4u1_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4u4u1_S_i4u4u1_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i4u8ss_S_i4u8ss_(void* target, struct S_i4u8ss_ p0, struct S_i4u8ss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i4u8ss_S_i4u8ss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8i4i4i4i4_S_i8i4i4i4i4_(void* target, struct S_i8i4i4i4i4_ p0, struct S_i8i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8i4i4i4i4_S_i8i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8i4u1i4r8S_i4i4i4i4i4pi4__S_i8i4u1i4r8S_i4i4i4i4i4pi4__(void* target, struct S_i8i4u1i4r8S_i4i4i4i4i4pi4__ p0, struct S_i8i4u1i4r8S_i4i4i4i4i4pi4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8i4u1i4r8S_i4i4i4i4i4pi4__S_i8i4u1i4r8S_i4i4i4i4i4pi4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8i8S_Oi8i8S_r4r4r4r4___S_i8i8S_Oi8i8S_r4r4r4r4___(void* target, struct S_i8i8S_Oi8i8S_r4r4r4r4___ p0, struct S_i8i8S_Oi8i8S_r4r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8i8S_Oi8i8S_r4r4r4r4___S_i8i8S_Oi8i8S_r4r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8i8_S_i8i8_(void* target, struct S_i8i8_ p0, struct S_i8i8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8i8_S_i8i8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8i8i8_S_i8i8i8_(void* target, struct S_i8i8i8_ p0, struct S_i8i8i8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8i8i8_S_i8i8i8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8i8o_S_i8i8o_(void* target, struct S_i8i8o_ p0, struct S_i8i8o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8i8o_S_i8i8o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8oo_S_i8oo_(void* target, struct S_i8oo_ p0, struct S_i8oo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8oo_S_i8oo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_i8s_S_i8s_(void* target, struct S_i8s_ p0, struct S_i8s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_i8s_S_i8s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oO_S_oO_(void* target, struct S_oO_ p0, struct S_oO_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oO_S_oO_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___ p0, struct S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_ p0, struct S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4___ p0, struct S_oS_S_r4r4r4_S_r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_i4i4__S_oS_i4i4__(void* target, struct S_oS_i4i4__ p0, struct S_oS_i4i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_i4i4__S_oS_i4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_i4r4o_r4_S_oS_i4r4o_r4_(void* target, struct S_oS_i4r4o_r4_ p0, struct S_oS_i4r4o_r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_i4r4o_r4_S_oS_i4r4o_r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_r4r4r4_S_r4r4_r4_S_oS_r4r4r4_S_r4r4_r4_(void* target, struct S_oS_r4r4r4_S_r4r4_r4_ p0, struct S_oS_r4r4r4_S_r4r4_r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_r4r4r4_S_r4r4_r4_S_oS_r4r4r4_S_r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_r4r4r4__S_oS_r4r4r4__(void* target, struct S_oS_r4r4r4__ p0, struct S_oS_r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_r4r4r4__S_oS_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_r4r4r4r4_bbo_S_oS_r4r4r4r4_bbo_(void* target, struct S_oS_r4r4r4r4_bbo_ p0, struct S_oS_r4r4r4r4_bbo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_r4r4r4r4_bbo_S_oS_r4r4r4r4_bbo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oS_u4u4_o_S_oS_u4u4_o_(void* target, struct S_oS_u4u4_o_ p0, struct S_oS_u4u4_o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oS_u4u4_o_S_oS_u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ob_S_ob_(void* target, struct S_ob_ p0, struct S_ob_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ob_S_ob_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_obi4_S_obi4_(void* target, struct S_obi4_ p0, struct S_obi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_obi4_S_obi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oi4_S_oi4_(void* target, struct S_oi4_ p0, struct S_oi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oi4_S_oi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oi4i4_S_oi4i4_(void* target, struct S_oi4i4_ p0, struct S_oi4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oi4i4_S_oi4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oi4o_S_oi4o_(void* target, struct S_oi4o_ p0, struct S_oi4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oi4o_S_oi4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oi4r4_S_oi4r4_(void* target, struct S_oi4r4_ p0, struct S_oi4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oi4r4_S_oi4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oi4s_S_oi4s_(void* target, struct S_oi4s_ p0, struct S_oi4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oi4s_S_oi4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oo_S_oo_(void* target, struct S_oo_ p0, struct S_oo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oo_S_oo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oobsoobr4_S_oobsoobr4_(void* target, struct S_oobsoobr4_ p0, struct S_oobsoobr4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oobsoobr4_S_oobsoobr4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ooi4_S_ooi4_(void* target, struct S_ooi4_ p0, struct S_ooi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ooi4_S_ooi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ooi4b_S_ooi4b_(void* target, struct S_ooi4b_ p0, struct S_ooi4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ooi4b_S_ooi4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_(void* target, struct S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_ p0, struct S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ooo_S_ooo_(void* target, struct S_ooo_ p0, struct S_ooo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ooo_S_ooo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oooi4_S_oooi4_(void* target, struct S_oooi4_ p0, struct S_oooi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oooi4_S_oooi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oooi4s_S_oooi4s_(void* target, struct S_oooi4s_ p0, struct S_oooi4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oooi4s_S_oooi4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ooooi4b_S_ooooi4b_(void* target, struct S_ooooi4b_ p0, struct S_ooooi4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ooooi4b_S_ooooi4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oor4r4_S_oor4r4_(void* target, struct S_oor4r4_ p0, struct S_oor4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oor4r4_S_oor4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_(void* target, struct S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p0, struct S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_or4_S_or4_(void* target, struct S_or4_ p0, struct S_or4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_or4_S_or4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__(void* target, struct S_or4r4S_r4r4r4_S_r4r4r4__ p0, struct S_or4r4S_r4r4r4_S_r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_os_S_os_(void* target, struct S_os_ p0, struct S_os_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_os_S_os_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_osi4_S_osi4_(void* target, struct S_osi4_ p0, struct S_osi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_osi4_S_osi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_oso_S_oso_(void* target, struct S_oso_ p0, struct S_oso_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_oso_S_oso_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ossS_u4u4u4u4__S_ossS_u4u4u4u4__(void* target, struct S_ossS_u4u4u4u4__ p0, struct S_ossS_u4u4u4u4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ossS_u4u4u4u4__S_ossS_u4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ou4_S_ou4_(void* target, struct S_ou4_ p0, struct S_ou4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ou4_S_ou4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ou4os_S_ou4os_(void* target, struct S_ou4os_ p0, struct S_ou4os_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ou4os_S_ou4os_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ou4u4u4u4u4u4u8u8_S_ou4u4u4u4u4u4u8u8_(void* target, struct S_ou4u4u4u4u4u4u8u8_ p0, struct S_ou4u4u4u4u4u4u8u8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ou4u4u4u4u4u4u8u8_S_ou4u4u4u4u4u4u8u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_pi4_S_pi4_(void* target, struct S_pi4_ p0, struct S_pi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_pi4_S_pi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_pi4i4_S_pi4i4_(void* target, struct S_pi4i4_ p0, struct S_pi4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_pi4i4_S_pi4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_pu4u4u4u4_S_pu4u4u4u4_(void* target, struct S_pu4u4u4u4_ p0, struct S_pu4u4u4u4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_pu4u4u4u4_S_pu4u4u4u4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4S_oS_r4r4r4_r4__S_r4S_oS_r4r4r4_r4__(void* target, struct S_r4S_oS_r4r4r4_r4__ p0, struct S_r4S_oS_r4r4r4_r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4S_oS_r4r4r4_r4__S_r4S_oS_r4r4r4_r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4S_r4__S_r4S_r4__(void* target, struct S_r4S_r4__ p0, struct S_r4S_r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4S_r4__S_r4S_r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4S_r4r4r4r4__S_r4S_r4r4r4r4__(void* target, struct S_r4S_r4r4r4r4__ p0, struct S_r4S_r4r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4S_r4r4r4r4__S_r4S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4i4_S_r4i4_(void* target, struct S_r4i4_ p0, struct S_r4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4i4_S_r4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4o_S_r4o_(void* target, struct S_r4o_ p0, struct S_r4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4o_S_r4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4_S_r4r4_(void* target, struct S_r4r4_ p0, struct S_r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4_S_r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4r4_S_r4r4r4_(void* target, struct S_r4r4r4_ p0, struct S_r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4r4_S_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4r4r4_S_r4r4r4r4_(void* target, struct S_r4r4r4r4_ p0, struct S_r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4r4r4_S_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4r4r4i4i4i4i4_S_r4r4r4r4i4i4i4i4_(void* target, struct S_r4r4r4r4i4i4i4i4_ p0, struct S_r4r4r4r4i4i4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4r4r4i4i4i4i4_S_r4r4r4r4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4r4r4r4r4_S_r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4_ p0, struct S_r4r4r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4r4r4r4r4_S_r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r4s_S_r4s_(void* target, struct S_r4s_ p0, struct S_r4s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r4s_S_r4s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r8obi2_S_r8obi2_(void* target, struct S_r8obi2_ p0, struct S_r8obi2_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r8obi2_S_r8obi2_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_r8r8_S_r8r8_(void* target, struct S_r8r8_ p0, struct S_r8r8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_r8r8_S_r8r8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sO_S_sO_(void* target, struct S_sO_ p0, struct S_sO_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sO_S_sO_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___(void* target, struct S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___ p0, struct S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_i4oo__S_sS_i4oo__(void* target, struct S_sS_i4oo__ p0, struct S_sS_i4oo__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_i4oo__S_sS_i4oo__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_oi4i4__S_sS_oi4i4__(void* target, struct S_sS_oi4i4__ p0, struct S_sS_oi4i4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_oi4i4__S_sS_oi4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_r4r4r4_S_r4r4r4r4__S_sS_r4r4r4_S_r4r4r4r4__(void* target, struct S_sS_r4r4r4_S_r4r4r4r4__ p0, struct S_sS_r4r4r4_S_r4r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_r4r4r4_S_r4r4r4r4__S_sS_r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__(void* target, struct S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__ p0, struct S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_ssob_so_S_sS_ssob_so_(void* target, struct S_sS_ssob_so_ p0, struct S_sS_ssob_so_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_ssob_so_S_sS_ssob_so_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sS_u8__S_sS_u8__(void* target, struct S_sS_u8__ p0, struct S_sS_u8__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sS_u8__S_sS_u8__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_s_S_s_(void* target, struct S_s_ p0, struct S_s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_s_S_s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sb_S_sb_(void* target, struct S_sb_ p0, struct S_sb_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sb_S_sb_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sbi4i4ooboo_S_sbi4i4ooboo_(void* target, struct S_sbi4i4ooboo_ p0, struct S_sbi4i4ooboo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sbi4i4ooboo_S_sbi4i4ooboo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4O_S_si4O_(void* target, struct S_si4O_ p0, struct S_si4O_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4O_S_si4O_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_(void* target, struct S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_ p0, struct S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4_S_si4_(void* target, struct S_si4_ p0, struct S_si4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4_S_si4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4i4_S_si4i4_(void* target, struct S_si4i4_ p0, struct S_si4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4i4_S_si4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4i4b_S_si4i4b_(void* target, struct S_si4i4b_ p0, struct S_si4i4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4i4b_S_si4i4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4i4i4o_S_si4i4i4o_(void* target, struct S_si4i4i4o_ p0, struct S_si4i4i4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4i4i4o_S_si4i4i4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4i4o_S_si4i4o_(void* target, struct S_si4i4o_ p0, struct S_si4i4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4i4o_S_si4i4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_ p0, struct S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_si4oobbi4i4i4boo_S_si4oobbi4i4i4boo_(void* target, struct S_si4oobbi4i4i4boo_ p0, struct S_si4oobbi4i4i4boo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_si4oobbi4i4i4boo_S_si4oobbi4i4i4boo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_so_S_so_(void* target, struct S_so_ p0, struct S_so_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_so_S_so_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sob_S_sob_(void* target, struct S_sob_ p0, struct S_sob_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sob_S_sob_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_soi4u4_S_soi4u4_(void* target, struct S_soi4u4_ p0, struct S_soi4u4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_soi4u4_S_soi4u4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_soo_S_soo_(void* target, struct S_soo_ p0, struct S_soo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_soo_S_soo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sosi4_S_sosi4_(void* target, struct S_sosi4_ p0, struct S_sosi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sosi4_S_sosi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_soss_S_soss_(void* target, struct S_soss_ p0, struct S_soss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_soss_S_soss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__(void* target, struct S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__ p0, struct S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sr4_S_sr4_(void* target, struct S_sr4_ p0, struct S_sr4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sr4_S_sr4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssS_i4_i4o_S_ssS_i4_i4o_(void* target, struct S_ssS_i4_i4o_ p0, struct S_ssS_i4_i4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssS_i4_i4o_S_ssS_i4_i4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ss_S_ss_(void* target, struct S_ss_ p0, struct S_ss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ss_S_ss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssb_S_ssb_(void* target, struct S_ssb_ p0, struct S_ssb_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssb_S_ssb_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssi4_S_ssi4_(void* target, struct S_ssi4_ p0, struct S_ssi4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssi4_S_ssi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_ p0, struct S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sso_S_sso_(void* target, struct S_sso_ p0, struct S_sso_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sso_S_sso_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssob_S_ssob_(void* target, struct S_ssob_ p0, struct S_ssob_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssob_S_ssob_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssoo_S_ssoo_(void* target, struct S_ssoo_ p0, struct S_ssoo_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssoo_S_ssoo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sss_S_sss_(void* target, struct S_sss_ p0, struct S_sss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sss_S_sss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sssi4i4i4_S_sssi4i4i4_(void* target, struct S_sssi4i4i4_ p0, struct S_sssi4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sssi4i4i4_S_sssi4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sssi4i4osS_r4r4r4r4_oi4O_S_sssi4i4osS_r4r4r4r4_oi4O_(void* target, struct S_sssi4i4osS_r4r4r4r4_oi4O_ p0, struct S_sssi4i4osS_r4r4r4r4_oi4O_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sssi4i4osS_r4r4r4r4_oi4O_S_sssi4i4osS_r4r4r4r4_oi4O_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssss_S_ssss_(void* target, struct S_ssss_ p0, struct S_ssss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssss_S_ssss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sssss_S_sssss_(void* target, struct S_sssss_ p0, struct S_sssss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sssss_S_sssss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_sssssss_S_sssssss_(void* target, struct S_sssssss_ p0, struct S_sssssss_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_sssssss_S_sssssss_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssu1_S_ssu1_(void* target, struct S_ssu1_ p0, struct S_ssu1_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssu1_S_ssu1_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_(void* target, struct S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_ p0, struct S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_su4_S_su4_(void* target, struct S_su4_ p0, struct S_su4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_su4_S_su4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_su4so_S_su4so_(void* target, struct S_su4so_ p0, struct S_su4so_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_su4so_S_su4so_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u2S_i4u1u1u1u1_su2_S_u2S_i4u1u1u1u1_su2_(void* target, struct S_u2S_i4u1u1u1u1_su2_ p0, struct S_u2S_i4u1u1u1u1_su2_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u2S_i4u1u1u1u1_su2_S_u2S_i4u1u1u1u1_su2_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u2u2i4_S_u2u2i4_(void* target, struct S_u2u2i4_ p0, struct S_u2u2i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u2u2i4_S_u2u2i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u4S_r4r4_u4S_r4r4__S_u4S_r4r4_u4S_r4r4__(void* target, struct S_u4S_r4r4_u4S_r4r4__ p0, struct S_u4S_r4r4_u4S_r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u4S_r4r4_u4S_r4r4__S_u4S_r4r4_u4S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u4i4i4_S_u4i4i4_(void* target, struct S_u4i4i4_ p0, struct S_u4i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u4i4i4_S_u4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u4o_S_u4o_(void* target, struct S_u4o_ p0, struct S_u4o_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u4o_S_u4o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_(void* target, struct S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_ p0, struct S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u4u4u4u4_S_u4u4u4u4_(void* target, struct S_u4u4u4u4_ p0, struct S_u4u4u4u4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u4u4u4u4_S_u4u4u4u4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u8_S_u8_(void* target, struct S_u8_ p0, struct S_u8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u8_S_u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u8b_S_u8b_(void* target, struct S_u8b_ p0, struct S_u8b_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u8b_S_u8b_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u8i4i4S_u4u4_S_i4i4i4i4_s_S_u8i4i4S_u4u4_S_i4i4i4i4_s_(void* target, struct S_u8i4i4S_u4u4_S_i4i4i4i4_s_ p0, struct S_u8i4i4S_u4u4_S_i4i4i4i4_s_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u8i4i4S_u4u4_S_i4i4i4i4_s_S_u8i4i4S_u4u4_S_i4i4i4i4_s_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u8u4_S_u8u4_(void* target, struct S_u8u4_ p0, struct S_u8u4_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u8u4_S_u8u4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4S_u8u8_S_u8u8_(void* target, struct S_u8u8_ p0, struct S_u8u8_ p1, MethodInfo* method) {
    // PLog("Running b_i4S_u8u8_S_u8u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4bb(void* target, bool p0, bool p1, MethodInfo* method) {
    // PLog("Running b_i4bb");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<bool>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4cc(void* target, Il2CppChar p0, Il2CppChar p1, MethodInfo* method) {
    // PLog("Running b_i4cc");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppChar>::toScript(apis, env, p0),
        converter::Converter<Il2CppChar>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i2i2(void* target, int16_t p0, int16_t p1, MethodInfo* method) {
    // PLog("Running b_i4i2i2");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int16_t>::toScript(apis, env, p0),
        converter::Converter<int16_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_i4i4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i4PpPpPpPpPp(void* target, int32_t p0, void** p1, void** p2, void** p3, void** p4, void** p5, MethodInfo* method) {
    // PLog("Running b_i4i4PpPpPpPpPp");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        // unknow ret signature: Pp,
        // unknow ret signature: Pp,
        // unknow ret signature: Pp,
        // unknow ret signature: Pp,
        // unknow ret signature: Pp
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i4i4(void* target, int32_t p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_i4i4i4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i4i4ob(void* target, int32_t p0, int32_t p1, Il2CppObject* p2, bool p3, MethodInfo* method) {
    // PLog("Running b_i4i4i4ob");

    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i4oooo(void* target, int32_t p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_i4i4oooo");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i4sb(void* target, int32_t p0, Il2CppString* p1, bool p2, MethodInfo* method) {
    // PLog("Running b_i4i4sb");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4i8i8(void* target, int64_t p0, int64_t p1, MethodInfo* method) {
    // PLog("Running b_i4i8i8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int64_t>::toScript(apis, env, p0),
        converter::Converter<int64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_i4o");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4oS_r4r4r4_S_r4r4_ob(void* target, Il2CppObject* p0, struct S_r4r4r4_ p1, struct S_r4r4_ p2, Il2CppObject* p3, bool p4, MethodInfo* method) {
    // PLog("Running b_i4oS_r4r4r4_S_r4r4_ob");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3),
        converter::Converter<bool>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ob(void* target, Il2CppObject* p0, bool p1, MethodInfo* method) {
    // PLog("Running b_i4ob");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4oi4i4(void* target, Il2CppObject* p0, int32_t p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_i4oi4i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4oi4o(void* target, Il2CppObject* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_i4oi4o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4oo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_i4oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ooi4b(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, bool p3, MethodInfo* method) {
    // PLog("Running b_i4ooi4b");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_i4ooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4oooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_i4oooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_i4os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4osi4i4oPS_si4i4_PoPb(void* target, Il2CppObject* p0, Il2CppString* p1, int32_t p2, int32_t p3, Il2CppObject* p4, struct S_si4i4_* p5, Il2CppObject** p6, bool* p7, MethodInfo* method) {
    // PLog("Running b_i4osi4i4oPS_si4i4_PoPb");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[8]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        apis->boxing(env, apis->native_object_to_value(env, TIp5, p5, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp6, p6, false)),
        converter::Converter<std::reference_wrapper<bool>>::toScript(apis, env, *p7)
    };
    auto jsret = apis->call_function(env, func, nullptr, 8, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ou4u4(void* target, Il2CppObject* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_i4ou4u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4p(void* target, void* p0, MethodInfo* method) {
    // PLog("Running b_i4p");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->create_binary(env, p0, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4pPS_S_pi4S_u2u2__i4i4u1u1u2u4_(void* target, void* p0, struct S_S_pi4S_u2u2__i4i4u1u1u2u4_* p1, MethodInfo* method) {
    // PLog("Running b_i4pPS_S_pi4S_u2u2__i4i4u1u1u2u4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4pi4p(void* target, void* p0, int32_t p1, void* p2, MethodInfo* method) {
    // PLog("Running b_i4pi4p");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        apis->create_binary(env, p2, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4pp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_i4pp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ppi4(void* target, void* p0, void* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_i4ppi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ppi4Pi4(void* target, void* p0, void* p1, int32_t p2, int32_t* p3, MethodInfo* method) {
    // PLog("Running b_i4ppi4Pi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        converter::Converter<std::reference_wrapper<int32_t>>::toScript(apis, env, *p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4r4r4(void* target, float p0, float p1, MethodInfo* method) {
    // PLog("Running b_i4r4r4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<float>::toScript(apis, env, p0),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4r8r8(void* target, double p0, double p1, MethodInfo* method) {
    // PLog("Running b_i4r8r8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<double>::toScript(apis, env, p0),
        converter::Converter<double>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4s(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_i4s");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4si4(void* target, Il2CppString* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_i4si4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4si4i4oPS_si4i4_PoPb(void* target, Il2CppString* p0, int32_t p1, int32_t p2, Il2CppObject* p3, struct S_si4i4_* p4, Il2CppObject** p5, bool* p6, MethodInfo* method) {
    // PLog("Running b_i4si4i4oPS_si4i4_PoPb");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[7]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp5, p5, false)),
        converter::Converter<std::reference_wrapper<bool>>::toScript(apis, env, *p6)
    };
    auto jsret = apis->call_function(env, func, nullptr, 7, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4si4o(void* target, Il2CppString* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_i4si4o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4so(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_i4so");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4ss(void* target, Il2CppString* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_i4ss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4u1(void* target, uint8_t p0, MethodInfo* method) {
    // PLog("Running b_i4u1");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint8_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4u1u1(void* target, uint8_t p0, uint8_t p1, MethodInfo* method) {
    // PLog("Running b_i4u1u1");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<uint8_t>::toScript(apis, env, p0),
        converter::Converter<uint8_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4u2u2(void* target, uint16_t p0, uint16_t p1, MethodInfo* method) {
    // PLog("Running b_i4u2u2");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<uint16_t>::toScript(apis, env, p0),
        converter::Converter<uint16_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4u4u4(void* target, uint32_t p0, uint32_t p1, MethodInfo* method) {
    // PLog("Running b_i4u4u4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<uint32_t>::toScript(apis, env, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int32_t b_i4u8u8(void* target, uint64_t p0, uint64_t p1, MethodInfo* method) {
    // PLog("Running b_i4u8u8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<uint64_t>::toScript(apis, env, p0),
        converter::Converter<uint64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int32_t ret = converter::Converter<int32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8(void* target, MethodInfo* method) {
    // PLog("Running b_i8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8O(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_i8O");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8PS_S_i4_i4_(void* target, struct S_S_i4_i4_* p0, MethodInfo* method) {
    // PLog("Running b_i8PS_S_i4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8i4PS_S_i4_i4_(void* target, int32_t p0, struct S_S_i4_i4_* p1, MethodInfo* method) {
    // PLog("Running b_i8i4PS_S_i4_i4_");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_i8o");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_i8os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8ou4u4(void* target, Il2CppObject* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_i8ou4u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8pi4i8(void* target, void* p0, int32_t p1, int64_t p2, MethodInfo* method) {
    // PLog("Running b_i8pi4i8");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int64_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static int64_t b_i8pp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_i8pp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    int64_t ret = converter::Converter<int64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppObject* b_o(void* target, MethodInfo* method) {
    // PLog("Running b_o");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oO(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_oO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oOo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oOo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oOooO(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_oOooO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oOs(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_oOs");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oOsooo(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_oOsooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oPo(void* target, Il2CppObject** p0, MethodInfo* method) {
    // PLog("Running b_oPo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_OS_oi4__(void* target, struct S_OS_oi4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_OS_oi4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_Oi4_(void* target, struct S_Oi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_Oi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_Oi8_(void* target, struct S_Oi8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_Oi8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_Oi8i8S_r4r4r4r4__(void* target, struct S_Oi8i8S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_Oi8i8S_r4r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_PS_S_i4u2u2r8i4___(void* target, struct S_PS_S_i4u2u2r8i4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_PS_S_i4u2u2r8i4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_Pu1i4i4i4i4S_pi4i4__(void* target, struct S_Pu1i4i4i4i4S_pi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_Pu1i4i4i4i4S_pi4i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_Pvi4i4i4S_pi4i4_i4_(void* target, struct S_Pvi4i4i4S_pi4i4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_Pvi4i4i4S_pi4i4_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_Oi4i4__(void* target, struct S_S_Oi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_Oi4i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_Pvi4i4i4S_pi4i4_i4_i4_(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_Pvi4i4i4S_pi4i4_i4_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_(void* target, struct S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_p__i4_(void* target, struct S_S_S_p__i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_p__i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_(void* target, struct S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_u4i4i4_b_i4_(void* target, struct S_S_S_u4i4i4_b_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_u4i4i4_b_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__(void* target, struct S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_S_u4u4u4u4_i8i4s_o_(void* target, struct S_S_S_u4u4u4u4_i8i4s_o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_S_u4u4u4u4_i8i4s_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_i4i2_S_o__(void* target, struct S_S_i4i2_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_i4i2_S_o__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_i4i2_S_r4r4r4r4r4i4__(void* target, struct S_S_i4i2_S_r4r4r4r4r4i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_i4i2_S_r4r4r4r4r4i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_S_i4S_r4r4r4_r4r4i4_S_u1_i4u4u8u8S_r4_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_r4r4i4i4S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4b_r4i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4i4bi4_or4i4i4pi4i4bbS_pi4S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_i4i4bS_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_bi4p__(void* target, struct S_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_S_i4S_r4r4r4_r4r4i4_S_u1_i4u4u8u8S_r4_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_r4r4i4i4S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4b_r4i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4i4bi4_or4i4i4pi4i4bbS_pi4S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_i4i4bS_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_bi4p__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_S_i4S_r4r4r4_r4r4i4_S_u1_i4u4u8u8S_r4_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_r4r4i4i4S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4b_r4i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4i4bi4_or4i4i4pi4i4bbS_pi4S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_i4i4bS_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_bi4p__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_ooi4_i4i4_(void* target, struct S_S_ooi4_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_ooi4_i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_oooo_ooi4_(void* target, struct S_S_oooo_ooi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_oooo_ooi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_oooo_ooi4_S__(void* target, struct S_S_oooo_ooi4_ p0, struct S__ p1, MethodInfo* method) {
    // PLog("Running b_oS_S_oooo_ooi4_S__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_oooo_ooi4_o(void* target, struct S_S_oooo_ooi4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oS_S_oooo_ooi4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_pu4__(void* target, struct S_S_pu4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_pu4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4_S_r4r4__(void* target, struct S_S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4_S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4_r4_(void* target, struct S_S_r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4_r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4_r4i4b_(void* target, struct S_S_r4r4r4_S_r4r4r4_r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4_r4i4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4_r4_(void* target, struct S_S_r4r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4_r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4r4_S_r4r4r4r4_o_(void* target, struct S_S_r4r4r4r4_S_r4r4r4r4_o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4r4_S_r4r4r4r4_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4r4_i4_(void* target, struct S_S_r4r4r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4r4_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4r4_r4_(void* target, struct S_S_r4r4r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4r4_r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_s_s_(void* target, struct S_S_s_s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_s_s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_ss_S_o__(void* target, struct S_S_ss_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_ss_S_o__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_(void* target, struct S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u4u4Ob_ob_(void* target, struct S_S_u4u4Ob_ob_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u4u4Ob_ob_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u4u4_i8u8b_(void* target, struct S_S_u4u4_i8u8b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u4u4_i8u8b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u4u4_o_(void* target, struct S_S_u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u4u4_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u4u4u4u4_i8i4s_(void* target, struct S_S_u4u4u4u4_i8i4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u4u4u4u4_i8i4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u4u4u4u4_o_(void* target, struct S_S_u4u4u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u4u4u4u4_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u8S_u8u8__bS_O__(void* target, struct S_S_u8S_u8u8__bS_O__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u8S_u8u8__bS_O__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__(void* target, struct S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_S_u8u8_i4i4_(void* target, struct S_S_u8u8_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_S_u8u8_i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS__(void* target, struct S__ p0, MethodInfo* method) {
    // PLog("Running b_oS__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_bS_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_oS_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_r4r4r4r4S_r4r4__(void* target, struct S_bS_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_oS_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_r4r4r4r4S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_bS_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_oS_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_r4r4r4r4S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_bsi4bb_(void* target, struct S_bsi4bb_ p0, MethodInfo* method) {
    // PLog("Running b_oS_bsi4bb_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_bssos_(void* target, struct S_bssos_ p0, MethodInfo* method) {
    // PLog("Running b_oS_bssos_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_(void* target, struct S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4_(void* target, struct S_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4bi4_(void* target, struct S_i4bi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4bi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i2i2u1u1u1u1u1u1u1u1_(void* target, struct S_i4i2i2u1u1u1u1u1u1u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i2i2u1u1u1u1u1u1u1u1_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4O_(void* target, struct S_i4i4O_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4O_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__(void* target, struct S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4S_r4r4__(void* target, struct S_i4i4S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4S_r4r4__o(void* target, struct S_i4i4S_r4r4__ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oS_i4i4S_r4r4__o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4S_r4r4__oo(void* target, struct S_i4i4S_r4r4__ p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oS_i4i4S_r4r4__oo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_(void* target, struct S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4_(void* target, struct S_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4i4_(void* target, struct S_i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4i4i4_(void* target, struct S_i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4i4i4i4i4i4i4_(void* target, struct S_i4i4i4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4i4i4i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__(void* target, struct S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4r4r4_(void* target, struct S_i4i4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4s_(void* target, struct S_i4i4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4sb_(void* target, struct S_i4i4sb_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4sb_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4ssi4b_(void* target, struct S_i4i4ssi4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4ssi4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4i4u8_(void* target, struct S_i4i4u8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4i4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4oOi4_(void* target, struct S_i4oOi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4oOi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4o_(void* target, struct S_i4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4oo_(void* target, struct S_i4oo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4oo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4oor4_(void* target, struct S_i4oor4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4oor4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4r4_(void* target, struct S_i4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4r4i4i4i4i4S_r4r4_S_r4r4__(void* target, struct S_i4r4i4i4i4i4S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4r4i4i4i4i4S_r4r4_S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4r8i4s_(void* target, struct S_i4r8i4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4r8i4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4s_(void* target, struct S_i4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4si4O_(void* target, struct S_i4si4O_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4si4O_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4si4_(void* target, struct S_i4si4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4si4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4sr4S_r4i4_b_(void* target, struct S_i4sr4S_r4i4_b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4sr4S_r4i4_b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4ss_(void* target, struct S_i4ss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4ss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4u1u1u1u1_(void* target, struct S_i4u1u1u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4u1u1u1u1_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4u2u2so_(void* target, struct S_i4u2u2so_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4u2u2so_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4u4u1_(void* target, struct S_i4u4u1_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4u4u1_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i4u8ss_(void* target, struct S_i4u8ss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i4u8ss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8i4i4i4i4_(void* target, struct S_i8i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8i4u1i4r8S_i4i4i4i4i4pi4__(void* target, struct S_i8i4u1i4r8S_i4i4i4i4i4pi4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8i4u1i4r8S_i4i4i4i4i4pi4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8i8S_Oi8i8S_r4r4r4r4___(void* target, struct S_i8i8S_Oi8i8S_r4r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8i8S_Oi8i8S_r4r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8i8_(void* target, struct S_i8i8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8i8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8i8i8_(void* target, struct S_i8i8i8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8i8i8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8i8o_(void* target, struct S_i8i8o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8i8o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8oo_(void* target, struct S_i8oo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8oo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_i8s_(void* target, struct S_i8s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_i8s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oO_(void* target, struct S_oO_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oO_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_S_r4r4r4_S_r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_i4i4__(void* target, struct S_oS_i4i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_i4i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_i4r4o_r4_(void* target, struct S_oS_i4r4o_r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_i4r4o_r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_r4r4r4_S_r4r4_r4_(void* target, struct S_oS_r4r4r4_S_r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_r4r4r4_S_r4r4_r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_r4r4r4__(void* target, struct S_oS_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_r4r4r4r4_bbo_(void* target, struct S_oS_r4r4r4r4_bbo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_r4r4r4r4_bbo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oS_u4u4_o_(void* target, struct S_oS_u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oS_u4u4_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_o_(void* target, struct S_o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ob_(void* target, struct S_ob_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ob_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_obi4_(void* target, struct S_obi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_obi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oi4_(void* target, struct S_oi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oi4i4_(void* target, struct S_oi4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oi4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oi4o_(void* target, struct S_oi4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oi4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oi4r4_(void* target, struct S_oi4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oi4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oi4s_(void* target, struct S_oi4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oi4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oo_(void* target, struct S_oo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oobsoobr4_(void* target, struct S_oobsoobr4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oobsoobr4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ooi4_(void* target, struct S_ooi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ooi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ooi4b_(void* target, struct S_ooi4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ooi4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_(void* target, struct S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ooo_(void* target, struct S_ooo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ooo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oooi4_(void* target, struct S_oooi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oooi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oooi4s_(void* target, struct S_oooi4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oooi4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ooooi4b_(void* target, struct S_ooooi4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ooooi4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oor4r4_(void* target, struct S_oor4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oor4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_(void* target, struct S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_or4_(void* target, struct S_or4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_or4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_or4r4S_r4r4r4_S_r4r4r4__(void* target, struct S_or4r4S_r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_or4r4S_r4r4r4_S_r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_or8oi8i4_(void* target, struct S_or8oi8i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_or8oi8i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_os_(void* target, struct S_os_ p0, MethodInfo* method) {
    // PLog("Running b_oS_os_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_osi4_(void* target, struct S_osi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_osi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_oso_(void* target, struct S_oso_ p0, MethodInfo* method) {
    // PLog("Running b_oS_oso_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ossS_u4u4u4u4__(void* target, struct S_ossS_u4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_ossS_u4u4u4u4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ou4_(void* target, struct S_ou4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ou4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ou4os_(void* target, struct S_ou4os_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ou4os_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ou4u4u4u4u4u4u8u8_(void* target, struct S_ou4u4u4u4u4u4u8u8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ou4u4u4u4u4u4u8u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_pi4_(void* target, struct S_pi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_pi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_pi4i4_(void* target, struct S_pi4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_pi4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_pu4u4u4u4_(void* target, struct S_pu4u4u4u4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_pu4u4u4u4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4S_oS_r4r4r4_r4__(void* target, struct S_r4S_oS_r4r4r4_r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4S_oS_r4r4r4_r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4S_r4__(void* target, struct S_r4S_r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4S_r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4S_r4r4r4r4__(void* target, struct S_r4S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4S_r4r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4i4_(void* target, struct S_r4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4o_(void* target, struct S_r4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4_(void* target, struct S_r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4_(void* target, struct S_r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4_S_r4r4r4_o(void* target, struct S_r4r4r4_ p0, struct S_r4r4r4_ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4_S_r4r4r4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4r4_(void* target, struct S_r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4r4_o(void* target, struct S_r4r4r4r4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4r4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4r4i4i4i4i4_(void* target, struct S_r4r4r4r4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4r4i4i4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4r4r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r4s_(void* target, struct S_r4s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r4s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r8obi2_(void* target, struct S_r8obi2_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r8obi2_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_r8r8_(void* target, struct S_r8r8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_r8r8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sO_(void* target, struct S_sO_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sO_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___(void* target, struct S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_i4oo__(void* target, struct S_sS_i4oo__ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_i4oo__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_oi4i4__(void* target, struct S_sS_oi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_oi4i4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_r4r4r4_S_r4r4r4r4__(void* target, struct S_sS_r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_r4r4r4_S_r4r4r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__(void* target, struct S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_ssob_so_(void* target, struct S_sS_ssob_so_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_ssob_so_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sS_u8__(void* target, struct S_sS_u8__ p0, MethodInfo* method) {
    // PLog("Running b_oS_sS_u8__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_s_(void* target, struct S_s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sb_(void* target, struct S_sb_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sb_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sbi4i4ooboo_(void* target, struct S_sbi4i4ooboo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sbi4i4ooboo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4O_(void* target, struct S_si4O_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4O_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_(void* target, struct S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4_(void* target, struct S_si4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4_(void* target, struct S_si4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4_o(void* target, struct S_si4i4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oS_si4i4_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4_s(void* target, struct S_si4i4_ p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_oS_si4i4_s");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4_so(void* target, struct S_si4i4_ p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oS_si4i4_so");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4b_(void* target, struct S_si4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4i4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4i4o_(void* target, struct S_si4i4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4i4i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4o_(void* target, struct S_si4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_si4oobbi4i4i4boo_(void* target, struct S_si4oobbi4i4i4boo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_si4oobbi4i4i4boo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_so_(void* target, struct S_so_ p0, MethodInfo* method) {
    // PLog("Running b_oS_so_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sob_(void* target, struct S_sob_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sob_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_soi4u4_(void* target, struct S_soi4u4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_soi4u4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_soo_(void* target, struct S_soo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_soo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sosi4_(void* target, struct S_sosi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sosi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_soss_(void* target, struct S_soss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_soss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__(void* target, struct S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sr4_(void* target, struct S_sr4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sr4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssS_i4_i4o_(void* target, struct S_ssS_i4_i4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssS_i4_i4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ss_(void* target, struct S_ss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ss_o(void* target, struct S_ss_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oS_ss_o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ss_oo(void* target, struct S_ss_ p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oS_ss_oo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssb_(void* target, struct S_ssb_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssb_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssi4_(void* target, struct S_ssi4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssi4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sso_(void* target, struct S_sso_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sso_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssob_(void* target, struct S_ssob_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssob_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssoo_(void* target, struct S_ssoo_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssoo_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sss_(void* target, struct S_sss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sssi4i4i4_(void* target, struct S_sssi4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sssi4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sssi4i4osS_r4r4r4r4_oi4O_(void* target, struct S_sssi4i4osS_r4r4r4r4_oi4O_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sssi4i4osS_r4r4r4r4_oi4O_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssss_(void* target, struct S_ssss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sssss_(void* target, struct S_sssss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sssss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_sssssss_(void* target, struct S_sssssss_ p0, MethodInfo* method) {
    // PLog("Running b_oS_sssssss_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssu1_(void* target, struct S_ssu1_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssu1_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_(void* target, struct S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_su4_(void* target, struct S_su4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_su4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_su4so_(void* target, struct S_su4so_ p0, MethodInfo* method) {
    // PLog("Running b_oS_su4so_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u2S_i4u1u1u1u1_su2_(void* target, struct S_u2S_i4u1u1u1u1_su2_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u2S_i4u1u1u1u1_su2_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u2u2i4_(void* target, struct S_u2u2i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u2u2i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u4S_r4r4_u4S_r4r4__(void* target, struct S_u4S_r4r4_u4S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_oS_u4S_r4r4_u4S_r4r4__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u4i4i4_(void* target, struct S_u4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u4i4i4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u4o_(void* target, struct S_u4o_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u4o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_(void* target, struct S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u4u4u4u4_(void* target, struct S_u4u4u4u4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u4u4u4u4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u8_(void* target, struct S_u8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u8b_(void* target, struct S_u8b_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u8b_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u8i4i4S_u4u4_S_i4i4i4i4_s_(void* target, struct S_u8i4i4S_u4u4_S_i4i4i4i4_s_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u8i4i4S_u4u4_S_i4i4i4i4_s_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u8u4_(void* target, struct S_u8u4_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u8u4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oS_u8u8_(void* target, struct S_u8u8_ p0, MethodInfo* method) {
    // PLog("Running b_oS_u8u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ob(void* target, bool p0, MethodInfo* method) {
    // PLog("Running b_ob");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<bool>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oc(void* target, Il2CppChar p0, MethodInfo* method) {
    // PLog("Running b_oc");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppChar>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi2(void* target, int16_t p0, MethodInfo* method) {
    // PLog("Running b_oi2");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int16_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_oi4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi4S_r4r4r4_r4(void* target, int32_t p0, struct S_r4r4r4_ p1, float p2, MethodInfo* method) {
    // PLog("Running b_oi4S_r4r4r4_r4");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi4oo(void* target, int32_t p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oi4oo");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi4s(void* target, int32_t p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_oi4s");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi4soO(void* target, int32_t p0, Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_oi4soO");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi8(void* target, int64_t p0, MethodInfo* method) {
    // PLog("Running b_oi8");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int64_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oi8oo(void* target, int64_t p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oi8oo");

    auto TIret = GetReturnType(method);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<int64_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oo(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_oo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_ooO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooS_r4r4_(void* target, Il2CppObject* p0, struct S_r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_ooS_r4r4_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oobb(void* target, Il2CppObject* p0, bool p1, bool p2, MethodInfo* method) {
    // PLog("Running b_oobb");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<bool>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_ooi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooi4S_r4r4_ooPi4(void* target, Il2CppObject* p0, int32_t p1, struct S_r4r4_ p2, Il2CppObject* p3, Il2CppObject* p4, int32_t* p5, MethodInfo* method) {
    // PLog("Running b_ooi4S_r4r4_ooPi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        converter::Converter<std::reference_wrapper<int32_t>>::toScript(apis, env, *p5)
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooi4i4S_o_(void* target, Il2CppObject* p0, int32_t p1, int32_t p2, struct S_o_ p3, MethodInfo* method) {
    // PLog("Running b_ooi4i4S_o_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_ooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooO(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oooO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooS_r4r4_i4(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_r4r4_ p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_oooS_r4r4_i4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooi4(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_oooi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooi8o(void* target, Il2CppObject* p0, Il2CppObject* p1, int64_t p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_oooi8o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int64_t>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_oooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooO(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_ooooO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_ooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooO(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_oooooO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_oooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, MethodInfo* method) {
    // PLog("Running b_ooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5)
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, MethodInfo* method) {
    // PLog("Running b_oooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[7]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6)
    };
    auto jsret = apis->call_function(env, func, nullptr, 7, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, MethodInfo* method) {
    // PLog("Running b_ooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[8]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7)
    };
    auto jsret = apis->call_function(env, func, nullptr, 8, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, MethodInfo* method) {
    // PLog("Running b_oooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[9]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8)
    };
    auto jsret = apis->call_function(env, func, nullptr, 9, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, MethodInfo* method) {
    // PLog("Running b_ooooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);
    auto TIp9 = GetParameterType(method, 9);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[10]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8),
        CSRefToJsValue(apis, env, TIp9, p9)
    };
    auto jsret = apis->call_function(env, func, nullptr, 10, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, Il2CppObject* p10, MethodInfo* method) {
    // PLog("Running b_oooooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);
    auto TIp9 = GetParameterType(method, 9);
    auto TIp10 = GetParameterType(method, 10);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[11]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8),
        CSRefToJsValue(apis, env, TIp9, p9),
        CSRefToJsValue(apis, env, TIp10, p10)
    };
    auto jsret = apis->call_function(env, func, nullptr, 11, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, Il2CppObject* p10, Il2CppObject* p11, MethodInfo* method) {
    // PLog("Running b_ooooooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);
    auto TIp9 = GetParameterType(method, 9);
    auto TIp10 = GetParameterType(method, 10);
    auto TIp11 = GetParameterType(method, 11);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[12]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8),
        CSRefToJsValue(apis, env, TIp9, p9),
        CSRefToJsValue(apis, env, TIp10, p10),
        CSRefToJsValue(apis, env, TIp11, p11)
    };
    auto jsret = apis->call_function(env, func, nullptr, 12, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, Il2CppObject* p10, Il2CppObject* p11, Il2CppObject* p12, MethodInfo* method) {
    // PLog("Running b_oooooooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);
    auto TIp9 = GetParameterType(method, 9);
    auto TIp10 = GetParameterType(method, 10);
    auto TIp11 = GetParameterType(method, 11);
    auto TIp12 = GetParameterType(method, 12);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[13]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8),
        CSRefToJsValue(apis, env, TIp9, p9),
        CSRefToJsValue(apis, env, TIp10, p10),
        CSRefToJsValue(apis, env, TIp11, p11),
        CSRefToJsValue(apis, env, TIp12, p12)
    };
    auto jsret = apis->call_function(env, func, nullptr, 13, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooooooooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, Il2CppObject* p10, Il2CppObject* p11, Il2CppObject* p12, Il2CppObject* p13, MethodInfo* method) {
    // PLog("Running b_ooooooooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);
    auto TIp9 = GetParameterType(method, 9);
    auto TIp10 = GetParameterType(method, 10);
    auto TIp11 = GetParameterType(method, 11);
    auto TIp12 = GetParameterType(method, 12);
    auto TIp13 = GetParameterType(method, 13);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[14]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8),
        CSRefToJsValue(apis, env, TIp9, p9),
        CSRefToJsValue(apis, env, TIp10, p10),
        CSRefToJsValue(apis, env, TIp11, p11),
        CSRefToJsValue(apis, env, TIp12, p12),
        CSRefToJsValue(apis, env, TIp13, p13)
    };
    auto jsret = apis->call_function(env, func, nullptr, 14, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oooooooooooooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, Il2CppObject* p10, Il2CppObject* p11, Il2CppObject* p12, Il2CppObject* p13, Il2CppObject* p14, MethodInfo* method) {
    // PLog("Running b_oooooooooooooooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);
    auto TIp9 = GetParameterType(method, 9);
    auto TIp10 = GetParameterType(method, 10);
    auto TIp11 = GetParameterType(method, 11);
    auto TIp12 = GetParameterType(method, 12);
    auto TIp13 = GetParameterType(method, 13);
    auto TIp14 = GetParameterType(method, 14);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[15]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6),
        CSRefToJsValue(apis, env, TIp7, p7),
        CSRefToJsValue(apis, env, TIp8, p8),
        CSRefToJsValue(apis, env, TIp9, p9),
        CSRefToJsValue(apis, env, TIp10, p10),
        CSRefToJsValue(apis, env, TIp11, p11),
        CSRefToJsValue(apis, env, TIp12, p12),
        CSRefToJsValue(apis, env, TIp13, p13),
        CSRefToJsValue(apis, env, TIp14, p14)
    };
    auto jsret = apis->call_function(env, func, nullptr, 15, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oop(void* target, Il2CppObject* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_oop");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oos(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_oos");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oosPS_si4i4_oi4o(void* target, Il2CppObject* p0, Il2CppString* p1, struct S_si4i4_* p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, MethodInfo* method) {
    // PLog("Running b_oosPS_si4i4_oi4o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp5 = GetParameterType(method, 5);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false)),
        CSRefToJsValue(apis, env, TIp3, p3),
        converter::Converter<int32_t>::toScript(apis, env, p4),
        CSRefToJsValue(apis, env, TIp5, p5)
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oosb(void* target, Il2CppObject* p0, Il2CppString* p1, bool p2, MethodInfo* method) {
    // PLog("Running b_oosb");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ooso(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_ooso");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oosu8(void* target, Il2CppObject* p0, Il2CppString* p1, uint64_t p2, MethodInfo* method) {
    // PLog("Running b_oosu8");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<uint64_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oou4u4(void* target, Il2CppObject* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_oou4u4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_op(void* target, void* p0, MethodInfo* method) {
    // PLog("Running b_op");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->create_binary(env, p0, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_or4(void* target, float p0, MethodInfo* method) {
    // PLog("Running b_or4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<float>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_or8(void* target, double p0, MethodInfo* method) {
    // PLog("Running b_or8");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<double>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_os(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_os");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_osi4o(void* target, Il2CppString* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_osi4o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oso(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_oso");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_osoo(void* target, Il2CppString* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_osoo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_osooo(void* target, Il2CppString* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_osooo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_oss(void* target, Il2CppString* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_oss");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ou1(void* target, uint8_t p0, MethodInfo* method) {
    // PLog("Running b_ou1");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint8_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ou2(void* target, uint16_t p0, MethodInfo* method) {
    // PLog("Running b_ou2");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint16_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ou4(void* target, uint32_t p0, MethodInfo* method) {
    // PLog("Running b_ou4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static Il2CppObject* b_ou8(void* target, uint64_t p0, MethodInfo* method) {
    // PLog("Running b_ou8");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint64_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal o/O
    Il2CppObject* ret = JsValueToCSRef(apis, TIret, env, jsret);
    return ret;
        
}

static void* b_pPS__Pu1pPS_u4u4u8_(void* target, struct S__* p0, uint8_t* p1, void* p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_pPS__Pu1pPS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        apis->create_binary(env, p2, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pPvPu1pPS_u4u4u8_(void* target, void* p0, uint8_t* p1, void* p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_pPvPu1pPS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        apis->create_binary(env, p2, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pS_u8_Pu1pPS_u4u4u8_(void* target, struct S_u8_ p0, uint8_t* p1, void* p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_pS_u8_Pu1pPS_u4u4u8_");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        apis->create_binary(env, p2, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pp(void* target, void* p0, MethodInfo* method) {
    // PLog("Running b_pp");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->create_binary(env, p0, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppPu4(void* target, void* p0, uint32_t* p1, MethodInfo* method) {
    // PLog("Running b_ppPu4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<std::reference_wrapper<uint32_t>>::toScript(apis, env, *p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppb(void* target, void* p0, bool p1, MethodInfo* method) {
    // PLog("Running b_ppb");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppi4(void* target, void* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_ppi4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppi8(void* target, void* p0, int64_t p1, MethodInfo* method) {
    // PLog("Running b_ppi8");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<int64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppopo(void* target, void* p0, Il2CppObject* p1, void* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_ppopo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        CSRefToJsValue(apis, env, TIp1, p1),
        apis->create_binary(env, p2, 0),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_ppp");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pppPp(void* target, void* p0, void* p1, void** p2, MethodInfo* method) {
    // PLog("Running b_pppPp");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        // unknow ret signature: Pp
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pppi4i8(void* target, void* p0, void* p1, int32_t p2, int64_t p3, MethodInfo* method) {
    // PLog("Running b_pppi4i8");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        converter::Converter<int64_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pppp(void* target, void* p0, void* p1, void* p2, MethodInfo* method) {
    // PLog("Running b_pppp");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppppPp(void* target, void* p0, void* p1, void* p2, void** p3, MethodInfo* method) {
    // PLog("Running b_ppppPp");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        // unknow ret signature: Pp
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppppb(void* target, void* p0, void* p1, void* p2, bool p3, MethodInfo* method) {
    // PLog("Running b_ppppb");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppppi4o(void* target, void* p0, void* p1, void* p2, int32_t p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_ppppi4o");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        converter::Converter<int32_t>::toScript(apis, env, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pppps(void* target, void* p0, void* p1, void* p2, Il2CppString* p3, MethodInfo* method) {
    // PLog("Running b_pppps");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppps(void* target, void* p0, void* p1, Il2CppString* p2, MethodInfo* method) {
    // PLog("Running b_ppps");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_pppu4(void* target, void* p0, void* p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_pppu4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppr8(void* target, void* p0, double p1, MethodInfo* method) {
    // PLog("Running b_ppr8");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<double>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppsp(void* target, void* p0, Il2CppString* p1, void* p2, MethodInfo* method) {
    // PLog("Running b_ppsp");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        apis->create_binary(env, p2, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppu4(void* target, void* p0, uint32_t p1, MethodInfo* method) {
    // PLog("Running b_ppu4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<uint32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static void* b_ppu8(void* target, void* p0, uint64_t p1, MethodInfo* method) {
    // PLog("Running b_ppu8");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<uint64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    void* ret = DataTransfer::GetPointer<void>(apis, env, jsret);
    return ret;
        
}

static float b_r4(void* target, MethodInfo* method) {
    // PLog("Running b_r4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4PS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4r4(void* target, struct S_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__* p0, float p1, float p2, MethodInfo* method) {
    // PLog("Running b_r4PS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4r4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<float>::toScript(apis, env, p1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4S_r4r4_(void* target, struct S_r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_r4S_r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4S_r4r4r4_(void* target, struct S_r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_r4S_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4S_r4r4r4r4_(void* target, struct S_r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_r4S_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4S_r4r4r4r4_i4r4(void* target, struct S_r4r4r4r4_ p0, int32_t p1, float p2, MethodInfo* method) {
    // PLog("Running b_r4S_r4r4r4r4_i4r4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4i4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_r4i4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_r4o");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4oS_PS_S_i4u2u2r8i4___(void* target, Il2CppObject* p0, struct S_PS_S_i4u2u2r8i4___ p1, MethodInfo* method) {
    // PLog("Running b_r4oS_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4oi4oo(void* target, Il2CppObject* p0, int32_t p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_r4oi4oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4ooS_r4r4r4_(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_r4r4r4_ p2, MethodInfo* method) {
    // PLog("Running b_r4ooS_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4or4S_r4r4r4_(void* target, Il2CppObject* p0, float p1, struct S_r4r4r4_ p2, MethodInfo* method) {
    // PLog("Running b_r4or4S_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<float>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_r4os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4r4(void* target, float p0, MethodInfo* method) {
    // PLog("Running b_r4r4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<float>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4r4PS_r4r4r4r4_(void* target, float p0, struct S_r4r4r4r4_* p1, MethodInfo* method) {
    // PLog("Running b_r4r4PS_r4r4r4r4_");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<float>::toScript(apis, env, p0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4r4r4r4(void* target, float p0, float p1, float p2, MethodInfo* method) {
    // PLog("Running b_r4r4r4r4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<float>::toScript(apis, env, p0),
        converter::Converter<float>::toScript(apis, env, p1),
        converter::Converter<float>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4r4r4r4r4(void* target, float p0, float p1, float p2, float p3, MethodInfo* method) {
    // PLog("Running b_r4r4r4r4r4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<float>::toScript(apis, env, p0),
        converter::Converter<float>::toScript(apis, env, p1),
        converter::Converter<float>::toScript(apis, env, p2),
        converter::Converter<float>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static float b_r4s(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_r4s");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    float ret = converter::Converter<float>::toCpp(apis, env, jsret);
    return ret;
        
}

static double b_r8(void* target, MethodInfo* method) {
    // PLog("Running b_r8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    double ret = converter::Converter<double>::toCpp(apis, env, jsret);
    return ret;
        
}

static double b_r8o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_r8o");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    double ret = converter::Converter<double>::toCpp(apis, env, jsret);
    return ret;
        
}

static double b_r8os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_r8os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    double ret = converter::Converter<double>::toCpp(apis, env, jsret);
    return ret;
        
}

static double b_r8pp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_r8pp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    double ret = converter::Converter<double>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_s(void* target, MethodInfo* method) {
    // PLog("Running b_s");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sO(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_sO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sPS_sssssss_so(void* target, struct S_sssssss_* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_sPS_sssssss_so");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sS_oS_i4_osS_i4u1u1u1u1__(void* target, struct S_oS_i4_osS_i4u1u1u1u1__ p0, MethodInfo* method) {
    // PLog("Running b_sS_oS_i4_osS_i4u1u1u1u1__");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_si4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_si4");

    auto TIret = GetReturnType(method);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_so(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_so");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sob(void* target, Il2CppObject* p0, bool p1, MethodInfo* method) {
    // PLog("Running b_sob");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_soo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_soo");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sooO(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_sooO");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sos(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_sos");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sou4u4(void* target, Il2CppObject* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_sou4u4");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_ss(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_ss");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sso(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_sso");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_sss(void* target, Il2CppString* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_sss");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static Il2CppString* b_ssso(void* target, Il2CppString* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_ssso");

    auto TIret = GetReturnType(method);
    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal s
    Il2CppString* ret = converter::Converter<Il2CppString*>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint8_t b_u1(void* target, MethodInfo* method) {
    // PLog("Running b_u1");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint8_t ret = converter::Converter<uint8_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint16_t b_u2os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_u2os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint16_t ret = converter::Converter<uint16_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4(void* target, MethodInfo* method) {
    // PLog("Running b_u4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4PS__PS_u4u4u8_(void* target, struct S__* p0, struct S_u4u4u8_* p1, MethodInfo* method) {
    // PLog("Running b_u4PS__PS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4PvS_u8_PS_u4u4u8_(void* target, void* p0, struct S_u8_ p1, struct S_u4u4u8_* p2, MethodInfo* method) {
    // PLog("Running b_u4PvS_u8_PS_u4u4u8_");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4PvS_u8_u4PS_u4u4u8_(void* target, void* p0, struct S_u8_ p1, uint32_t p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_u4PvS_u8_u4PS_u4u4u8_");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<uint32_t>::toScript(apis, env, p2),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4S_u8_Pu1poPvPS_u4u4u8_(void* target, struct S_u8_ p0, uint8_t* p1, void* p2, Il2CppObject* p3, void* p4, struct S_u4u4u8_* p5, MethodInfo* method) {
    // PLog("Running b_u4S_u8_Pu1poPvPS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp5 = GetParameterType(method, 5);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        apis->create_binary(env, p2, 0),
        CSRefToJsValue(apis, env, TIp3, p3),
        apis->create_binary(env, p4, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp5, p5, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4S_u8_S_u8_Pu1poPvPS_u4u4u8_(void* target, struct S_u8_ p0, struct S_u8_ p1, uint8_t* p2, void* p3, Il2CppObject* p4, void* p5, struct S_u4u4u8_* p6, MethodInfo* method) {
    // PLog("Running b_u4S_u8_S_u8_Pu1poPvPS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp6 = GetParameterType(method, 6);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[7]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p2),
        apis->create_binary(env, p3, 0),
        CSRefToJsValue(apis, env, TIp4, p4),
        apis->create_binary(env, p5, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp6, p6, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 7, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_u4os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4pp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_u4pp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint32_t b_u4u4pu4(void* target, uint32_t p0, void* p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_u4u4pu4");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<uint32_t>::toScript(apis, env, p0),
        apis->create_binary(env, p1, 0),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint32_t ret = converter::Converter<uint32_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint64_t b_u8(void* target, MethodInfo* method) {
    // PLog("Running b_u8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint64_t ret = converter::Converter<uint64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint64_t b_u8Pu1Pu1i8Pu1(void* target, uint8_t* p0, uint8_t* p1, int64_t p2, uint8_t* p3, MethodInfo* method) {
    // PLog("Running b_u8Pu1Pu1i8Pu1");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p0),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        converter::Converter<int64_t>::toScript(apis, env, p2),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint64_t ret = converter::Converter<uint64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint64_t b_u8o(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_u8o");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint64_t ret = converter::Converter<uint64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint64_t b_u8os(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_u8os");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint64_t ret = converter::Converter<uint64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint64_t b_u8ou4u4(void* target, Il2CppObject* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_u8ou4u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint64_t ret = converter::Converter<uint64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static uint64_t b_u8pp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_u8pp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
        return {};
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
        return {};
    }
    
    // JSValToCSVal P any
    uint64_t ret = converter::Converter<uint64_t>::toCpp(apis, env, jsret);
    return ret;
        
}

static void b_v(void* target, MethodInfo* method) {
    // PLog("Running b_v");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value *argv = nullptr;
    auto jsret = apis->call_function(env, func, nullptr, 0, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vO(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_vO");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vODo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vODo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vOO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOS_Oi4_(void* target, Il2CppObject* p0, struct S_Oi4_ p1, MethodInfo* method) {
    // PLog("Running b_vOS_Oi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOS_Oi4_o(void* target, Il2CppObject* p0, struct S_Oi4_ p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vOS_Oi4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOS_S_S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_s__(void* target, Il2CppObject* p0, struct S_S_S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_s__ p1, MethodInfo* method) {
    // PLog("Running b_vOS_S_S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_s__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOS_ooo_(void* target, Il2CppObject* p0, struct S_ooo_ p1, MethodInfo* method) {
    // PLog("Running b_vOS_ooo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOb(void* target, Il2CppObject* p0, bool p1, MethodInfo* method) {
    // PLog("Running b_vOb");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vOi4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vOo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOoi4(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vOoi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vOsO(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vOsO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_Pi4PS_S_r4r4r4_S_r4r4r4__PS_r4r4r4r4_Pi4Pu4Pi4Pi4PS_u4_Pi4Pi4Pi2Pi4Pi2Pi4Pi4PS_u8_i4Pi4i4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Pi4i4Pi4Pi2Pi4i4PS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_i4Pi4i4Pi4PS_u4_Pi4i4_ooo(void* target, struct S_Pi4PS_S_r4r4r4_S_r4r4r4__PS_r4r4r4r4_Pi4Pu4Pi4Pi4PS_u4_Pi4Pi4Pi2Pi4Pi2Pi4Pi4PS_u8_i4Pi4i4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Pi4i4Pi4Pi2Pi4i4PS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_i4Pi4i4Pi4PS_u4_Pi4i4_* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_vPS_Pi4PS_S_r4r4r4_S_r4r4r4__PS_r4r4r4r4_Pi4Pu4Pi4Pi4PS_u4_Pi4Pi4Pi2Pi4Pi2Pi4Pi4PS_u8_i4Pi4i4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Pi4i4Pi4Pi2Pi4i4PS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_i4Pi4i4Pi4PS_u4_Pi4i4_ooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_Pi4Pi4Pi4Pi4PS_r4r4r4_Pr4Pi2PbPu1i4Pi4i4Pi2Pr4Pr4i4_o(void* target, struct S_Pi4Pi4Pi4Pi4PS_r4r4r4_Pr4Pi2PbPu1i4Pi4i4Pi2Pr4Pr4i4_* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vPS_Pi4Pi4Pi4Pi4PS_r4r4r4_Pr4Pi2PbPu1i4Pi4i4Pi2Pr4Pr4i4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__oo(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__* p0, MethodInfo* method) {
    // PLog("Running b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__* p0, MethodInfo* method) {
    // PLog("Running b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_i4i4S_i4___(void* target, struct S_S_i4i4S_i4___* p0, MethodInfo* method) {
    // PLog("Running b_vPS_S_i4i4S_i4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_i4i4_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___i4_(void* target, struct S_S_i4i4_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___i4_* p0, MethodInfo* method) {
    // PLog("Running b_vPS_S_i4i4_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___N_bS_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4_____(void* target, struct S_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___N_bS_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4_____* p0, MethodInfo* method) {
    // PLog("Running b_vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___N_bS_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4_____");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____(void* target, struct S_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____* p0, MethodInfo* method) {
    // PLog("Running b_vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__(void* target, struct S__* p0, MethodInfo* method) {
    // PLog("Running b_vPS__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__PS_u4u4u8_(void* target, struct S__* p0, struct S_u4u4u8_* p1, MethodInfo* method) {
    // PLog("Running b_vPS__PS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__Pu1pPS_u4u4u8_(void* target, struct S__* p0, uint8_t* p1, void* p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_vPS__Pu1pPS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        apis->create_binary(env, p2, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__Pu4pPS_u4u4u8_(void* target, struct S__* p0, uint32_t* p1, void* p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_vPS__Pu4pPS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<std::reference_wrapper<uint32_t>>::toScript(apis, env, *p1),
        apis->create_binary(env, p2, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__S_u8_PS_u4u4u8_(void* target, struct S__* p0, struct S_u8_ p1, struct S_u4u4u8_* p2, MethodInfo* method) {
    // PLog("Running b_vPS__S_u8_PS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__oPvPS_u4u4u8_(void* target, struct S__* p0, Il2CppObject* p1, void* p2, struct S_u4u4u8_* p3, MethodInfo* method) {
    // PLog("Running b_vPS__oPvPS_u4u4u8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        CSRefToJsValue(apis, env, TIp1, p1),
        apis->create_binary(env, p2, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS__u4(void* target, struct S__* p0, uint32_t p1, MethodInfo* method) {
    // PLog("Running b_vPS__u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<uint32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_i4_(void* target, struct S_i4_* p0, MethodInfo* method) {
    // PLog("Running b_vPS_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_i4i4_i4(void* target, struct S_i4i4_* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vPS_i4i4_i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_i4i4i4_i4(void* target, struct S_i4i4i4_* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vPS_i4i4i4_i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_i4i4i4i4_i4(void* target, struct S_i4i4i4i4_* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vPS_i4i4i4i4_i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_oS_i4S_i4_S_i4___(void* target, struct S_oS_i4S_i4_S_i4___* p0, MethodInfo* method) {
    // PLog("Running b_vPS_oS_i4S_i4_S_i4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_oS_i4S_i4___(void* target, struct S_oS_i4S_i4___* p0, MethodInfo* method) {
    // PLog("Running b_vPS_oS_i4S_i4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_oS_i4i4i4i4S_i4_S_i4__S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____(void* target, struct S_oS_i4i4i4i4S_i4_S_i4__S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____* p0, MethodInfo* method) {
    // PLog("Running b_vPS_oS_i4i4i4i4S_i4_S_i4__S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_r4r4_r4(void* target, struct S_r4r4_* p0, float p1, MethodInfo* method) {
    // PLog("Running b_vPS_r4r4_r4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_r4r4r4_r4(void* target, struct S_r4r4r4_* p0, float p1, MethodInfo* method) {
    // PLog("Running b_vPS_r4r4r4_r4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_r4r4r4r4_r4(void* target, struct S_r4r4r4r4_* p0, float p1, MethodInfo* method) {
    // PLog("Running b_vPS_r4r4r4r4_r4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_r4r4r4r4i4i4r4r4_(void* target, struct S_r4r4r4r4i4i4r4r4_* p0, MethodInfo* method) {
    // PLog("Running b_vPS_r4r4r4r4i4i4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_si4i4_(void* target, struct S_si4i4_* p0, MethodInfo* method) {
    // PLog("Running b_vPS_si4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPS_u4u4u8_u4(void* target, struct S_u4u4u8_* p0, uint32_t p1, MethodInfo* method) {
    // PLog("Running b_vPS_u4u4u8_u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->boxing(env, apis->native_object_to_value(env, TIp0, p0, false)),
        converter::Converter<uint32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPr4Pb(void* target, float* p0, bool* p1, MethodInfo* method) {
    // PLog("Running b_vPr4Pb");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<std::reference_wrapper<float>>::toScript(apis, env, *p0),
        converter::Converter<std::reference_wrapper<bool>>::toScript(apis, env, *p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPu1Pu1i8Pu1PS_u4u4u4u4_(void* target, uint8_t* p0, uint8_t* p1, int64_t p2, uint8_t* p3, struct S_u4u4u4u4_* p4, MethodInfo* method) {
    // PLog("Running b_vPu1Pu1i8Pu1PS_u4u4u4u4_");

    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p0),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p1),
        converter::Converter<int64_t>::toScript(apis, env, p2),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p3),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPu1pPS_u4u4u8_(void* target, uint8_t* p0, void* p1, struct S_u4u4u8_* p2, MethodInfo* method) {
    // PLog("Running b_vPu1pPS_u4u4u8_");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p0),
        apis->create_binary(env, p1, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPvPS__Pu1p(void* target, void* p0, struct S__* p1, uint8_t* p2, void* p3, MethodInfo* method) {
    // PLog("Running b_vPvPS__Pu1p");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p2),
        apis->create_binary(env, p3, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vPvPS__Pu1pPS__pPS_u8_PS_u8_PS_u4u4u8_(void* target, void* p0, struct S__* p1, uint8_t* p2, void* p3, struct S__* p4, void* p5, struct S_u8_* p6, struct S_u8_* p7, struct S_u4u4u8_* p8, MethodInfo* method) {
    // PLog("Running b_vPvPS__Pu1pPS__pPS_u8_PS_u8_PS_u4u4u8_");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);
    auto TIp7 = GetParameterType(method, 7);
    auto TIp8 = GetParameterType(method, 8);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[9]{
        apis->create_binary(env, p0, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        converter::Converter<std::reference_wrapper<uint8_t>>::toScript(apis, env, *p2),
        apis->create_binary(env, p3, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false)),
        apis->create_binary(env, p5, 0),
        apis->boxing(env, apis->native_object_to_value(env, TIp6, p6, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp7, p7, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp8, p8, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 9, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_OS_oi4__(void* target, struct S_OS_oi4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_OS_oi4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_Oi4_(void* target, struct S_Oi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_Oi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_Oi8_(void* target, struct S_Oi8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_Oi8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_Oi8i8S_r4r4r4r4__(void* target, struct S_Oi8i8S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_Oi8i8S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_PS_S_i4u2u2r8i4___(void* target, struct S_PS_S_i4u2u2r8i4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_PS_S_i4u2u2r8i4___o(void* target, struct S_PS_S_i4u2u2r8i4___ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_PS_S_i4u2u2r8i4___o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_Pu1i4i4i4i4S_pi4i4__(void* target, struct S_Pu1i4i4i4i4S_pi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_Pu1i4i4i4i4S_pi4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_Pvi4i4i4S_pi4i4_i4_(void* target, struct S_Pvi4i4i4S_pi4i4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_Pvi4i4i4S_pi4i4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_Oi4i4__(void* target, struct S_S_Oi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_Oi4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_Pvi4i4i4S_pi4i4_i4_i4_(void* target, struct S_S_Pvi4i4i4S_pi4i4_i4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_Pvi4i4i4S_pi4i4_i4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_(void* target, struct S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_p__i4_(void* target, struct S_S_S_p__i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_p__i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_(void* target, struct S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_u4i4i4_b_i4_(void* target, struct S_S_S_u4i4i4_b_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_u4i4i4_b_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__(void* target, struct S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_S_u4u4u4u4_i8i4s_o_(void* target, struct S_S_S_u4u4u4u4_i8i4s_o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_S_u4u4u4u4_i8i4s_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_i4i2_S_o__(void* target, struct S_S_i4i2_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_i4i2_S_o__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_i4i2_S_r4r4r4r4r4i4__(void* target, struct S_S_i4i2_S_r4r4r4r4r4i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_i4i2_S_r4r4r4r4r4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_ooi4_i4i4_(void* target, struct S_S_ooi4_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_ooi4_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_oooo_ooi4_o(void* target, struct S_S_oooo_ooi4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_S_oooo_ooi4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_oooo_ooi4_oo(void* target, struct S_S_oooo_ooi4_ p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vS_S_oooo_ooi4_oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_p_i4_o(void* target, struct S_S_p_i4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_S_p_i4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_pu4__(void* target, struct S_S_pu4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_pu4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_(void* target, struct S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4_S_r4r4__(void* target, struct S_S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4_oi4_(void* target, struct S_S_r4r4_oi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4_oi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4_r4_(void* target, struct S_S_r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4_r4i4b_(void* target, struct S_S_r4r4r4_S_r4r4r4_r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4_r4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__(void* target, struct S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4_r4_(void* target, struct S_S_r4r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4_S_r4r4r4r4_o_(void* target, struct S_S_r4r4r4r4_S_r4r4r4r4_o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4_S_r4r4r4r4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4_i4_(void* target, struct S_S_r4r4r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4_r4_(void* target, struct S_S_r4r4r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_(void* target, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_s_s_(void* target, struct S_S_s_s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_s_s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_ss_S_o__(void* target, struct S_S_ss_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_ss_S_o__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_(void* target, struct S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u4u4Ob_ob_(void* target, struct S_S_u4u4Ob_ob_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u4u4Ob_ob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u4u4_i8u8b_(void* target, struct S_S_u4u4_i8u8b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u4u4_i8u8b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u4u4_o_(void* target, struct S_S_u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u4u4u4u4_i8i4s_(void* target, struct S_S_u4u4u4u4_i8i4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u4u4u4u4_i8i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u4u4u4u4_o_(void* target, struct S_S_u4u4u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u4u4u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u8S_u8u8__bS_O__(void* target, struct S_S_u8S_u8u8__bS_O__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u8S_u8u8__bS_O__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__(void* target, struct S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u8u8_i4i4_(void* target, struct S_S_u8u8_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u8u8_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_S_u8u8_ooi4i4u8S_r4r4r4_S_r4r4r4r4_S_r4r4r4__(void* target, struct S_S_u8u8_ooi4i4u8S_r4r4r4_S_r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_S_u8u8_ooi4i4u8S_r4r4r4_S_r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS__(void* target, struct S__ p0, MethodInfo* method) {
    // PLog("Running b_vS__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_bsi4bb_(void* target, struct S_bsi4bb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_bsi4bb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_bssos_(void* target, struct S_bssos_ p0, MethodInfo* method) {
    // PLog("Running b_vS_bssos_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4S_c__(void* target, struct S_i4S_c__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4S_c__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4S_r4r4_i4_(void* target, struct S_i4S_r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4S_r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_(void* target, struct S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_(void* target, struct S_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_S_Pvi4S_pi4i4__(void* target, struct S_i4_ p0, struct S_Pvi4S_pi4i4__ p1, MethodInfo* method) {
    // PLog("Running b_vS_i4_S_Pvi4S_pi4i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_S_Pvi4i4i4S_pi4i4_i4_(void* target, struct S_i4_ p0, struct S_Pvi4i4i4S_pi4i4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_vS_i4_S_Pvi4i4i4S_pi4i4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_S_i4_(void* target, struct S_i4_ p0, struct S_i4_ p1, MethodInfo* method) {
    // PLog("Running b_vS_i4_S_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_b(void* target, struct S_i4_ p0, bool p1, MethodInfo* method) {
    // PLog("Running b_vS_i4_b");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_i4(void* target, struct S_i4_ p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vS_i4_i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_i4i4(void* target, struct S_i4_ p0, int32_t p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vS_i4_i4i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4_s(void* target, struct S_i4_ p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_vS_i4_s");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4b_(void* target, struct S_i4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4bi4_(void* target, struct S_i4bi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4bi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i2i2u1u1u1u1u1u1u1u1_(void* target, struct S_i4i2i2u1u1u1u1u1u1u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i2i2u1u1u1u1u1u1u1u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4O_(void* target, struct S_i4i4O_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__(void* target, struct S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_(void* target, struct S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4_(void* target, struct S_i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4_i4(void* target, struct S_i4i4_ p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vS_i4i4_i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4i4_(void* target, struct S_i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4i4i4_(void* target, struct S_i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4i4i4bS_r4r4r4_or4bS_r4r4r4r4_bobbbS_r4r4r4r4_r4bb_oS_r4r4r4r4_o(void* target, struct S_i4i4i4i4bS_r4r4r4_or4bS_r4r4r4r4_bobbbS_r4r4r4r4_r4bb_ p0, Il2CppObject* p1, struct S_r4r4r4r4_ p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_vS_i4i4i4i4bS_r4r4r4_or4bS_r4r4r4r4_bobbbS_r4r4r4r4_r4bb_oS_r4r4r4r4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4i4i4i4_(void* target, struct S_i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4i4i4i4i4i4i4_(void* target, struct S_i4i4i4i4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4i4i4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4i4pi4i4i4_o(void* target, struct S_i4i4i4pi4i4i4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_i4i4i4pi4i4i4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__(void* target, struct S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4r4r4_(void* target, struct S_i4i4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4s_(void* target, struct S_i4i4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4sb_(void* target, struct S_i4i4sb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4sb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4ssi4b_(void* target, struct S_i4i4ssi4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4ssi4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i4u8_(void* target, struct S_i4i4u8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i4u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i8_(void* target, struct S_i4i8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4i8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4i8_o(void* target, struct S_i4i8_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_i4i8_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4oOi4_(void* target, struct S_i4oOi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4oOi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4o_(void* target, struct S_i4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4oo_(void* target, struct S_i4oo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4oor4_(void* target, struct S_i4oor4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4oor4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4osS_u8_S_i8__(void* target, struct S_i4osS_u8_S_i8__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4osS_u8_S_i8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__(void* target, struct S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4r4_(void* target, struct S_i4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4r4i4i4i4i4S_r4r4_S_r4r4__(void* target, struct S_i4r4i4i4i4i4S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4r4i4i4i4i4S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4r8i4s_(void* target, struct S_i4r8i4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4r8i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4s_(void* target, struct S_i4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4si4O_(void* target, struct S_i4si4O_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4si4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4si4_(void* target, struct S_i4si4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4si4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4sr4S_r4i4_b_(void* target, struct S_i4sr4S_r4i4_b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4sr4S_r4i4_b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4ss_(void* target, struct S_i4ss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4ss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4ssb_(void* target, struct S_i4ssb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4ssb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4u1u1_(void* target, struct S_i4u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4u1u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4u1u1u1u1_(void* target, struct S_i4u1u1u1u1_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4u1u1u1u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4u2u2so_(void* target, struct S_i4u2u2so_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4u2u2so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4u4u1_(void* target, struct S_i4u4u1_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4u4u1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i4u8ss_(void* target, struct S_i4u8ss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i4u8ss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8i4i4i4i4_(void* target, struct S_i8i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8i4u1i4r8S_i4i4i4i4i4pi4__(void* target, struct S_i8i4u1i4r8S_i4i4i4i4i4pi4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8i4u1i4r8S_i4i4i4i4i4pi4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8i8S_Oi8i8S_r4r4r4r4___(void* target, struct S_i8i8S_Oi8i8S_r4r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8i8S_Oi8i8S_r4r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8i8_(void* target, struct S_i8i8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8i8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8i8i8_(void* target, struct S_i8i8i8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8i8i8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8i8o_(void* target, struct S_i8i8o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8i8o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8oo_(void* target, struct S_i8oo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_i8s_(void* target, struct S_i8s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_i8s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oO_(void* target, struct S_oO_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oO_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_oS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_(void* target, struct S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_S_r4r4r4_S_r4r4r4___(void* target, struct S_oS_S_r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_S_r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4___oob(void* target, struct S_oS_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4___ p0, Il2CppObject* p1, Il2CppObject* p2, bool p3, MethodInfo* method) {
    // PLog("Running b_vS_oS_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4___oob");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_i4i4__(void* target, struct S_oS_i4i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_i4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_i4r4o_r4_(void* target, struct S_oS_i4r4o_r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_i4r4o_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_r4r4r4_S_r4r4_r4_(void* target, struct S_oS_r4r4r4_S_r4r4_r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_r4r4r4_S_r4r4_r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_r4r4r4__(void* target, struct S_oS_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_r4r4r4r4_bbo_(void* target, struct S_oS_r4r4r4r4_bbo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_r4r4r4r4_bbo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oS_u4u4_o_(void* target, struct S_oS_u4u4_o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oS_u4u4_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_o_(void* target, struct S_o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ob_(void* target, struct S_ob_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_obi4_(void* target, struct S_obi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_obi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4_(void* target, struct S_oi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4i4_(void* target, struct S_oi4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oi4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4o_(void* target, struct S_oi4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oi4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4r4_(void* target, struct S_oi4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oi4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4s_(void* target, struct S_oi4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oi4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4s_o(void* target, struct S_oi4s_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_oi4s_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oi4u4_(void* target, struct S_oi4u4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oi4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oo_(void* target, struct S_oo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oobsoobr4_(void* target, struct S_oobsoobr4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oobsoobr4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ooi4_(void* target, struct S_ooi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ooi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ooi4b_(void* target, struct S_ooi4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ooi4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oooObS_r4r4r4r4_bb_(void* target, struct S_oooObS_r4r4r4r4_bb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oooObS_r4r4r4r4_bb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oooObS_r4r4r4r4_bb_o(void* target, struct S_oooObS_r4r4r4r4_bb_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_oooObS_r4r4r4r4_bb_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_(void* target, struct S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ooo_(void* target, struct S_ooo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ooo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oooi4_(void* target, struct S_oooi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oooi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oooi4s_(void* target, struct S_oooi4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oooi4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ooooi4b_(void* target, struct S_ooooi4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ooooi4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oor4r4_(void* target, struct S_oor4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oor4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_(void* target, struct S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_or4_(void* target, struct S_or4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_or4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_or4r4S_r4r4r4_S_r4r4r4__(void* target, struct S_or4r4S_r4r4r4_S_r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_or4r4S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_os_(void* target, struct S_os_ p0, MethodInfo* method) {
    // PLog("Running b_vS_os_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_osi4_(void* target, struct S_osi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_osi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_oso_(void* target, struct S_oso_ p0, MethodInfo* method) {
    // PLog("Running b_vS_oso_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ossS_u4u4u4u4__(void* target, struct S_ossS_u4u4u4u4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_ossS_u4u4u4u4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ossi4i4i4i4o_(void* target, struct S_ossi4i4i4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ossi4i4i4i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ou4_(void* target, struct S_ou4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ou4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ou4os_(void* target, struct S_ou4os_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ou4os_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ou4u4u4u4u4u4u8u8_(void* target, struct S_ou4u4u4u4u4u4u8u8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ou4u4u4u4u4u4u8u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_pS_pi4i4__o(void* target, struct S_pS_pi4i4__ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_pS_pi4i4__o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_pi4_(void* target, struct S_pi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_pi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_pi4i4_(void* target, struct S_pi4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_pi4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_pu4_(void* target, struct S_pu4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_pu4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_pu4u4u4u4_(void* target, struct S_pu4u4u4u4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_pu4u4u4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4S_oS_r4r4r4_r4__(void* target, struct S_r4S_oS_r4r4r4_r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4S_oS_r4r4r4_r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4S_r4__(void* target, struct S_r4S_r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4S_r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4S_r4r4r4r4__(void* target, struct S_r4S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4i4_(void* target, struct S_r4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4o_(void* target, struct S_r4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4_(void* target, struct S_r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4_(void* target, struct S_r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4_O(void* target, struct S_r4r4r4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4_O");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4_S_r4r4r4r4_(void* target, struct S_r4r4r4_ p0, struct S_r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4_S_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4_(void* target, struct S_r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4_O(void* target, struct S_r4r4r4r4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4_O");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4_i4(void* target, struct S_r4r4r4r4_ p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4_i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4_i4bb(void* target, struct S_r4r4r4r4_ p0, int32_t p1, bool p2, bool p3, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4_i4bb");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4_o(void* target, struct S_r4r4r4r4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4_oo(void* target, struct S_r4r4r4r4_ p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4_oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4i4i4i4i4_(void* target, struct S_r4r4r4r4i4i4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4i4i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(void* target, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r4s_(void* target, struct S_r4s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r4s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r8obi2_(void* target, struct S_r8obi2_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r8obi2_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_r8r8_(void* target, struct S_r8r8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_r8r8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sO_(void* target, struct S_sO_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sO_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___(void* target, struct S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_i4oo__(void* target, struct S_sS_i4oo__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_i4oo__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_o_S_o__(void* target, struct S_sS_o_S_o__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_o_S_o__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_oi4i4__(void* target, struct S_sS_oi4i4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_oi4i4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_r4r4r4_S_r4r4r4r4__(void* target, struct S_sS_r4r4r4_S_r4r4r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_r4r4r4_S_r4r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__(void* target, struct S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_ssob_so_(void* target, struct S_sS_ssob_so_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_ssob_so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sS_u8__(void* target, struct S_sS_u8__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sS_u8__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_s_(void* target, struct S_s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sb_(void* target, struct S_sb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sbi4i4ooboo_(void* target, struct S_sbi4i4ooboo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sbi4i4ooboo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4O_(void* target, struct S_si4O_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_(void* target, struct S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4_(void* target, struct S_si4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4i4_(void* target, struct S_si4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4i4b_(void* target, struct S_si4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4i4i4o_(void* target, struct S_si4i4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4i4i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4i4o_(void* target, struct S_si4i4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_si4oobbi4i4i4boo_(void* target, struct S_si4oobbi4i4i4boo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_si4oobbi4i4i4boo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_so_(void* target, struct S_so_ p0, MethodInfo* method) {
    // PLog("Running b_vS_so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sob_(void* target, struct S_sob_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_soi4u4_(void* target, struct S_soi4u4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_soi4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_soo_(void* target, struct S_soo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_soo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sosi4_(void* target, struct S_sosi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sosi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_soss_(void* target, struct S_soss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_soss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__(void* target, struct S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sr4_(void* target, struct S_sr4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sr4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssS_i4_i4o_(void* target, struct S_ssS_i4_i4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssS_i4_i4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ss_(void* target, struct S_ss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssb_(void* target, struct S_ssb_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssb_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssi4_(void* target, struct S_ssi4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssi4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_(void* target, struct S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sso_(void* target, struct S_sso_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sso_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssob_(void* target, struct S_ssob_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssoo_(void* target, struct S_ssoo_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssoo_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sss_(void* target, struct S_sss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sssi4i4i4_(void* target, struct S_sssi4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sssi4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sssi4i4osS_r4r4r4r4_oi4O_(void* target, struct S_sssi4i4osS_r4r4r4r4_oi4O_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sssi4i4osS_r4r4r4r4_oi4O_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssss_(void* target, struct S_ssss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sssss_(void* target, struct S_sssss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sssss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_sssssss_(void* target, struct S_sssssss_ p0, MethodInfo* method) {
    // PLog("Running b_vS_sssssss_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssu1_(void* target, struct S_ssu1_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssu1_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_(void* target, struct S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_su4_(void* target, struct S_su4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_su4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_su4so_(void* target, struct S_su4so_ p0, MethodInfo* method) {
    // PLog("Running b_vS_su4so_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u2S_i4u1u1u1u1_su2_(void* target, struct S_u2S_i4u1u1u1u1_su2_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u2S_i4u1u1u1u1_su2_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u2u2i4_(void* target, struct S_u2u2i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u2u2i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4S_r4r4_u4S_r4r4__(void* target, struct S_u4S_r4r4_u4S_r4r4__ p0, MethodInfo* method) {
    // PLog("Running b_vS_u4S_r4r4_u4S_r4r4__");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4_i4o(void* target, struct S_u4_ p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vS_u4_i4o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4i4i4_(void* target, struct S_u4i4i4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u4i4i4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4o_(void* target, struct S_u4o_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u4o_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_(void* target, struct S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4u4u4u4_(void* target, struct S_u4u4u4u4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u4u4u4u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u4u4u4u4_o(void* target, struct S_u4u4u4u4_ p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vS_u4u4u4u4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u8_(void* target, struct S_u8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u8b_(void* target, struct S_u8b_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u8b_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u8i4i4S_u4u4_S_i4i4i4i4_s_(void* target, struct S_u8i4i4S_u4u4_S_i4i4i4i4_s_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u8i4i4S_u4u4_S_i4i4i4i4_s_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u8i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__(void* target, struct S_u8i4i4p_ p0, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_* p1, struct S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__* p2, MethodInfo* method) {
    // PLog("Running b_vS_u8i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u8u4_(void* target, struct S_u8u4_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u8u4_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vS_u8u8_(void* target, struct S_u8u8_ p0, MethodInfo* method) {
    // PLog("Running b_vS_u8u8_");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        DataTransfer::CopyValueType(apis, env, p0, TIp0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vVo(void* target, Il2CppArray* p0, MethodInfo* method) {
    // PLog("Running b_vVo");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    auto arrayLength = il2cpp::vm::Array::GetLength(p0);
    pesapi_value *argv = (pesapi_value *)alloca(sizeof(pesapi_value) * (0 + arrayLength));
    memset(argv, 0, sizeof(pesapi_value) * (0 + arrayLength));
    
    Params<Il2CppObject*>::UnPackRefOrBoxedValueType(apis, env, p0, arrayLength, TIp0, argv + 0);
    auto jsret = apis->call_function(env, func, nullptr, 1 + arrayLength - 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vb(void* target, bool p0, MethodInfo* method) {
    // PLog("Running b_vb");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<bool>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vbO(void* target, bool p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vbO");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<bool>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vbbi4(void* target, bool p0, bool p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vbbi4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<bool>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vbi4(void* target, bool p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vbi4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<bool>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vbo(void* target, bool p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vbo");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<bool>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vboob(void* target, bool p0, Il2CppObject* p1, Il2CppObject* p2, bool p3, MethodInfo* method) {
    // PLog("Running b_vboob");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<bool>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vbs(void* target, bool p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_vbs");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<bool>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vc(void* target, Il2CppChar p0, MethodInfo* method) {
    // PLog("Running b_vc");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppChar>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi2(void* target, int16_t p0, MethodInfo* method) {
    // PLog("Running b_vi2");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int16_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4(void* target, int32_t p0, MethodInfo* method) {
    // PLog("Running b_vi4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4O(void* target, int32_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vi4O");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4PS_S_Pvi4i4i4S_pi4i4_i4_i8i4b_(void* target, int32_t p0, struct S_S_Pvi4i4i4S_pi4i4_i4_i8i4b_* p1, MethodInfo* method) {
    // PLog("Running b_vi4PS_S_Pvi4i4i4S_pi4i4_i4_i8i4b_");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4S_i4i4_(void* target, int32_t p0, struct S_i4i4_ p1, MethodInfo* method) {
    // PLog("Running b_vi4S_i4i4_");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4S_r4r4r4_S_r4r4r4r4_r4i4(void* target, int32_t p0, struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, float p3, int32_t p4, MethodInfo* method) {
    // PLog("Running b_vi4S_r4r4r4_S_r4r4r4r4_r4i4");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        converter::Converter<float>::toScript(apis, env, p3),
        converter::Converter<int32_t>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4S_r4r4r4r4_(void* target, int32_t p0, struct S_r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_vi4S_r4r4r4r4_");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4b(void* target, int32_t p0, bool p1, MethodInfo* method) {
    // PLog("Running b_vi4b");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4i4(void* target, int32_t p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vi4i4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4i4i4p(void* target, int32_t p0, int32_t p1, int32_t p2, void* p3, MethodInfo* method) {
    // PLog("Running b_vi4i4i4p");

    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        apis->create_binary(env, p3, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4i4soo(void* target, int32_t p0, int32_t p1, Il2CppString* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_vi4i4soo");

    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4i8i8b(void* target, int32_t p0, int64_t p1, int64_t p2, bool p3, MethodInfo* method) {
    // PLog("Running b_vi4i8i8b");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<int64_t>::toScript(apis, env, p1),
        converter::Converter<int64_t>::toScript(apis, env, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4o(void* target, int32_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vi4o");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4oi4(void* target, int32_t p0, Il2CppObject* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vi4oi4");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4popO(void* target, int32_t p0, void* p1, Il2CppObject* p2, void* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_vi4popO");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        apis->create_binary(env, p1, 0),
        CSRefToJsValue(apis, env, TIp2, p2),
        apis->create_binary(env, p3, 0),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4r4(void* target, int32_t p0, float p1, MethodInfo* method) {
    // PLog("Running b_vi4r4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4s(void* target, int32_t p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_vi4s");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi4si4S_u8_s(void* target, int32_t p0, Il2CppString* p1, int32_t p2, struct S_u8_ p3, Il2CppString* p4, MethodInfo* method) {
    // PLog("Running b_vi4si4S_u8_s");

    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        converter::Converter<int32_t>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3),
        converter::Converter<Il2CppString*>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi8(void* target, int64_t p0, MethodInfo* method) {
    // PLog("Running b_vi8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<int64_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi8b(void* target, int64_t p0, bool p1, MethodInfo* method) {
    // PLog("Running b_vi8b");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int64_t>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi8i8(void* target, int64_t p0, int64_t p1, MethodInfo* method) {
    // PLog("Running b_vi8i8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int64_t>::toScript(apis, env, p0),
        converter::Converter<int64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vi8o(void* target, int64_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vi8o");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<int64_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vo(void* target, Il2CppObject* p0, MethodInfo* method) {
    // PLog("Running b_vo");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        CSRefToJsValue(apis, env, TIp0, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voO(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_voO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voOPi4(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t* p2, MethodInfo* method) {
    // PLog("Running b_voOPi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<std::reference_wrapper<int32_t>>::toScript(apis, env, *p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voOoo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_voOoo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voPS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4i4r4i4PS_r4r4_(void* target, Il2CppObject* p0, struct S_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__* p1, float p2, int32_t p3, float p4, int32_t p5, struct S_r4r4_* p6, MethodInfo* method) {
    // PLog("Running b_voPS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4i4r4i4PS_r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp6 = GetParameterType(method, 6);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[7]{
        CSRefToJsValue(apis, env, TIp0, p0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        converter::Converter<float>::toScript(apis, env, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3),
        converter::Converter<float>::toScript(apis, env, p4),
        converter::Converter<int32_t>::toScript(apis, env, p5),
        apis->boxing(env, apis->native_object_to_value(env, TIp6, p6, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 7, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_PS_S_i4u2u2r8i4___(void* target, Il2CppObject* p0, struct S_PS_S_i4u2u2r8i4___ p1, MethodInfo* method) {
    // PLog("Running b_voS_PS_S_i4u2u2r8i4___");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_Pvi4i4i4S_pi4i4_i4_(void* target, Il2CppObject* p0, struct S_Pvi4i4i4S_pi4i4_i4_ p1, MethodInfo* method) {
    // PLog("Running b_voS_Pvi4i4i4S_pi4i4_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_bi4i4_(void* target, Il2CppObject* p0, struct S_bi4i4_ p1, MethodInfo* method) {
    // PLog("Running b_voS_bi4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_i4_(void* target, Il2CppObject* p0, struct S_i4_ p1, MethodInfo* method) {
    // PLog("Running b_voS_i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_i4_ob(void* target, Il2CppObject* p0, struct S_i4_ p1, Il2CppObject* p2, bool p3, MethodInfo* method) {
    // PLog("Running b_voS_i4_ob");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        CSRefToJsValue(apis, env, TIp2, p2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_i4i4i4i4_b(void* target, Il2CppObject* p0, struct S_i4i4i4i4_ p1, bool p2, MethodInfo* method) {
    // PLog("Running b_voS_i4i4i4i4_b");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_i4i4sS_u4u4__u4r8(void* target, Il2CppObject* p0, struct S_i4i4sS_u4u4__ p1, uint32_t p2, double p3, MethodInfo* method) {
    // PLog("Running b_voS_i4i4sS_u4u4__u4r8");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<uint32_t>::toScript(apis, env, p2),
        converter::Converter<double>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_oS_i4_osS_i4u1u1u1u1__(void* target, Il2CppObject* p0, struct S_oS_i4_osS_i4u1u1u1u1__ p1, MethodInfo* method) {
    // PLog("Running b_voS_oS_i4_osS_i4u1u1u1u1__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_o_(void* target, Il2CppObject* p0, struct S_o_ p1, MethodInfo* method) {
    // PLog("Running b_voS_o_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_oo_(void* target, Il2CppObject* p0, struct S_oo_ p1, MethodInfo* method) {
    // PLog("Running b_voS_oo_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_or4r4S_r4r4r4_S_r4r4r4__(void* target, Il2CppObject* p0, struct S_or4r4S_r4r4r4_S_r4r4r4__ p1, MethodInfo* method) {
    // PLog("Running b_voS_or4r4S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__(void* target, Il2CppObject* p0, struct S_or4r4S_r4r4r4_S_r4r4r4__ p1, struct S_or4r4S_r4r4r4_S_r4r4r4__ p2, MethodInfo* method) {
    // PLog("Running b_voS_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_r4r4_(void* target, Il2CppObject* p0, struct S_r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_voS_r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_r4r4r4_(void* target, Il2CppObject* p0, struct S_r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_voS_r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_r4r4r4r4_(void* target, Il2CppObject* p0, struct S_r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_voS_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voS_sosi4i4i4i4i4i4i4_i4(void* target, Il2CppObject* p0, struct S_sosi4i4i4i4i4i4i4_ p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_voS_sosi4i4i4i4i4i4i4_i4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vob(void* target, Il2CppObject* p0, bool p1, MethodInfo* method) {
    // PLog("Running b_vob");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vobb(void* target, Il2CppObject* p0, bool p1, bool p2, MethodInfo* method) {
    // PLog("Running b_vobb");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<bool>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4(void* target, Il2CppObject* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_voi4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4Do(void* target, Il2CppObject* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_voi4Do");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4O(void* target, Il2CppObject* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_voi4O");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4S_r4r4_(void* target, Il2CppObject* p0, int32_t p1, struct S_r4r4_ p2, MethodInfo* method) {
    // PLog("Running b_voi4S_r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4i4(void* target, Il2CppObject* p0, int32_t p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_voi4i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4o(void* target, Il2CppObject* p0, int32_t p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_voi4o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi4so(void* target, Il2CppObject* p0, int32_t p1, Il2CppString* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_voi4so");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi8(void* target, Il2CppObject* p0, int64_t p1, MethodInfo* method) {
    // PLog("Running b_voi8");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voi8i8i8i8i8i8i8(void* target, Il2CppObject* p0, int64_t p1, int64_t p2, int64_t p3, int64_t p4, int64_t p5, int64_t p6, int64_t p7, MethodInfo* method) {
    // PLog("Running b_voi8i8i8i8i8i8i8");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[8]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<int64_t>::toScript(apis, env, p1),
        converter::Converter<int64_t>::toScript(apis, env, p2),
        converter::Converter<int64_t>::toScript(apis, env, p3),
        converter::Converter<int64_t>::toScript(apis, env, p4),
        converter::Converter<int64_t>::toScript(apis, env, p5),
        converter::Converter<int64_t>::toScript(apis, env, p6),
        converter::Converter<int64_t>::toScript(apis, env, p7)
    };
    auto jsret = apis->call_function(env, func, nullptr, 8, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voo(void* target, Il2CppObject* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_voo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vooS_S_i4i4S_r4r4__oS_u8__(void* target, Il2CppObject* p0, Il2CppObject* p1, struct S_S_i4i4S_r4r4__oS_u8__ p2, MethodInfo* method) {
    // PLog("Running b_vooS_S_i4i4S_r4r4__oS_u8__");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voob(void* target, Il2CppObject* p0, Il2CppObject* p1, bool p2, MethodInfo* method) {
    // PLog("Running b_voob");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vooi4(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vooi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vooi4S_r4r4_o(void* target, Il2CppObject* p0, Il2CppObject* p1, int32_t p2, struct S_r4r4_ p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_vooi4S_r4r4_o");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2),
        DataTransfer::CopyValueType(apis, env, p3, TIp3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vooi8(void* target, Il2CppObject* p0, Il2CppObject* p1, int64_t p2, MethodInfo* method) {
    // PLog("Running b_vooi8");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int64_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, MethodInfo* method) {
    // PLog("Running b_voooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vooooo(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, MethodInfo* method) {
    // PLog("Running b_vooooo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2),
        CSRefToJsValue(apis, env, TIp3, p3),
        CSRefToJsValue(apis, env, TIp4, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voos(void* target, Il2CppObject* p0, Il2CppObject* p1, Il2CppString* p2, MethodInfo* method) {
    // PLog("Running b_voos");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vor4(void* target, Il2CppObject* p0, float p1, MethodInfo* method) {
    // PLog("Running b_vor4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vor8(void* target, Il2CppObject* p0, double p1, MethodInfo* method) {
    // PLog("Running b_vor8");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<double>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vor8S_PS_S_i4u2u2r8i4___i8(void* target, Il2CppObject* p0, double p1, struct S_PS_S_i4u2u2r8i4___ p2, int64_t p3, MethodInfo* method) {
    // PLog("Running b_vor8S_PS_S_i4u2u2r8i4___i8");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<double>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        converter::Converter<int64_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vor8i8i4(void* target, Il2CppObject* p0, double p1, int64_t p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_vor8i8i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<double>::toScript(apis, env, p1),
        converter::Converter<int64_t>::toScript(apis, env, p2),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vos(void* target, Il2CppObject* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_vos");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vosS_i4i4i4i4_b(void* target, Il2CppObject* p0, Il2CppString* p1, struct S_i4i4i4i4_ p2, bool p3, MethodInfo* method) {
    // PLog("Running b_vosS_i4i4i4i4_b");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2),
        converter::Converter<bool>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vosb(void* target, Il2CppObject* p0, Il2CppString* p1, bool p2, MethodInfo* method) {
    // PLog("Running b_vosb");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vosbsr4oo(void* target, Il2CppObject* p0, Il2CppString* p1, bool p2, Il2CppString* p3, float p4, Il2CppObject* p5, Il2CppObject* p6, MethodInfo* method) {
    // PLog("Running b_vosbsr4oo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp5 = GetParameterType(method, 5);
    auto TIp6 = GetParameterType(method, 6);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[7]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<bool>::toScript(apis, env, p2),
        converter::Converter<Il2CppString*>::toScript(apis, env, p3),
        converter::Converter<float>::toScript(apis, env, p4),
        CSRefToJsValue(apis, env, TIp5, p5),
        CSRefToJsValue(apis, env, TIp6, p6)
    };
    auto jsret = apis->call_function(env, func, nullptr, 7, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voso(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_voso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_voss(void* target, Il2CppObject* p0, Il2CppString* p1, Il2CppString* p2, MethodInfo* method) {
    // PLog("Running b_voss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vosu4r8(void* target, Il2CppObject* p0, Il2CppString* p1, uint32_t p2, double p3, MethodInfo* method) {
    // PLog("Running b_vosu4r8");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2),
        converter::Converter<double>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vou4(void* target, Il2CppObject* p0, uint32_t p1, MethodInfo* method) {
    // PLog("Running b_vou4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        CSRefToJsValue(apis, env, TIp0, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vp(void* target, void* p0, MethodInfo* method) {
    // PLog("Running b_vp");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        apis->create_binary(env, p0, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vpi8(void* target, void* p0, int64_t p1, MethodInfo* method) {
    // PLog("Running b_vpi8");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<int64_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vpp(void* target, void* p0, void* p1, MethodInfo* method) {
    // PLog("Running b_vpp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vppp(void* target, void* p0, void* p1, void* p2, MethodInfo* method) {
    // PLog("Running b_vppp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vpppPPu1Pu4Pu8(void* target, void* p0, void* p1, void* p2, uint8_t** p3, uint32_t* p4, uint64_t* p5, MethodInfo* method) {
    // PLog("Running b_vpppPPu1Pu4Pu8");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        // unknow ret signature: PPu1,
        converter::Converter<std::reference_wrapper<uint32_t>>::toScript(apis, env, *p4),
        converter::Converter<std::reference_wrapper<uint64_t>>::toScript(apis, env, *p5)
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vpppi4(void* target, void* p0, void* p1, void* p2, int32_t p3, MethodInfo* method) {
    // PLog("Running b_vpppi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        converter::Converter<int32_t>::toScript(apis, env, p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vpppi4i8(void* target, void* p0, void* p1, void* p2, int32_t p3, int64_t p4, MethodInfo* method) {
    // PLog("Running b_vpppi4i8");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[5]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        apis->create_binary(env, p2, 0),
        converter::Converter<int32_t>::toScript(apis, env, p3),
        converter::Converter<int64_t>::toScript(apis, env, p4)
    };
    auto jsret = apis->call_function(env, func, nullptr, 5, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vppsp(void* target, void* p0, void* p1, Il2CppString* p2, void* p3, MethodInfo* method) {
    // PLog("Running b_vppsp");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2),
        apis->create_binary(env, p3, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vppu4p(void* target, void* p0, void* p1, uint32_t p2, void* p3, MethodInfo* method) {
    // PLog("Running b_vppu4p");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp3 = GetParameterType(method, 3);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        apis->create_binary(env, p0, 0),
        apis->create_binary(env, p1, 0),
        converter::Converter<uint32_t>::toScript(apis, env, p2),
        apis->create_binary(env, p3, 0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vps(void* target, void* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_vps");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        apis->create_binary(env, p0, 0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vpu4u4(void* target, void* p0, uint32_t p1, uint32_t p2, MethodInfo* method) {
    // PLog("Running b_vpu4u4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        apis->create_binary(env, p0, 0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        converter::Converter<uint32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vr4(void* target, float p0, MethodInfo* method) {
    // PLog("Running b_vr4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<float>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vr4PS_r4r4r4r4_Pr4Pr4(void* target, float p0, struct S_r4r4r4r4_* p1, float* p2, float* p3, MethodInfo* method) {
    // PLog("Running b_vr4PS_r4r4r4r4_Pr4Pr4");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[4]{
        converter::Converter<float>::toScript(apis, env, p0),
        apis->boxing(env, apis->native_object_to_value(env, TIp1, p1, false)),
        converter::Converter<std::reference_wrapper<float>>::toScript(apis, env, *p2),
        converter::Converter<std::reference_wrapper<float>>::toScript(apis, env, *p3)
    };
    auto jsret = apis->call_function(env, func, nullptr, 4, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vr8(void* target, double p0, MethodInfo* method) {
    // PLog("Running b_vr8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<double>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vs(void* target, Il2CppString* p0, MethodInfo* method) {
    // PLog("Running b_vs");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsN_bi4_(void* target, Il2CppString* p0, struct N_bi4_ p1, MethodInfo* method) {
    // PLog("Running b_vsN_bi4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        DataTransfer::CopyNullableValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsO(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vsO");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsOb(void* target, Il2CppString* p0, Il2CppObject* p1, bool p2, MethodInfo* method) {
    // PLog("Running b_vsOb");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<bool>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsOi4(void* target, Il2CppString* p0, Il2CppObject* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vsOi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsS_r4r4r4r4_(void* target, Il2CppString* p0, struct S_r4r4r4r4_ p1, MethodInfo* method) {
    // PLog("Running b_vsS_r4r4r4r4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        DataTransfer::CopyValueType(apis, env, p1, TIp1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsb(void* target, Il2CppString* p0, bool p1, MethodInfo* method) {
    // PLog("Running b_vsb");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsbS_S_Pvi4i4i4S_pi4i4_i4_i4i4i4_(void* target, Il2CppString* p0, bool p1, struct S_S_Pvi4i4i4S_pi4i4_i4_i4i4i4_ p2, MethodInfo* method) {
    // PLog("Running b_vsbS_S_Pvi4i4i4S_pi4i4_i4_i4i4i4_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1),
        DataTransfer::CopyValueType(apis, env, p2, TIp2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsbs(void* target, Il2CppString* p0, bool p1, Il2CppString* p2, MethodInfo* method) {
    // PLog("Running b_vsbs");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<bool>::toScript(apis, env, p1),
        converter::Converter<Il2CppString*>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsi4(void* target, Il2CppString* p0, int32_t p1, MethodInfo* method) {
    // PLog("Running b_vsi4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsi4POPoPS_u8_PS_i8_(void* target, Il2CppString* p0, int32_t p1, Il2CppObject** p2, Il2CppObject** p3, struct S_u8_* p4, struct S_i8_* p5, MethodInfo* method) {
    // PLog("Running b_vsi4POPoPS_u8_PS_i8_");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp2 = GetParameterType(method, 2);
    auto TIp3 = GetParameterType(method, 3);
    auto TIp4 = GetParameterType(method, 4);
    auto TIp5 = GetParameterType(method, 5);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[6]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp3, p3, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp4, p4, false)),
        apis->boxing(env, apis->native_object_to_value(env, TIp5, p5, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 6, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsi4i4(void* target, Il2CppString* p0, int32_t p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vsi4i4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<int32_t>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vso(void* target, Il2CppString* p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsoo(void* target, Il2CppString* p0, Il2CppObject* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vsoo");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsr4(void* target, Il2CppString* p0, float p1, MethodInfo* method) {
    // PLog("Running b_vsr4");

    auto TIp0 = GetParameterType(method, 0);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<float>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vss(void* target, Il2CppString* p0, Il2CppString* p1, MethodInfo* method) {
    // PLog("Running b_vss");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vssi4(void* target, Il2CppString* p0, Il2CppString* p1, int32_t p2, MethodInfo* method) {
    // PLog("Running b_vssi4");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        converter::Converter<int32_t>::toScript(apis, env, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vsso(void* target, Il2CppString* p0, Il2CppString* p1, Il2CppObject* p2, MethodInfo* method) {
    // PLog("Running b_vsso");

    auto TIp0 = GetParameterType(method, 0);
    auto TIp1 = GetParameterType(method, 1);
    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<Il2CppString*>::toScript(apis, env, p0),
        converter::Converter<Il2CppString*>::toScript(apis, env, p1),
        CSRefToJsValue(apis, env, TIp2, p2)
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu1(void* target, uint8_t p0, MethodInfo* method) {
    // PLog("Running b_vu1");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint8_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu2(void* target, uint16_t p0, MethodInfo* method) {
    // PLog("Running b_vu2");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint16_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu4(void* target, uint32_t p0, MethodInfo* method) {
    // PLog("Running b_vu4");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint32_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu4o(void* target, uint32_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vu4o");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<uint32_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu4u4PS_ppi4i4p_(void* target, uint32_t p0, uint32_t p1, struct S_ppi4i4p_* p2, MethodInfo* method) {
    // PLog("Running b_vu4u4PS_ppi4i4p_");

    auto TIp2 = GetParameterType(method, 2);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[3]{
        converter::Converter<uint32_t>::toScript(apis, env, p0),
        converter::Converter<uint32_t>::toScript(apis, env, p1),
        apis->boxing(env, apis->native_object_to_value(env, TIp2, p2, false))
    };
    auto jsret = apis->call_function(env, func, nullptr, 3, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu8(void* target, uint64_t p0, MethodInfo* method) {
    // PLog("Running b_vu8");


    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[1]{
        converter::Converter<uint64_t>::toScript(apis, env, p0)
    };
    auto jsret = apis->call_function(env, func, nullptr, 1, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static void b_vu8o(void* target, uint64_t p0, Il2CppObject* p1, MethodInfo* method) {
    // PLog("Running b_vu8o");

    auto TIp1 = GetParameterType(method, 1);

    PObjectRefInfo* delegateInfo = GetPObjectRefInfo(target);
    struct pesapi_ffi* apis = delegateInfo->Apis;
    
    pesapi_env_ref envRef = apis->get_ref_associated_env(delegateInfo->ValueRef);
    AutoValueScope valueScope(apis, envRef);
    auto env = apis->get_env_from_ref(envRef);
    if (!env)
    {
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException("JsEnv had been destroy"));
    }
    auto func = apis->get_value_from_ref(env, delegateInfo->ValueRef);
    
    pesapi_value argv[2]{
        converter::Converter<uint64_t>::toScript(apis, env, p0),
        CSRefToJsValue(apis, env, TIp1, p1)
    };
    auto jsret = apis->call_function(env, func, nullptr, 2, argv);
    
    if (apis->has_caught(valueScope.scope()))
    {
        auto msg = apis->get_exception_as_string(valueScope.scope(), true);
        il2cpp::vm::Exception::Raise(il2cpp::vm::Exception::GetInvalidOperationException(msg));
    }
}

static BridgeFuncInfo g_bridgeFuncInfos[] = {
    
    {"N_bS_i4i4i4i4u8__o", (Il2CppMethodPointer)b_N_bS_i4i4i4i4u8__o},
    {"N_bi4_", (Il2CppMethodPointer)b_N_bi4_},
    {"N_bi4_O", (Il2CppMethodPointer)b_N_bi4_O},
    {"N_bi4_o", (Il2CppMethodPointer)b_N_bi4_o},
    {"N_bi8_o", (Il2CppMethodPointer)b_N_bi8_o},
    {"N_bi8_oPS_S_i4_i4_", (Il2CppMethodPointer)b_N_bi8_oPS_S_i4_i4_},
    {"N_br4_o", (Il2CppMethodPointer)b_N_br4_o},
    {"N_br8_o", (Il2CppMethodPointer)b_N_br8_o},
    {"O", (Il2CppMethodPointer)b_O},
    {"OO", (Il2CppMethodPointer)b_OO},
    {"OOO", (Il2CppMethodPointer)b_OOO},
    {"OOVO", (Il2CppMethodPointer)b_OOVO},
    {"OS_oo_", (Il2CppMethodPointer)b_OS_oo_},
    {"OS_oooObS_r4r4r4r4_bb_", (Il2CppMethodPointer)b_OS_oooObS_r4r4r4r4_bb_},
    {"OVO", (Il2CppMethodPointer)b_OVO},
    {"Oi4popb", (Il2CppMethodPointer)b_Oi4popb},
    {"Oo", (Il2CppMethodPointer)b_Oo},
    {"OoO", (Il2CppMethodPointer)b_OoO},
    {"OoOO", (Il2CppMethodPointer)b_OoOO},
    {"Ooo", (Il2CppMethodPointer)b_Ooo},
    {"Oooo", (Il2CppMethodPointer)b_Oooo},
    {"Ooooo", (Il2CppMethodPointer)b_Ooooo},
    {"Oooooo", (Il2CppMethodPointer)b_Oooooo},
    {"Oppi4", (Il2CppMethodPointer)b_Oppi4},
    {"Oso", (Il2CppMethodPointer)b_Oso},
    {"PS__PS_u4u4u8_", (Il2CppMethodPointer)b_PS__PS_u4u4u8_},
    {"PS__Pu1pPu1pPS_u4u4u8_", (Il2CppMethodPointer)b_PS__Pu1pPu1pPS_u4u4u8_},
    {"PS__S_u4u4_S_ooPv_Pu1pPS_u4u4u8_", (Il2CppMethodPointer)b_PS__S_u4u4_S_ooPv_Pu1pPS_u4u4u8_},
    {"PS__S_u4u4_S_ooPv_u8u8PS_u4u4u8_", (Il2CppMethodPointer)b_PS__S_u4u4_S_ooPv_u8u8PS_u4u4u8_},
    {"PS_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__", (Il2CppMethodPointer)b_PS_r4r4S_r4r4_bS_br4r4_i4S_r4br4r4__},
    {"Pcu4", (Il2CppMethodPointer)b_Pcu4},
    {"S_S_i4_bo_", (Il2CppMethodPointer)b_S_S_i4_bo_},
    {"S_S_i4_bo_O", (Il2CppMethodPointer)b_S_S_i4_bo_O},
    {"S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__", (Il2CppMethodPointer)b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__},
    {"S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__", (Il2CppMethodPointer)b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__},
    {"S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__o", (Il2CppMethodPointer)b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__S_S_i4i4S_r4r4__oS_u8__o},
    {"S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__o", (Il2CppMethodPointer)b_S_S_i4i4S_r4r4__oS_u8__S_i4i4S_r4r4__o},
    {"S_S_i4i4S_r4r4__oS_u8__ooi4S_r4r4_", (Il2CppMethodPointer)b_S_S_i4i4S_r4r4__oS_u8__ooi4S_r4r4_},
    {"S_S_pu4__S_pu4_s", (Il2CppMethodPointer)b_S_S_pu4__S_pu4_s},
    {"S_S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_S_S_r4r4r4_S_r4r4r4__},
    {"S_S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_S_S_r4r4r4r4_S_r4r4r4r4__},
    {"S__", (Il2CppMethodPointer)b_S__},
    {"S__O", (Il2CppMethodPointer)b_S__O},
    {"S__S_S_oooo_ooi4_S__", (Il2CppMethodPointer)b_S__S_S_oooo_ooi4_S__},
    {"S__S_S_oooo_ooi4_oS__", (Il2CppMethodPointer)b_S__S_S_oooo_ooi4_oS__},
    {"S__S_o_", (Il2CppMethodPointer)b_S__S_o_},
    {"S__o", (Il2CppMethodPointer)b_S__o},
    {"S__oS_o_", (Il2CppMethodPointer)b_S__oS_o_},
    {"S__oo", (Il2CppMethodPointer)b_S__oo},
    {"S__ooS_o_", (Il2CppMethodPointer)b_S__ooS_o_},
    {"S__ooo", (Il2CppMethodPointer)b_S__ooo},
    {"S__oooS_o_", (Il2CppMethodPointer)b_S__oooS_o_},
    {"S__oooo", (Il2CppMethodPointer)b_S__oooo},
    {"S__ooooS_o_", (Il2CppMethodPointer)b_S__ooooS_o_},
    {"S_bo_", (Il2CppMethodPointer)b_S_bo_},
    {"S_bo_O", (Il2CppMethodPointer)b_S_bo_O},
    {"S_bo_S_sObi4ooO_", (Il2CppMethodPointer)b_S_bo_S_sObi4ooO_},
    {"S_bo_s", (Il2CppMethodPointer)b_S_bo_s},
    {"S_i4_oi4S_i4_", (Il2CppMethodPointer)b_S_i4_oi4S_i4_},
    {"S_i4i4_S_i4i4_", (Il2CppMethodPointer)b_S_i4i4_S_i4i4_},
    {"S_i4i4i4i4u8_o", (Il2CppMethodPointer)b_S_i4i4i4i4u8_o},
    {"S_i4i4oS_oi4__", (Il2CppMethodPointer)b_S_i4i4oS_oi4__},
    {"S_i4i4oS_oi4__O", (Il2CppMethodPointer)b_S_i4i4oS_oi4__O},
    {"S_i4o_", (Il2CppMethodPointer)b_S_i4o_},
    {"S_i4o_O", (Il2CppMethodPointer)b_S_i4o_O},
    {"S_i4oo_PS_i4i4o_", (Il2CppMethodPointer)b_S_i4oo_PS_i4i4o_},
    {"S_i4r4o_ooS_i4r4o_o", (Il2CppMethodPointer)b_S_i4r4o_ooS_i4r4o_o},
    {"S_i8_i4", (Il2CppMethodPointer)b_S_i8_i4},
    {"S_i8_o", (Il2CppMethodPointer)b_S_i8_o},
    {"S_i8i8b_", (Il2CppMethodPointer)b_S_i8i8b_},
    {"S_oN_bS_i4i4i4i4u8__i2_o", (Il2CppMethodPointer)b_S_oN_bS_i4i4i4i4u8__i2_o},
    {"S_oN_bS_i4i4i4i4u8__i2_oS_o_", (Il2CppMethodPointer)b_S_oN_bS_i4i4i4i4u8__i2_oS_o_},
    {"S_oN_bi4_i2_o", (Il2CppMethodPointer)b_S_oN_bi4_i2_o},
    {"S_oN_bi4_i2_oS_o_", (Il2CppMethodPointer)b_S_oN_bi4_i2_oS_o_},
    {"S_oN_bi8_i2_o", (Il2CppMethodPointer)b_S_oN_bi8_i2_o},
    {"S_oN_bi8_i2_oS_o_", (Il2CppMethodPointer)b_S_oN_bi8_i2_oS_o_},
    {"S_oN_br4_i2_o", (Il2CppMethodPointer)b_S_oN_br4_i2_o},
    {"S_oN_br4_i2_oS_o_", (Il2CppMethodPointer)b_S_oN_br4_i2_oS_o_},
    {"S_oN_br8_i2_o", (Il2CppMethodPointer)b_S_oN_br8_i2_o},
    {"S_oN_br8_i2_oS_o_", (Il2CppMethodPointer)b_S_oN_br8_i2_oS_o_},
    {"S_oS_i4i4i4i4u8_i2_o", (Il2CppMethodPointer)b_S_oS_i4i4i4i4u8_i2_o},
    {"S_oS_i4i4i4i4u8_i2_oS_o_", (Il2CppMethodPointer)b_S_oS_i4i4i4i4u8_i2_oS_o_},
    {"S_o_S_o_S_o_r4", (Il2CppMethodPointer)b_S_o_S_o_S_o_r4},
    {"S_o_o", (Il2CppMethodPointer)b_S_o_o},
    {"S_obboo_", (Il2CppMethodPointer)b_S_obboo_},
    {"S_obboo_O", (Il2CppMethodPointer)b_S_obboo_O},
    {"S_obi2_o", (Il2CppMethodPointer)b_S_obi2_o},
    {"S_obi2_oS_o_", (Il2CppMethodPointer)b_S_obi2_oS_o_},
    {"S_obi2_oi4", (Il2CppMethodPointer)b_S_obi2_oi4},
    {"S_obi2_oi4S_o_", (Il2CppMethodPointer)b_S_obi2_oi4S_o_},
    {"S_oi2_", (Il2CppMethodPointer)b_S_oi2_},
    {"S_oi2_O", (Il2CppMethodPointer)b_S_oi2_O},
    {"S_oi2_S_o_", (Il2CppMethodPointer)b_S_oi2_S_o_},
    {"S_oi2_S_so_", (Il2CppMethodPointer)b_S_oi2_S_so_},
    {"S_oi2_o", (Il2CppMethodPointer)b_S_oi2_o},
    {"S_oi2_oS_o_", (Il2CppMethodPointer)b_S_oi2_oS_o_},
    {"S_oi2_oi4", (Il2CppMethodPointer)b_S_oi2_oi4},
    {"S_oi2_oi4S_o_", (Il2CppMethodPointer)b_S_oi2_oi4S_o_},
    {"S_oi4i2_o", (Il2CppMethodPointer)b_S_oi4i2_o},
    {"S_oi4i2_oS_o_", (Il2CppMethodPointer)b_S_oi4i2_oS_o_},
    {"S_oi4s_S_oi4s_", (Il2CppMethodPointer)b_S_oi4s_S_oi4s_},
    {"S_oi8i2_o", (Il2CppMethodPointer)b_S_oi8i2_o},
    {"S_oi8i2_oS_o_", (Il2CppMethodPointer)b_S_oi8i2_oS_o_},
    {"S_oo_", (Il2CppMethodPointer)b_S_oo_},
    {"S_oo_O", (Il2CppMethodPointer)b_S_oo_O},
    {"S_ooi2_", (Il2CppMethodPointer)b_S_ooi2_},
    {"S_ooi2_O", (Il2CppMethodPointer)b_S_ooi2_O},
    {"S_ooi2_o", (Il2CppMethodPointer)b_S_ooi2_o},
    {"S_ooi2_oS_o_", (Il2CppMethodPointer)b_S_ooi2_oS_o_},
    {"S_ooi2_oi4", (Il2CppMethodPointer)b_S_ooi2_oi4},
    {"S_ooi2_oi4S_o_", (Il2CppMethodPointer)b_S_ooi2_oi4S_o_},
    {"S_ooi2_oo", (Il2CppMethodPointer)b_S_ooi2_oo},
    {"S_ooi2_ooS_o_", (Il2CppMethodPointer)b_S_ooi2_ooS_o_},
    {"S_ooi4_", (Il2CppMethodPointer)b_S_ooi4_},
    {"S_ooi4_O", (Il2CppMethodPointer)b_S_ooi4_O},
    {"S_ooi4i4o_S_ooi4i4o_", (Il2CppMethodPointer)b_S_ooi4i4o_S_ooi4i4o_},
    {"S_oooS_r4r4__S_oooS_r4r4__", (Il2CppMethodPointer)b_S_oooS_r4r4__S_oooS_r4r4__},
    {"S_or4i2_o", (Il2CppMethodPointer)b_S_or4i2_o},
    {"S_or4i2_oS_o_", (Il2CppMethodPointer)b_S_or4i2_oS_o_},
    {"S_or8i2_o", (Il2CppMethodPointer)b_S_or8i2_o},
    {"S_or8i2_oS_o_", (Il2CppMethodPointer)b_S_or8i2_oS_o_},
    {"S_ossi4i4i4i4o_S_ossi4i4i4i4o_", (Il2CppMethodPointer)b_S_ossi4i4i4i4o_S_ossi4i4i4i4o_},
    {"S_r4r4_", (Il2CppMethodPointer)b_S_r4r4_},
    {"S_r4r4_S_r4r4_", (Il2CppMethodPointer)b_S_r4r4_S_r4r4_},
    {"S_r4r4_S_r4r4_S_r4r4_r4", (Il2CppMethodPointer)b_S_r4r4_S_r4r4_S_r4r4_r4},
    {"S_r4r4_o", (Il2CppMethodPointer)b_S_r4r4_o},
    {"S_r4r4r4_", (Il2CppMethodPointer)b_S_r4r4r4_},
    {"S_r4r4r4_S_r4r4r4_S_r4r4r4_r4", (Il2CppMethodPointer)b_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4},
    {"S_r4r4r4_o", (Il2CppMethodPointer)b_S_r4r4r4_o},
    {"S_r4r4r4r4_", (Il2CppMethodPointer)b_S_r4r4r4r4_},
    {"S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4", (Il2CppMethodPointer)b_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4},
    {"S_r4r4r4r4_i4", (Il2CppMethodPointer)b_S_r4r4r4r4_i4},
    {"S_r4r4r4r4_o", (Il2CppMethodPointer)b_S_r4r4r4r4_o},
    {"S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"S_sN_bS_i4i4___", (Il2CppMethodPointer)b_S_sN_bS_i4i4___},
    {"S_si4ooo_S_ooS_si4ooo__", (Il2CppMethodPointer)b_S_si4ooo_S_ooS_si4ooo__},
    {"S_si4ssi4_i4", (Il2CppMethodPointer)b_S_si4ssi4_i4},
    {"S_si4ssi4_i4S_si4ssi4_", (Il2CppMethodPointer)b_S_si4ssi4_i4S_si4ssi4_},
    {"S_si4ssi4_i4S_si4ssi4_o", (Il2CppMethodPointer)b_S_si4ssi4_i4S_si4ssi4_o},
    {"S_si4ssi4_i4o", (Il2CppMethodPointer)b_S_si4ssi4_i4o},
    {"S_u4_", (Il2CppMethodPointer)b_S_u4_},
    {"S_u4i4_", (Il2CppMethodPointer)b_S_u4i4_},
    {"S_u4i4_O", (Il2CppMethodPointer)b_S_u4i4_O},
    {"S_u4u4u8_", (Il2CppMethodPointer)b_S_u4u4u8_},
    {"S_u8_PS__PS_u4u4u8_", (Il2CppMethodPointer)b_S_u8_PS__PS_u4u4u8_},
    {"S_u8_S_u8_pPS_u4u4u8_", (Il2CppMethodPointer)b_S_u8_S_u8_pPS_u4u4u8_},
    {"S_u8_i4", (Il2CppMethodPointer)b_S_u8_i4},
    {"S_u8_o", (Il2CppMethodPointer)b_S_u8_o},
    {"S_u8i4i4p_oS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__p", (Il2CppMethodPointer)b_S_u8i4i4p_oS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_S_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__p},
    {"S_u8u8_s", (Il2CppMethodPointer)b_S_u8u8_s},
    {"S_u8u8_sS_u8u8_", (Il2CppMethodPointer)b_S_u8u8_sS_u8u8_},
    {"S_u8u8_sS_u8u8_o", (Il2CppMethodPointer)b_S_u8u8_sS_u8u8_o},
    {"S_u8u8_so", (Il2CppMethodPointer)b_S_u8u8_so},
    {"b", (Il2CppMethodPointer)b_b},
    {"bO", (Il2CppMethodPointer)b_bO},
    {"bOooi4", (Il2CppMethodPointer)b_bOooi4},
    {"bPS_i4i4_u4", (Il2CppMethodPointer)b_bPS_i4i4_u4},
    {"bPoPoPb", (Il2CppMethodPointer)b_bPoPoPb},
    {"bS_OS_oi4__", (Il2CppMethodPointer)b_bS_OS_oi4__},
    {"bS_Oi4_", (Il2CppMethodPointer)b_bS_Oi4_},
    {"bS_Oi8_", (Il2CppMethodPointer)b_bS_Oi8_},
    {"bS_Oi8i8S_r4r4r4r4__", (Il2CppMethodPointer)b_bS_Oi8i8S_r4r4r4r4__},
    {"bS_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_bS_PS_S_i4u2u2r8i4___},
    {"bS_PS_S_i4u2u2r8i4___o", (Il2CppMethodPointer)b_bS_PS_S_i4u2u2r8i4___o},
    {"bS_Pu1i4i4i4i4S_pi4i4__", (Il2CppMethodPointer)b_bS_Pu1i4i4i4i4S_pi4i4__},
    {"bS_Pvi4i4i4S_pi4i4_i4_", (Il2CppMethodPointer)b_bS_Pvi4i4i4S_pi4i4_i4_},
    {"bS_S_Oi4i4__", (Il2CppMethodPointer)b_bS_S_Oi4i4__},
    {"bS_S_Pvi4i4i4S_pi4i4_i4_i4_", (Il2CppMethodPointer)b_bS_S_Pvi4i4i4S_pi4i4_i4_i4_},
    {"bS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_", (Il2CppMethodPointer)b_bS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_},
    {"bS_S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4i4i4i4i4i4_S_S_i4i4_i4u4u4i4i4S_i2i2__S_i4_bN_bS_Pvi4i4i4S_pi4i4_i4__N_bS_Pvi4i4i4S_pi4i4_i4___S_pu4u4u4u4__", (Il2CppMethodPointer)b_bS_S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4i4i4i4i4i4_S_S_i4i4_i4u4u4i4i4S_i2i2__S_i4_bN_bS_Pvi4i4i4S_pi4i4_i4__N_bS_Pvi4i4i4S_pi4i4_i4___S_pu4u4u4u4__},
    {"bS_S_S_p__i4_", (Il2CppMethodPointer)b_bS_S_S_p__i4_},
    {"bS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_bS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_},
    {"bS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_", (Il2CppMethodPointer)b_bS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_},
    {"bS_S_S_u4i4i4_b_i4_", (Il2CppMethodPointer)b_bS_S_S_u4i4i4_b_i4_},
    {"bS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__", (Il2CppMethodPointer)b_bS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__},
    {"bS_S_S_u4u4u4u4_i8i4s_o_", (Il2CppMethodPointer)b_bS_S_S_u4u4u4u4_i8i4s_o_},
    {"bS_S_S_u8u8_S_u4u4u4u4_i4_oo_oo", (Il2CppMethodPointer)b_bS_S_S_u8u8_S_u4u4u4u4_i4_oo_oo},
    {"bS_S_i4i2_S_o__", (Il2CppMethodPointer)b_bS_S_i4i2_S_o__},
    {"bS_S_i4i2_S_r4r4r4r4r4i4__", (Il2CppMethodPointer)b_bS_S_i4i2_S_r4r4r4r4r4i4__},
    {"bS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_bS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___},
    {"bS_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_", (Il2CppMethodPointer)b_bS_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_},
    {"bS_S_ooi4_i4i4_", (Il2CppMethodPointer)b_bS_S_ooi4_i4i4_},
    {"bS_S_pu4__", (Il2CppMethodPointer)b_bS_S_pu4__},
    {"bS_S_pu4u4u4u4_b_", (Il2CppMethodPointer)b_bS_S_pu4u4u4u4_b_},
    {"bS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_", (Il2CppMethodPointer)b_bS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_},
    {"bS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_", (Il2CppMethodPointer)b_bS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_},
    {"bS_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_bS_S_r4r4_S_r4r4__},
    {"bS_S_r4r4_r4_", (Il2CppMethodPointer)b_bS_S_r4r4_r4_},
    {"bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___},
    {"bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_},
    {"bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_},
    {"bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_},
    {"bS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__},
    {"bS_S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4__},
    {"bS_S_r4r4r4_S_r4r4r4_r4i4b_", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4_r4i4b_},
    {"bS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_bS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__},
    {"bS_S_r4r4r4_r4_", (Il2CppMethodPointer)b_bS_S_r4r4r4_r4_},
    {"bS_S_r4r4r4r4_S_r4r4r4r4_o_", (Il2CppMethodPointer)b_bS_S_r4r4r4r4_S_r4r4r4r4_o_},
    {"bS_S_r4r4r4r4_i4_", (Il2CppMethodPointer)b_bS_S_r4r4r4r4_i4_},
    {"bS_S_r4r4r4r4_r4_", (Il2CppMethodPointer)b_bS_S_r4r4r4r4_r4_},
    {"bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_", (Il2CppMethodPointer)b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_},
    {"bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_", (Il2CppMethodPointer)b_bS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_},
    {"bS_S_s_s_", (Il2CppMethodPointer)b_bS_S_s_s_},
    {"bS_S_ss_S_o__", (Il2CppMethodPointer)b_bS_S_ss_S_o__},
    {"bS_S_ss_S_ss_S_ss_sssS_oi4i4_S_oi4i4_S_oi4i4_S_oi4i4_u4u4u4S_i4_i4i4S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8__", (Il2CppMethodPointer)b_bS_S_ss_S_ss_S_ss_sssS_oi4i4_S_oi4i4_S_oi4i4_S_oi4i4_u4u4u4S_i4_i4i4S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8_S_i4bcu1i1i2u2i4u4i8u8r4r8__},
    {"bS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_", (Il2CppMethodPointer)b_bS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_},
    {"bS_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_bS_S_u4u4Ob_ob_},
    {"bS_S_u4u4_i8u8b_", (Il2CppMethodPointer)b_bS_S_u4u4_i8u8b_},
    {"bS_S_u4u4_o_", (Il2CppMethodPointer)b_bS_S_u4u4_o_},
    {"bS_S_u4u4u4u4_i8i4s_", (Il2CppMethodPointer)b_bS_S_u4u4u4u4_i8i4s_},
    {"bS_S_u4u4u4u4_o_", (Il2CppMethodPointer)b_bS_S_u4u4u4u4_o_},
    {"bS_S_u8S_u8u8__bS_O__", (Il2CppMethodPointer)b_bS_S_u8S_u8u8__bS_O__},
    {"bS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__", (Il2CppMethodPointer)b_bS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__},
    {"bS_S_u8u8_i4i4_", (Il2CppMethodPointer)b_bS_S_u8u8_i4i4_},
    {"bS__", (Il2CppMethodPointer)b_bS__},
    {"bS_bi4i4i4i4i4s_S_bi4i4i4i4i4s_S_bi4i4i4i4i4s_", (Il2CppMethodPointer)b_bS_bi4i4i4i4i4s_S_bi4i4i4i4i4s_S_bi4i4i4i4i4s_},
    {"bS_bi4i4i4ss_S_bi4i4i4ss_S_bi4i4i4ss_", (Il2CppMethodPointer)b_bS_bi4i4i4ss_S_bi4i4i4ss_S_bi4i4i4ss_},
    {"bS_bsi4bb_", (Il2CppMethodPointer)b_bS_bsi4bb_},
    {"bS_bssos_", (Il2CppMethodPointer)b_bS_bssos_},
    {"bS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_bS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__},
    {"bS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_", (Il2CppMethodPointer)b_bS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_},
    {"bS_i4_", (Il2CppMethodPointer)b_bS_i4_},
    {"bS_i4bi4_", (Il2CppMethodPointer)b_bS_i4bi4_},
    {"bS_i4i2i2u1u1u1u1u1u1u1u1_", (Il2CppMethodPointer)b_bS_i4i2i2u1u1u1u1u1u1u1u1_},
    {"bS_i4i4O_", (Il2CppMethodPointer)b_bS_i4i4O_},
    {"bS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_bS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__},
    {"bS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_", (Il2CppMethodPointer)b_bS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_},
    {"bS_i4i4_", (Il2CppMethodPointer)b_bS_i4i4_},
    {"bS_i4i4i4_", (Il2CppMethodPointer)b_bS_i4i4i4_},
    {"bS_i4i4i4i4_", (Il2CppMethodPointer)b_bS_i4i4i4i4_},
    {"bS_i4i4i4i4i4i4i4i4_", (Il2CppMethodPointer)b_bS_i4i4i4i4i4i4i4i4_},
    {"bS_i4i4o_", (Il2CppMethodPointer)b_bS_i4i4o_},
    {"bS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__", (Il2CppMethodPointer)b_bS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__},
    {"bS_i4i4r4r4_", (Il2CppMethodPointer)b_bS_i4i4r4r4_},
    {"bS_i4i4s_", (Il2CppMethodPointer)b_bS_i4i4s_},
    {"bS_i4i4sb_", (Il2CppMethodPointer)b_bS_i4i4sb_},
    {"bS_i4i4ssi4b_", (Il2CppMethodPointer)b_bS_i4i4ssi4b_},
    {"bS_i4i4u8_", (Il2CppMethodPointer)b_bS_i4i4u8_},
    {"bS_i4oOi4_", (Il2CppMethodPointer)b_bS_i4oOi4_},
    {"bS_i4o_", (Il2CppMethodPointer)b_bS_i4o_},
    {"bS_i4oo_", (Il2CppMethodPointer)b_bS_i4oo_},
    {"bS_i4oor4_", (Il2CppMethodPointer)b_bS_i4oor4_},
    {"bS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_bS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__},
    {"bS_i4r4_", (Il2CppMethodPointer)b_bS_i4r4_},
    {"bS_i4r4i4i4i4i4S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_bS_i4r4i4i4i4i4S_r4r4_S_r4r4__},
    {"bS_i4r8i4s_", (Il2CppMethodPointer)b_bS_i4r8i4s_},
    {"bS_i4sS_i4_i4s_", (Il2CppMethodPointer)b_bS_i4sS_i4_i4s_},
    {"bS_i4s_", (Il2CppMethodPointer)b_bS_i4s_},
    {"bS_i4si4O_", (Il2CppMethodPointer)b_bS_i4si4O_},
    {"bS_i4si4_", (Il2CppMethodPointer)b_bS_i4si4_},
    {"bS_i4sr4S_r4i4_b_", (Il2CppMethodPointer)b_bS_i4sr4S_r4i4_b_},
    {"bS_i4ss_", (Il2CppMethodPointer)b_bS_i4ss_},
    {"bS_i4ssb_", (Il2CppMethodPointer)b_bS_i4ssb_},
    {"bS_i4u1u1u1u1_", (Il2CppMethodPointer)b_bS_i4u1u1u1u1_},
    {"bS_i4u2u2so_", (Il2CppMethodPointer)b_bS_i4u2u2so_},
    {"bS_i4u4u1_", (Il2CppMethodPointer)b_bS_i4u4u1_},
    {"bS_i4u8ss_", (Il2CppMethodPointer)b_bS_i4u8ss_},
    {"bS_i8i4i4i4i4_", (Il2CppMethodPointer)b_bS_i8i4i4i4i4_},
    {"bS_i8i4u1i4r8S_i4i4i4i4i4pi4__", (Il2CppMethodPointer)b_bS_i8i4u1i4r8S_i4i4i4i4i4pi4__},
    {"bS_i8i8S_Oi8i8S_r4r4r4r4___", (Il2CppMethodPointer)b_bS_i8i8S_Oi8i8S_r4r4r4r4___},
    {"bS_i8i8_", (Il2CppMethodPointer)b_bS_i8i8_},
    {"bS_i8i8i8_", (Il2CppMethodPointer)b_bS_i8i8i8_},
    {"bS_i8i8o_", (Il2CppMethodPointer)b_bS_i8i8o_},
    {"bS_i8oo_", (Il2CppMethodPointer)b_bS_i8oo_},
    {"bS_i8s_", (Il2CppMethodPointer)b_bS_i8s_},
    {"bS_oO_", (Il2CppMethodPointer)b_bS_oO_},
    {"bS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_bS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"bS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_bS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_},
    {"bS_oS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_bS_oS_S_r4r4r4_S_r4r4r4___},
    {"bS_oS_i4i4__", (Il2CppMethodPointer)b_bS_oS_i4i4__},
    {"bS_oS_i4r4o_r4_", (Il2CppMethodPointer)b_bS_oS_i4r4o_r4_},
    {"bS_oS_oi4u4__", (Il2CppMethodPointer)b_bS_oS_oi4u4__},
    {"bS_oS_osi4o_S_si4i4_S_si4i4__oo", (Il2CppMethodPointer)b_bS_oS_osi4o_S_si4i4_S_si4i4__oo},
    {"bS_oS_osi4o_S_si4i4_S_si4i4__ooi4", (Il2CppMethodPointer)b_bS_oS_osi4o_S_si4i4_S_si4i4__ooi4},
    {"bS_oS_r4r4r4_S_r4r4_r4_", (Il2CppMethodPointer)b_bS_oS_r4r4r4_S_r4r4_r4_},
    {"bS_oS_r4r4r4__", (Il2CppMethodPointer)b_bS_oS_r4r4r4__},
    {"bS_oS_r4r4r4r4_bbo_", (Il2CppMethodPointer)b_bS_oS_r4r4r4r4_bbo_},
    {"bS_oS_u4u4_o_", (Il2CppMethodPointer)b_bS_oS_u4u4_o_},
    {"bS_ob_", (Il2CppMethodPointer)b_bS_ob_},
    {"bS_obi4_", (Il2CppMethodPointer)b_bS_obi4_},
    {"bS_oi4_", (Il2CppMethodPointer)b_bS_oi4_},
    {"bS_oi4i4_", (Il2CppMethodPointer)b_bS_oi4i4_},
    {"bS_oi4o_", (Il2CppMethodPointer)b_bS_oi4o_},
    {"bS_oi4r4_", (Il2CppMethodPointer)b_bS_oi4r4_},
    {"bS_oi4s_", (Il2CppMethodPointer)b_bS_oi4s_},
    {"bS_oo_", (Il2CppMethodPointer)b_bS_oo_},
    {"bS_oobsoobr4_", (Il2CppMethodPointer)b_bS_oobsoobr4_},
    {"bS_ooi4_", (Il2CppMethodPointer)b_bS_ooi4_},
    {"bS_ooi4b_", (Il2CppMethodPointer)b_bS_ooi4b_},
    {"bS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_", (Il2CppMethodPointer)b_bS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_},
    {"bS_ooo_", (Il2CppMethodPointer)b_bS_ooo_},
    {"bS_oooi4_", (Il2CppMethodPointer)b_bS_oooi4_},
    {"bS_oooi4s_", (Il2CppMethodPointer)b_bS_oooi4s_},
    {"bS_ooooi4b_", (Il2CppMethodPointer)b_bS_ooooi4b_},
    {"bS_oor4r4_", (Il2CppMethodPointer)b_bS_oor4r4_},
    {"bS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_", (Il2CppMethodPointer)b_bS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_},
    {"bS_or4_", (Il2CppMethodPointer)b_bS_or4_},
    {"bS_or4r4S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_bS_or4r4S_r4r4r4_S_r4r4r4__},
    {"bS_os_", (Il2CppMethodPointer)b_bS_os_},
    {"bS_osi4_", (Il2CppMethodPointer)b_bS_osi4_},
    {"bS_oso_", (Il2CppMethodPointer)b_bS_oso_},
    {"bS_ossS_u4u4u4u4__", (Il2CppMethodPointer)b_bS_ossS_u4u4u4u4__},
    {"bS_ou4_", (Il2CppMethodPointer)b_bS_ou4_},
    {"bS_ou4os_", (Il2CppMethodPointer)b_bS_ou4os_},
    {"bS_ou4u4u4u4u4u4u8u8_", (Il2CppMethodPointer)b_bS_ou4u4u4u4u4u4u8u8_},
    {"bS_pi4_", (Il2CppMethodPointer)b_bS_pi4_},
    {"bS_pi4i4_", (Il2CppMethodPointer)b_bS_pi4i4_},
    {"bS_pu4u4u4u4_", (Il2CppMethodPointer)b_bS_pu4u4u4u4_},
    {"bS_r4S_oS_r4r4r4_r4__", (Il2CppMethodPointer)b_bS_r4S_oS_r4r4r4_r4__},
    {"bS_r4S_r4__", (Il2CppMethodPointer)b_bS_r4S_r4__},
    {"bS_r4S_r4r4r4r4__", (Il2CppMethodPointer)b_bS_r4S_r4r4r4r4__},
    {"bS_r4i4_", (Il2CppMethodPointer)b_bS_r4i4_},
    {"bS_r4o_", (Il2CppMethodPointer)b_bS_r4o_},
    {"bS_r4r4_", (Il2CppMethodPointer)b_bS_r4r4_},
    {"bS_r4r4_PS_r4r4r4_PS_r4r4r4_", (Il2CppMethodPointer)b_bS_r4r4_PS_r4r4r4_PS_r4r4r4_},
    {"bS_r4r4r4_", (Il2CppMethodPointer)b_bS_r4r4r4_},
    {"bS_r4r4r4r4_", (Il2CppMethodPointer)b_bS_r4r4r4r4_},
    {"bS_r4r4r4r4_bo", (Il2CppMethodPointer)b_bS_r4r4r4r4_bo},
    {"bS_r4r4r4r4i4i4i4i4_", (Il2CppMethodPointer)b_bS_r4r4r4r4i4i4i4i4_},
    {"bS_r4r4r4r4r4r4_", (Il2CppMethodPointer)b_bS_r4r4r4r4r4r4_},
    {"bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"bS_r4s_", (Il2CppMethodPointer)b_bS_r4s_},
    {"bS_r8obi2_", (Il2CppMethodPointer)b_bS_r8obi2_},
    {"bS_r8r8_", (Il2CppMethodPointer)b_bS_r8r8_},
    {"bS_sOO_", (Il2CppMethodPointer)b_bS_sOO_},
    {"bS_sO_", (Il2CppMethodPointer)b_bS_sO_},
    {"bS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_bS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___},
    {"bS_sS_i4bcu1i1i2u2i4u4i8u8r4r8__", (Il2CppMethodPointer)b_bS_sS_i4bcu1i1i2u2i4u4i8u8r4r8__},
    {"bS_sS_i4oo__", (Il2CppMethodPointer)b_bS_sS_i4oo__},
    {"bS_sS_oi4i4__", (Il2CppMethodPointer)b_bS_sS_oi4i4__},
    {"bS_sS_r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_bS_sS_r4r4r4_S_r4r4r4r4__},
    {"bS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_bS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__},
    {"bS_sS_ssob_so_", (Il2CppMethodPointer)b_bS_sS_ssob_so_},
    {"bS_sS_u8__", (Il2CppMethodPointer)b_bS_sS_u8__},
    {"bS_s_", (Il2CppMethodPointer)b_bS_s_},
    {"bS_sb_", (Il2CppMethodPointer)b_bS_sb_},
    {"bS_sbi4i4ooboo_", (Il2CppMethodPointer)b_bS_sbi4i4ooboo_},
    {"bS_si4O_", (Il2CppMethodPointer)b_bS_si4O_},
    {"bS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_", (Il2CppMethodPointer)b_bS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_},
    {"bS_si4_", (Il2CppMethodPointer)b_bS_si4_},
    {"bS_si4i4_", (Il2CppMethodPointer)b_bS_si4i4_},
    {"bS_si4i4_S_osi4o_o", (Il2CppMethodPointer)b_bS_si4i4_S_osi4o_o},
    {"bS_si4i4_oS_osi4o_o", (Il2CppMethodPointer)b_bS_si4i4_oS_osi4o_o},
    {"bS_si4i4_oso", (Il2CppMethodPointer)b_bS_si4i4_oso},
    {"bS_si4i4_sS_osi4o_o", (Il2CppMethodPointer)b_bS_si4i4_sS_osi4o_o},
    {"bS_si4i4_so", (Il2CppMethodPointer)b_bS_si4i4_so},
    {"bS_si4i4_soS_osi4o_o", (Il2CppMethodPointer)b_bS_si4i4_soS_osi4o_o},
    {"bS_si4i4_soso", (Il2CppMethodPointer)b_bS_si4i4_soso},
    {"bS_si4i4_sso", (Il2CppMethodPointer)b_bS_si4i4_sso},
    {"bS_si4i4_sss", (Il2CppMethodPointer)b_bS_si4i4_sss},
    {"bS_si4i4_ssss", (Il2CppMethodPointer)b_bS_si4i4_ssss},
    {"bS_si4i4b_", (Il2CppMethodPointer)b_bS_si4i4b_},
    {"bS_si4i4i4o_", (Il2CppMethodPointer)b_bS_si4i4i4o_},
    {"bS_si4i4o_", (Il2CppMethodPointer)b_bS_si4i4o_},
    {"bS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_bS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_},
    {"bS_si4ooS_pi4i4_ooi4i4i4bbbbbbbbb_", (Il2CppMethodPointer)b_bS_si4ooS_pi4i4_ooi4i4i4bbbbbbbbb_},
    {"bS_si4oobbi4i4i4boo_", (Il2CppMethodPointer)b_bS_si4oobbi4i4i4boo_},
    {"bS_so_", (Il2CppMethodPointer)b_bS_so_},
    {"bS_sob_", (Il2CppMethodPointer)b_bS_sob_},
    {"bS_soi4u4_", (Il2CppMethodPointer)b_bS_soi4u4_},
    {"bS_soo_", (Il2CppMethodPointer)b_bS_soo_},
    {"bS_sosi4_", (Il2CppMethodPointer)b_bS_sosi4_},
    {"bS_soss_", (Il2CppMethodPointer)b_bS_soss_},
    {"bS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__", (Il2CppMethodPointer)b_bS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__},
    {"bS_sr4_", (Il2CppMethodPointer)b_bS_sr4_},
    {"bS_ssS_i4_i4o_", (Il2CppMethodPointer)b_bS_ssS_i4_i4o_},
    {"bS_ss_", (Il2CppMethodPointer)b_bS_ss_},
    {"bS_ssb_", (Il2CppMethodPointer)b_bS_ssb_},
    {"bS_ssi4_", (Il2CppMethodPointer)b_bS_ssi4_},
    {"bS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_bS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_},
    {"bS_sso_", (Il2CppMethodPointer)b_bS_sso_},
    {"bS_ssob_", (Il2CppMethodPointer)b_bS_ssob_},
    {"bS_ssoo_", (Il2CppMethodPointer)b_bS_ssoo_},
    {"bS_sss_", (Il2CppMethodPointer)b_bS_sss_},
    {"bS_sssi4i4i4_", (Il2CppMethodPointer)b_bS_sssi4i4i4_},
    {"bS_sssi4i4osS_r4r4r4r4_oi4O_", (Il2CppMethodPointer)b_bS_sssi4i4osS_r4r4r4r4_oi4O_},
    {"bS_ssss_", (Il2CppMethodPointer)b_bS_ssss_},
    {"bS_sssss_", (Il2CppMethodPointer)b_bS_sssss_},
    {"bS_sssssss_", (Il2CppMethodPointer)b_bS_sssssss_},
    {"bS_sssssssi4sss_", (Il2CppMethodPointer)b_bS_sssssssi4sss_},
    {"bS_ssu1_", (Il2CppMethodPointer)b_bS_ssu1_},
    {"bS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_", (Il2CppMethodPointer)b_bS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_},
    {"bS_su4_", (Il2CppMethodPointer)b_bS_su4_},
    {"bS_su4so_", (Il2CppMethodPointer)b_bS_su4so_},
    {"bS_u2S_i4u1u1u1u1_su2_", (Il2CppMethodPointer)b_bS_u2S_i4u1u1u1u1_su2_},
    {"bS_u2u2i4_", (Il2CppMethodPointer)b_bS_u2u2i4_},
    {"bS_u4S_r4r4_u4S_r4r4__", (Il2CppMethodPointer)b_bS_u4S_r4r4_u4S_r4r4__},
    {"bS_u4_", (Il2CppMethodPointer)b_bS_u4_},
    {"bS_u4i4i4_", (Il2CppMethodPointer)b_bS_u4i4i4_},
    {"bS_u4o_", (Il2CppMethodPointer)b_bS_u4o_},
    {"bS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_bS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_},
    {"bS_u4u4u4u4_", (Il2CppMethodPointer)b_bS_u4u4u4u4_},
    {"bS_u8_", (Il2CppMethodPointer)b_bS_u8_},
    {"bS_u8_S_u8_", (Il2CppMethodPointer)b_bS_u8_S_u8_},
    {"bS_u8b_", (Il2CppMethodPointer)b_bS_u8b_},
    {"bS_u8i4i4S_u4u4_S_i4i4i4i4_s_", (Il2CppMethodPointer)b_bS_u8i4i4S_u4u4_S_i4i4i4i4_s_},
    {"bS_u8u4_", (Il2CppMethodPointer)b_bS_u8u4_},
    {"bS_u8u8_", (Il2CppMethodPointer)b_bS_u8u8_},
    {"bb", (Il2CppMethodPointer)b_bb},
    {"bc", (Il2CppMethodPointer)b_bc},
    {"bi2", (Il2CppMethodPointer)b_bi2},
    {"bi4", (Il2CppMethodPointer)b_bi4},
    {"bi4O", (Il2CppMethodPointer)b_bi4O},
    {"bi4i4i4po", (Il2CppMethodPointer)b_bi4i4i4po},
    {"bi4o", (Il2CppMethodPointer)b_bi4o},
    {"bi8", (Il2CppMethodPointer)b_bi8},
    {"bo", (Il2CppMethodPointer)b_bo},
    {"boO", (Il2CppMethodPointer)b_boO},
    {"boPi4", (Il2CppMethodPointer)b_boPi4},
    {"boPsPs", (Il2CppMethodPointer)b_boPsPs},
    {"boS_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_boS_PS_S_i4u2u2r8i4___},
    {"boS_osi4o_o", (Il2CppMethodPointer)b_boS_osi4o_o},
    {"boi4", (Il2CppMethodPointer)b_boi4},
    {"boi4O", (Il2CppMethodPointer)b_boi4O},
    {"boo", (Il2CppMethodPointer)b_boo},
    {"booS_osi4o_o", (Il2CppMethodPointer)b_booS_osi4o_o},
    {"boob", (Il2CppMethodPointer)b_boob},
    {"booi4", (Il2CppMethodPointer)b_booi4},
    {"boooi4", (Il2CppMethodPointer)b_boooi4},
    {"booso", (Il2CppMethodPointer)b_booso},
    {"bor8S_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_bor8S_PS_S_i4u2u2r8i4___},
    {"bos", (Il2CppMethodPointer)b_bos},
    {"bosS_osi4o_o", (Il2CppMethodPointer)b_bosS_osi4o_o},
    {"boso", (Il2CppMethodPointer)b_boso},
    {"bosoS_osi4o_o", (Il2CppMethodPointer)b_bosoS_osi4o_o},
    {"bososo", (Il2CppMethodPointer)b_bososo},
    {"bosso", (Il2CppMethodPointer)b_bosso},
    {"bosss", (Il2CppMethodPointer)b_bosss},
    {"bossss", (Il2CppMethodPointer)b_bossss},
    {"bou4u4", (Il2CppMethodPointer)b_bou4u4},
    {"bp", (Il2CppMethodPointer)b_bp},
    {"bpp", (Il2CppMethodPointer)b_bpp},
    {"bppPp", (Il2CppMethodPointer)b_bppPp},
    {"bppp", (Il2CppMethodPointer)b_bppp},
    {"br4", (Il2CppMethodPointer)b_br4},
    {"br8", (Il2CppMethodPointer)b_br8},
    {"bs", (Il2CppMethodPointer)b_bs},
    {"bsO", (Il2CppMethodPointer)b_bsO},
    {"bsbi4s", (Il2CppMethodPointer)b_bsbi4s},
    {"bsi4i4PS_si4i4_ooo", (Il2CppMethodPointer)b_bsi4i4PS_si4i4_ooo},
    {"bso", (Il2CppMethodPointer)b_bso},
    {"bsooi4", (Il2CppMethodPointer)b_bsooi4},
    {"bsou2oi2", (Il2CppMethodPointer)b_bsou2oi2},
    {"bss", (Il2CppMethodPointer)b_bss},
    {"bu1", (Il2CppMethodPointer)b_bu1},
    {"bu2", (Il2CppMethodPointer)b_bu2},
    {"bu4", (Il2CppMethodPointer)b_bu4},
    {"bu8", (Il2CppMethodPointer)b_bu8},
    {"csi4c", (Il2CppMethodPointer)b_csi4c},
    {"i2os", (Il2CppMethodPointer)b_i2os},
    {"i4", (Il2CppMethodPointer)b_i4},
    {"i4O", (Il2CppMethodPointer)b_i4O},
    {"i4OO", (Il2CppMethodPointer)b_i4OO},
    {"i4S_OS_oi4__S_OS_oi4__", (Il2CppMethodPointer)b_i4S_OS_oi4__S_OS_oi4__},
    {"i4S_Oi4_S_Oi4_", (Il2CppMethodPointer)b_i4S_Oi4_S_Oi4_},
    {"i4S_Oi8_S_Oi8_", (Il2CppMethodPointer)b_i4S_Oi8_S_Oi8_},
    {"i4S_Oi8i8S_r4r4r4r4__S_Oi8i8S_r4r4r4r4__", (Il2CppMethodPointer)b_i4S_Oi8i8S_r4r4r4r4__S_Oi8i8S_r4r4r4r4__},
    {"i4S_PS_S_i4u2u2r8i4___S_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_i4S_PS_S_i4u2u2r8i4___S_PS_S_i4u2u2r8i4___},
    {"i4S_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__", (Il2CppMethodPointer)b_i4S_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__},
    {"i4S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_", (Il2CppMethodPointer)b_i4S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_},
    {"i4S_S_Oi4i4__S_S_Oi4i4__", (Il2CppMethodPointer)b_i4S_S_Oi4i4__S_S_Oi4i4__},
    {"i4S_S_Oi4i4i4i4o_S_r4r4__", (Il2CppMethodPointer)b_i4S_S_Oi4i4i4i4o_S_r4r4__},
    {"i4S_S_Pvi4i4i4S_pi4i4_i4_i4_S_S_Pvi4i4i4S_pi4i4_i4_i4_", (Il2CppMethodPointer)b_i4S_S_Pvi4i4i4S_pi4i4_i4_i4_S_S_Pvi4i4i4S_pi4i4_i4_i4_},
    {"i4S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_", (Il2CppMethodPointer)b_i4S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_S_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_},
    {"i4S_S_S_p__i4_S_S_S_p__i4_", (Il2CppMethodPointer)b_i4S_S_S_p__i4_S_S_S_p__i4_},
    {"i4S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_i4S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_},
    {"i4S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_", (Il2CppMethodPointer)b_i4S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_S_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_},
    {"i4S_S_S_u4i4i4_b_i4_S_S_S_u4i4i4_b_i4_", (Il2CppMethodPointer)b_i4S_S_S_u4i4i4_b_i4_S_S_S_u4i4i4_b_i4_},
    {"i4S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__", (Il2CppMethodPointer)b_i4S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__S_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__},
    {"i4S_S_S_u4u4u4u4_i8i4s_o_S_S_S_u4u4u4u4_i8i4s_o_", (Il2CppMethodPointer)b_i4S_S_S_u4u4u4u4_i8i4s_o_S_S_S_u4u4u4u4_i8i4s_o_},
    {"i4S_S_i4i2_S_o__S_S_i4i2_S_o__", (Il2CppMethodPointer)b_i4S_S_i4i2_S_o__S_S_i4i2_S_o__},
    {"i4S_S_i4i2_S_r4r4r4r4r4i4__S_S_i4i2_S_r4r4r4r4r4i4__", (Il2CppMethodPointer)b_i4S_S_i4i2_S_r4r4r4r4r4i4__S_S_i4i2_S_r4r4r4r4r4i4__},
    {"i4S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_i4S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___S_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___},
    {"i4S_S_ooi4_i4i4_S_S_ooi4_i4i4_", (Il2CppMethodPointer)b_i4S_S_ooi4_i4i4_S_S_ooi4_i4i4_},
    {"i4S_S_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b_", (Il2CppMethodPointer)b_i4S_S_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b_},
    {"i4S_S_pu4__S_S_pu4__", (Il2CppMethodPointer)b_i4S_S_pu4__S_S_pu4__},
    {"i4S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_", (Il2CppMethodPointer)b_i4S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4i4_},
    {"i4S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_", (Il2CppMethodPointer)b_i4S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_S_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_},
    {"i4S_S_r4r4_S_r4r4__S_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_i4S_S_r4r4_S_r4r4__S_S_r4r4_S_r4r4__},
    {"i4S_S_r4r4_r4_S_S_r4r4_r4_", (Il2CppMethodPointer)b_i4S_S_r4r4_r4_S_S_r4r4_r4_},
    {"i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___},
    {"i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_},
    {"i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_},
    {"i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_},
    {"i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__},
    {"i4S_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__},
    {"i4S_S_r4r4r4_S_r4r4r4_r4i4b_S_S_r4r4r4_S_r4r4r4_r4i4b_", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4_r4i4b_S_S_r4r4r4_S_r4r4r4_r4i4b_},
    {"i4S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_i4S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__},
    {"i4S_S_r4r4r4_r4_S_S_r4r4r4_r4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4_r4_S_S_r4r4r4_r4_},
    {"i4S_S_r4r4r4r4_S_r4r4r4r4_o_S_S_r4r4r4r4_S_r4r4r4r4_o_", (Il2CppMethodPointer)b_i4S_S_r4r4r4r4_S_r4r4r4r4_o_S_S_r4r4r4r4_S_r4r4r4r4_o_},
    {"i4S_S_r4r4r4r4_i4_S_S_r4r4r4r4_i4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4r4_i4_S_S_r4r4r4r4_i4_},
    {"i4S_S_r4r4r4r4_r4_S_S_r4r4r4r4_r4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4r4_r4_S_S_r4r4r4r4_r4_},
    {"i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_", (Il2CppMethodPointer)b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_},
    {"i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_", (Il2CppMethodPointer)b_i4S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_},
    {"i4S_S_s_s_S_S_s_s_", (Il2CppMethodPointer)b_i4S_S_s_s_S_S_s_s_},
    {"i4S_S_ss_S_o__S_S_ss_S_o__", (Il2CppMethodPointer)b_i4S_S_ss_S_o__S_S_ss_S_o__},
    {"i4S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_", (Il2CppMethodPointer)b_i4S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_S_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_},
    {"i4S_S_u4u4Ob_ob_S_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_i4S_S_u4u4Ob_ob_S_S_u4u4Ob_ob_},
    {"i4S_S_u4u4_i8u8b_S_S_u4u4_i8u8b_", (Il2CppMethodPointer)b_i4S_S_u4u4_i8u8b_S_S_u4u4_i8u8b_},
    {"i4S_S_u4u4_o_S_S_u4u4_o_", (Il2CppMethodPointer)b_i4S_S_u4u4_o_S_S_u4u4_o_},
    {"i4S_S_u4u4u4u4_i8i4s_S_S_u4u4u4u4_i8i4s_", (Il2CppMethodPointer)b_i4S_S_u4u4u4u4_i8i4s_S_S_u4u4u4u4_i8i4s_},
    {"i4S_S_u4u4u4u4_o_S_S_u4u4u4u4_o_", (Il2CppMethodPointer)b_i4S_S_u4u4u4u4_o_S_S_u4u4u4u4_o_},
    {"i4S_S_u8S_u8u8__bS_O__S_S_u8S_u8u8__bS_O__", (Il2CppMethodPointer)b_i4S_S_u8S_u8u8__bS_O__S_S_u8S_u8u8__bS_O__},
    {"i4S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__", (Il2CppMethodPointer)b_i4S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__S_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__},
    {"i4S_S_u8u8_i4i4_S_S_u8u8_i4i4_", (Il2CppMethodPointer)b_i4S_S_u8u8_i4i4_S_S_u8u8_i4i4_},
    {"i4S__S__", (Il2CppMethodPointer)b_i4S__S__},
    {"i4S_bsi4bb_S_bsi4bb_", (Il2CppMethodPointer)b_i4S_bsi4bb_S_bsi4bb_},
    {"i4S_bssos_S_bssos_", (Il2CppMethodPointer)b_i4S_bssos_S_bssos_},
    {"i4S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_i4S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__S_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__},
    {"i4S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_", (Il2CppMethodPointer)b_i4S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_S_i4S_r4r4r4r4_soS_r4r4r4r4_oo_},
    {"i4S_i4_S_i4_", (Il2CppMethodPointer)b_i4S_i4_S_i4_},
    {"i4S_i4bi4_S_i4bi4_", (Il2CppMethodPointer)b_i4S_i4bi4_S_i4bi4_},
    {"i4S_i4i2i2u1u1u1u1u1u1u1u1_S_i4i2i2u1u1u1u1u1u1u1u1_", (Il2CppMethodPointer)b_i4S_i4i2i2u1u1u1u1u1u1u1u1_S_i4i2i2u1u1u1u1u1u1u1u1_},
    {"i4S_i4i4O_S_i4i4O_", (Il2CppMethodPointer)b_i4S_i4i4O_S_i4i4O_},
    {"i4S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_i4S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__S_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__},
    {"i4S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_", (Il2CppMethodPointer)b_i4S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_S_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_},
    {"i4S_i4i4_", (Il2CppMethodPointer)b_i4S_i4i4_},
    {"i4S_i4i4_S_i4i4_", (Il2CppMethodPointer)b_i4S_i4i4_S_i4i4_},
    {"i4S_i4i4i4_", (Il2CppMethodPointer)b_i4S_i4i4i4_},
    {"i4S_i4i4i4_S_i4i4i4_", (Il2CppMethodPointer)b_i4S_i4i4i4_S_i4i4i4_},
    {"i4S_i4i4i4i4_", (Il2CppMethodPointer)b_i4S_i4i4i4i4_},
    {"i4S_i4i4i4i4_S_i4i4i4i4_", (Il2CppMethodPointer)b_i4S_i4i4i4i4_S_i4i4i4i4_},
    {"i4S_i4i4i4i4i4i4i4i4_S_i4i4i4i4i4i4i4i4_", (Il2CppMethodPointer)b_i4S_i4i4i4i4i4i4i4i4_S_i4i4i4i4i4i4i4i4_},
    {"i4S_i4i4o_S_i4i4o_", (Il2CppMethodPointer)b_i4S_i4i4o_S_i4i4o_},
    {"i4S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__", (Il2CppMethodPointer)b_i4S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__S_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__},
    {"i4S_i4i4r4r4_S_i4i4r4r4_", (Il2CppMethodPointer)b_i4S_i4i4r4r4_S_i4i4r4r4_},
    {"i4S_i4i4s_S_i4i4s_", (Il2CppMethodPointer)b_i4S_i4i4s_S_i4i4s_},
    {"i4S_i4i4sb_S_i4i4sb_", (Il2CppMethodPointer)b_i4S_i4i4sb_S_i4i4sb_},
    {"i4S_i4i4ssi4b_S_i4i4ssi4b_", (Il2CppMethodPointer)b_i4S_i4i4ssi4b_S_i4i4ssi4b_},
    {"i4S_i4i4u8_S_i4i4u8_", (Il2CppMethodPointer)b_i4S_i4i4u8_S_i4i4u8_},
    {"i4S_i4oOi4_S_i4oOi4_", (Il2CppMethodPointer)b_i4S_i4oOi4_S_i4oOi4_},
    {"i4S_i4o_S_i4o_", (Il2CppMethodPointer)b_i4S_i4o_S_i4o_},
    {"i4S_i4oo_S_i4oo_", (Il2CppMethodPointer)b_i4S_i4oo_S_i4oo_},
    {"i4S_i4oor4_S_i4oor4_", (Il2CppMethodPointer)b_i4S_i4oor4_S_i4oor4_},
    {"i4S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_i4S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__S_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__},
    {"i4S_i4r4_S_i4r4_", (Il2CppMethodPointer)b_i4S_i4r4_S_i4r4_},
    {"i4S_i4r4i4i4i4i4S_r4r4_S_r4r4__S_i4r4i4i4i4i4S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_i4S_i4r4i4i4i4i4S_r4r4_S_r4r4__S_i4r4i4i4i4i4S_r4r4_S_r4r4__},
    {"i4S_i4r8i4s_S_i4r8i4s_", (Il2CppMethodPointer)b_i4S_i4r8i4s_S_i4r8i4s_},
    {"i4S_i4s_S_i4s_", (Il2CppMethodPointer)b_i4S_i4s_S_i4s_},
    {"i4S_i4si4O_S_i4si4O_", (Il2CppMethodPointer)b_i4S_i4si4O_S_i4si4O_},
    {"i4S_i4si4_S_i4si4_", (Il2CppMethodPointer)b_i4S_i4si4_S_i4si4_},
    {"i4S_i4sr4S_r4i4_b_S_i4sr4S_r4i4_b_", (Il2CppMethodPointer)b_i4S_i4sr4S_r4i4_b_S_i4sr4S_r4i4_b_},
    {"i4S_i4ss_S_i4ss_", (Il2CppMethodPointer)b_i4S_i4ss_S_i4ss_},
    {"i4S_i4u1u1u1u1_S_i4u1u1u1u1_", (Il2CppMethodPointer)b_i4S_i4u1u1u1u1_S_i4u1u1u1u1_},
    {"i4S_i4u2u2so_S_i4u2u2so_", (Il2CppMethodPointer)b_i4S_i4u2u2so_S_i4u2u2so_},
    {"i4S_i4u4u1_S_i4u4u1_", (Il2CppMethodPointer)b_i4S_i4u4u1_S_i4u4u1_},
    {"i4S_i4u8ss_S_i4u8ss_", (Il2CppMethodPointer)b_i4S_i4u8ss_S_i4u8ss_},
    {"i4S_i8i4i4i4i4_S_i8i4i4i4i4_", (Il2CppMethodPointer)b_i4S_i8i4i4i4i4_S_i8i4i4i4i4_},
    {"i4S_i8i4u1i4r8S_i4i4i4i4i4pi4__S_i8i4u1i4r8S_i4i4i4i4i4pi4__", (Il2CppMethodPointer)b_i4S_i8i4u1i4r8S_i4i4i4i4i4pi4__S_i8i4u1i4r8S_i4i4i4i4i4pi4__},
    {"i4S_i8i8S_Oi8i8S_r4r4r4r4___S_i8i8S_Oi8i8S_r4r4r4r4___", (Il2CppMethodPointer)b_i4S_i8i8S_Oi8i8S_r4r4r4r4___S_i8i8S_Oi8i8S_r4r4r4r4___},
    {"i4S_i8i8_S_i8i8_", (Il2CppMethodPointer)b_i4S_i8i8_S_i8i8_},
    {"i4S_i8i8i8_S_i8i8i8_", (Il2CppMethodPointer)b_i4S_i8i8i8_S_i8i8i8_},
    {"i4S_i8i8o_S_i8i8o_", (Il2CppMethodPointer)b_i4S_i8i8o_S_i8i8o_},
    {"i4S_i8oo_S_i8oo_", (Il2CppMethodPointer)b_i4S_i8oo_S_i8oo_},
    {"i4S_i8s_S_i8s_", (Il2CppMethodPointer)b_i4S_i8s_S_i8s_},
    {"i4S_oO_S_oO_", (Il2CppMethodPointer)b_i4S_oO_S_oO_},
    {"i4S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_i4S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"i4S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_i4S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_S_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_},
    {"i4S_oS_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_i4S_oS_S_r4r4r4_S_r4r4r4___S_oS_S_r4r4r4_S_r4r4r4___},
    {"i4S_oS_i4i4__S_oS_i4i4__", (Il2CppMethodPointer)b_i4S_oS_i4i4__S_oS_i4i4__},
    {"i4S_oS_i4r4o_r4_S_oS_i4r4o_r4_", (Il2CppMethodPointer)b_i4S_oS_i4r4o_r4_S_oS_i4r4o_r4_},
    {"i4S_oS_r4r4r4_S_r4r4_r4_S_oS_r4r4r4_S_r4r4_r4_", (Il2CppMethodPointer)b_i4S_oS_r4r4r4_S_r4r4_r4_S_oS_r4r4r4_S_r4r4_r4_},
    {"i4S_oS_r4r4r4__S_oS_r4r4r4__", (Il2CppMethodPointer)b_i4S_oS_r4r4r4__S_oS_r4r4r4__},
    {"i4S_oS_r4r4r4r4_bbo_S_oS_r4r4r4r4_bbo_", (Il2CppMethodPointer)b_i4S_oS_r4r4r4r4_bbo_S_oS_r4r4r4r4_bbo_},
    {"i4S_oS_u4u4_o_S_oS_u4u4_o_", (Il2CppMethodPointer)b_i4S_oS_u4u4_o_S_oS_u4u4_o_},
    {"i4S_ob_S_ob_", (Il2CppMethodPointer)b_i4S_ob_S_ob_},
    {"i4S_obi4_S_obi4_", (Il2CppMethodPointer)b_i4S_obi4_S_obi4_},
    {"i4S_oi4_S_oi4_", (Il2CppMethodPointer)b_i4S_oi4_S_oi4_},
    {"i4S_oi4i4_S_oi4i4_", (Il2CppMethodPointer)b_i4S_oi4i4_S_oi4i4_},
    {"i4S_oi4o_S_oi4o_", (Il2CppMethodPointer)b_i4S_oi4o_S_oi4o_},
    {"i4S_oi4r4_S_oi4r4_", (Il2CppMethodPointer)b_i4S_oi4r4_S_oi4r4_},
    {"i4S_oi4s_S_oi4s_", (Il2CppMethodPointer)b_i4S_oi4s_S_oi4s_},
    {"i4S_oo_S_oo_", (Il2CppMethodPointer)b_i4S_oo_S_oo_},
    {"i4S_oobsoobr4_S_oobsoobr4_", (Il2CppMethodPointer)b_i4S_oobsoobr4_S_oobsoobr4_},
    {"i4S_ooi4_S_ooi4_", (Il2CppMethodPointer)b_i4S_ooi4_S_ooi4_},
    {"i4S_ooi4b_S_ooi4b_", (Il2CppMethodPointer)b_i4S_ooi4b_S_ooi4b_},
    {"i4S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_", (Il2CppMethodPointer)b_i4S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_S_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_},
    {"i4S_ooo_S_ooo_", (Il2CppMethodPointer)b_i4S_ooo_S_ooo_},
    {"i4S_oooi4_S_oooi4_", (Il2CppMethodPointer)b_i4S_oooi4_S_oooi4_},
    {"i4S_oooi4s_S_oooi4s_", (Il2CppMethodPointer)b_i4S_oooi4s_S_oooi4s_},
    {"i4S_ooooi4b_S_ooooi4b_", (Il2CppMethodPointer)b_i4S_ooooi4b_S_ooooi4b_},
    {"i4S_oor4r4_S_oor4r4_", (Il2CppMethodPointer)b_i4S_oor4r4_S_oor4r4_},
    {"i4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_", (Il2CppMethodPointer)b_i4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_},
    {"i4S_or4_S_or4_", (Il2CppMethodPointer)b_i4S_or4_S_or4_},
    {"i4S_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_i4S_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__},
    {"i4S_os_S_os_", (Il2CppMethodPointer)b_i4S_os_S_os_},
    {"i4S_osi4_S_osi4_", (Il2CppMethodPointer)b_i4S_osi4_S_osi4_},
    {"i4S_oso_S_oso_", (Il2CppMethodPointer)b_i4S_oso_S_oso_},
    {"i4S_ossS_u4u4u4u4__S_ossS_u4u4u4u4__", (Il2CppMethodPointer)b_i4S_ossS_u4u4u4u4__S_ossS_u4u4u4u4__},
    {"i4S_ou4_S_ou4_", (Il2CppMethodPointer)b_i4S_ou4_S_ou4_},
    {"i4S_ou4os_S_ou4os_", (Il2CppMethodPointer)b_i4S_ou4os_S_ou4os_},
    {"i4S_ou4u4u4u4u4u4u8u8_S_ou4u4u4u4u4u4u8u8_", (Il2CppMethodPointer)b_i4S_ou4u4u4u4u4u4u8u8_S_ou4u4u4u4u4u4u8u8_},
    {"i4S_pi4_S_pi4_", (Il2CppMethodPointer)b_i4S_pi4_S_pi4_},
    {"i4S_pi4i4_S_pi4i4_", (Il2CppMethodPointer)b_i4S_pi4i4_S_pi4i4_},
    {"i4S_pu4u4u4u4_S_pu4u4u4u4_", (Il2CppMethodPointer)b_i4S_pu4u4u4u4_S_pu4u4u4u4_},
    {"i4S_r4S_oS_r4r4r4_r4__S_r4S_oS_r4r4r4_r4__", (Il2CppMethodPointer)b_i4S_r4S_oS_r4r4r4_r4__S_r4S_oS_r4r4r4_r4__},
    {"i4S_r4S_r4__S_r4S_r4__", (Il2CppMethodPointer)b_i4S_r4S_r4__S_r4S_r4__},
    {"i4S_r4S_r4r4r4r4__S_r4S_r4r4r4r4__", (Il2CppMethodPointer)b_i4S_r4S_r4r4r4r4__S_r4S_r4r4r4r4__},
    {"i4S_r4i4_S_r4i4_", (Il2CppMethodPointer)b_i4S_r4i4_S_r4i4_},
    {"i4S_r4o_S_r4o_", (Il2CppMethodPointer)b_i4S_r4o_S_r4o_},
    {"i4S_r4r4_S_r4r4_", (Il2CppMethodPointer)b_i4S_r4r4_S_r4r4_},
    {"i4S_r4r4r4_S_r4r4r4_", (Il2CppMethodPointer)b_i4S_r4r4r4_S_r4r4r4_},
    {"i4S_r4r4r4r4_S_r4r4r4r4_", (Il2CppMethodPointer)b_i4S_r4r4r4r4_S_r4r4r4r4_},
    {"i4S_r4r4r4r4i4i4i4i4_S_r4r4r4r4i4i4i4i4_", (Il2CppMethodPointer)b_i4S_r4r4r4r4i4i4i4i4_S_r4r4r4r4i4i4i4i4_},
    {"i4S_r4r4r4r4r4r4_S_r4r4r4r4r4r4_", (Il2CppMethodPointer)b_i4S_r4r4r4r4r4r4_S_r4r4r4r4r4r4_},
    {"i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"i4S_r4s_S_r4s_", (Il2CppMethodPointer)b_i4S_r4s_S_r4s_},
    {"i4S_r8obi2_S_r8obi2_", (Il2CppMethodPointer)b_i4S_r8obi2_S_r8obi2_},
    {"i4S_r8r8_S_r8r8_", (Il2CppMethodPointer)b_i4S_r8r8_S_r8r8_},
    {"i4S_sO_S_sO_", (Il2CppMethodPointer)b_i4S_sO_S_sO_},
    {"i4S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_i4S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___S_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___},
    {"i4S_sS_i4oo__S_sS_i4oo__", (Il2CppMethodPointer)b_i4S_sS_i4oo__S_sS_i4oo__},
    {"i4S_sS_oi4i4__S_sS_oi4i4__", (Il2CppMethodPointer)b_i4S_sS_oi4i4__S_sS_oi4i4__},
    {"i4S_sS_r4r4r4_S_r4r4r4r4__S_sS_r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_i4S_sS_r4r4r4_S_r4r4r4r4__S_sS_r4r4r4_S_r4r4r4r4__},
    {"i4S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_i4S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__S_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__},
    {"i4S_sS_ssob_so_S_sS_ssob_so_", (Il2CppMethodPointer)b_i4S_sS_ssob_so_S_sS_ssob_so_},
    {"i4S_sS_u8__S_sS_u8__", (Il2CppMethodPointer)b_i4S_sS_u8__S_sS_u8__},
    {"i4S_s_S_s_", (Il2CppMethodPointer)b_i4S_s_S_s_},
    {"i4S_sb_S_sb_", (Il2CppMethodPointer)b_i4S_sb_S_sb_},
    {"i4S_sbi4i4ooboo_S_sbi4i4ooboo_", (Il2CppMethodPointer)b_i4S_sbi4i4ooboo_S_sbi4i4ooboo_},
    {"i4S_si4O_S_si4O_", (Il2CppMethodPointer)b_i4S_si4O_S_si4O_},
    {"i4S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_", (Il2CppMethodPointer)b_i4S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_S_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_},
    {"i4S_si4_S_si4_", (Il2CppMethodPointer)b_i4S_si4_S_si4_},
    {"i4S_si4i4_S_si4i4_", (Il2CppMethodPointer)b_i4S_si4i4_S_si4i4_},
    {"i4S_si4i4b_S_si4i4b_", (Il2CppMethodPointer)b_i4S_si4i4b_S_si4i4b_},
    {"i4S_si4i4i4o_S_si4i4i4o_", (Il2CppMethodPointer)b_i4S_si4i4i4o_S_si4i4i4o_},
    {"i4S_si4i4o_S_si4i4o_", (Il2CppMethodPointer)b_i4S_si4i4o_S_si4i4o_},
    {"i4S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_i4S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_S_si4i4r4i4i4i4i4i4i4sssi4r4i4b_},
    {"i4S_si4oobbi4i4i4boo_S_si4oobbi4i4i4boo_", (Il2CppMethodPointer)b_i4S_si4oobbi4i4i4boo_S_si4oobbi4i4i4boo_},
    {"i4S_so_S_so_", (Il2CppMethodPointer)b_i4S_so_S_so_},
    {"i4S_sob_S_sob_", (Il2CppMethodPointer)b_i4S_sob_S_sob_},
    {"i4S_soi4u4_S_soi4u4_", (Il2CppMethodPointer)b_i4S_soi4u4_S_soi4u4_},
    {"i4S_soo_S_soo_", (Il2CppMethodPointer)b_i4S_soo_S_soo_},
    {"i4S_sosi4_S_sosi4_", (Il2CppMethodPointer)b_i4S_sosi4_S_sosi4_},
    {"i4S_soss_S_soss_", (Il2CppMethodPointer)b_i4S_soss_S_soss_},
    {"i4S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__", (Il2CppMethodPointer)b_i4S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__S_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__},
    {"i4S_sr4_S_sr4_", (Il2CppMethodPointer)b_i4S_sr4_S_sr4_},
    {"i4S_ssS_i4_i4o_S_ssS_i4_i4o_", (Il2CppMethodPointer)b_i4S_ssS_i4_i4o_S_ssS_i4_i4o_},
    {"i4S_ss_S_ss_", (Il2CppMethodPointer)b_i4S_ss_S_ss_},
    {"i4S_ssb_S_ssb_", (Il2CppMethodPointer)b_i4S_ssb_S_ssb_},
    {"i4S_ssi4_S_ssi4_", (Il2CppMethodPointer)b_i4S_ssi4_S_ssi4_},
    {"i4S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_i4S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_S_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_},
    {"i4S_sso_S_sso_", (Il2CppMethodPointer)b_i4S_sso_S_sso_},
    {"i4S_ssob_S_ssob_", (Il2CppMethodPointer)b_i4S_ssob_S_ssob_},
    {"i4S_ssoo_S_ssoo_", (Il2CppMethodPointer)b_i4S_ssoo_S_ssoo_},
    {"i4S_sss_S_sss_", (Il2CppMethodPointer)b_i4S_sss_S_sss_},
    {"i4S_sssi4i4i4_S_sssi4i4i4_", (Il2CppMethodPointer)b_i4S_sssi4i4i4_S_sssi4i4i4_},
    {"i4S_sssi4i4osS_r4r4r4r4_oi4O_S_sssi4i4osS_r4r4r4r4_oi4O_", (Il2CppMethodPointer)b_i4S_sssi4i4osS_r4r4r4r4_oi4O_S_sssi4i4osS_r4r4r4r4_oi4O_},
    {"i4S_ssss_S_ssss_", (Il2CppMethodPointer)b_i4S_ssss_S_ssss_},
    {"i4S_sssss_S_sssss_", (Il2CppMethodPointer)b_i4S_sssss_S_sssss_},
    {"i4S_sssssss_S_sssssss_", (Il2CppMethodPointer)b_i4S_sssssss_S_sssssss_},
    {"i4S_ssu1_S_ssu1_", (Il2CppMethodPointer)b_i4S_ssu1_S_ssu1_},
    {"i4S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_", (Il2CppMethodPointer)b_i4S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_S_ssu8u8u8u8u4bi4i4i4i4r8r8r8_},
    {"i4S_su4_S_su4_", (Il2CppMethodPointer)b_i4S_su4_S_su4_},
    {"i4S_su4so_S_su4so_", (Il2CppMethodPointer)b_i4S_su4so_S_su4so_},
    {"i4S_u2S_i4u1u1u1u1_su2_S_u2S_i4u1u1u1u1_su2_", (Il2CppMethodPointer)b_i4S_u2S_i4u1u1u1u1_su2_S_u2S_i4u1u1u1u1_su2_},
    {"i4S_u2u2i4_S_u2u2i4_", (Il2CppMethodPointer)b_i4S_u2u2i4_S_u2u2i4_},
    {"i4S_u4S_r4r4_u4S_r4r4__S_u4S_r4r4_u4S_r4r4__", (Il2CppMethodPointer)b_i4S_u4S_r4r4_u4S_r4r4__S_u4S_r4r4_u4S_r4r4__},
    {"i4S_u4i4i4_S_u4i4i4_", (Il2CppMethodPointer)b_i4S_u4i4i4_S_u4i4i4_},
    {"i4S_u4o_S_u4o_", (Il2CppMethodPointer)b_i4S_u4o_S_u4o_},
    {"i4S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_i4S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_S_u4u4oS_u4u4Ob_S_u4u4Ob_ob_},
    {"i4S_u4u4u4u4_S_u4u4u4u4_", (Il2CppMethodPointer)b_i4S_u4u4u4u4_S_u4u4u4u4_},
    {"i4S_u8_S_u8_", (Il2CppMethodPointer)b_i4S_u8_S_u8_},
    {"i4S_u8b_S_u8b_", (Il2CppMethodPointer)b_i4S_u8b_S_u8b_},
    {"i4S_u8i4i4S_u4u4_S_i4i4i4i4_s_S_u8i4i4S_u4u4_S_i4i4i4i4_s_", (Il2CppMethodPointer)b_i4S_u8i4i4S_u4u4_S_i4i4i4i4_s_S_u8i4i4S_u4u4_S_i4i4i4i4_s_},
    {"i4S_u8u4_S_u8u4_", (Il2CppMethodPointer)b_i4S_u8u4_S_u8u4_},
    {"i4S_u8u8_S_u8u8_", (Il2CppMethodPointer)b_i4S_u8u8_S_u8u8_},
    {"i4bb", (Il2CppMethodPointer)b_i4bb},
    {"i4cc", (Il2CppMethodPointer)b_i4cc},
    {"i4i2i2", (Il2CppMethodPointer)b_i4i2i2},
    {"i4i4", (Il2CppMethodPointer)b_i4i4},
    {"i4i4PpPpPpPpPp", (Il2CppMethodPointer)b_i4i4PpPpPpPpPp},
    {"i4i4i4", (Il2CppMethodPointer)b_i4i4i4},
    {"i4i4i4ob", (Il2CppMethodPointer)b_i4i4i4ob},
    {"i4i4oooo", (Il2CppMethodPointer)b_i4i4oooo},
    {"i4i4sb", (Il2CppMethodPointer)b_i4i4sb},
    {"i4i8i8", (Il2CppMethodPointer)b_i4i8i8},
    {"i4o", (Il2CppMethodPointer)b_i4o},
    {"i4oS_r4r4r4_S_r4r4_ob", (Il2CppMethodPointer)b_i4oS_r4r4r4_S_r4r4_ob},
    {"i4ob", (Il2CppMethodPointer)b_i4ob},
    {"i4oi4i4", (Il2CppMethodPointer)b_i4oi4i4},
    {"i4oi4o", (Il2CppMethodPointer)b_i4oi4o},
    {"i4oo", (Il2CppMethodPointer)b_i4oo},
    {"i4ooi4b", (Il2CppMethodPointer)b_i4ooi4b},
    {"i4ooo", (Il2CppMethodPointer)b_i4ooo},
    {"i4oooo", (Il2CppMethodPointer)b_i4oooo},
    {"i4os", (Il2CppMethodPointer)b_i4os},
    {"i4osi4i4oPS_si4i4_PoPb", (Il2CppMethodPointer)b_i4osi4i4oPS_si4i4_PoPb},
    {"i4ou4u4", (Il2CppMethodPointer)b_i4ou4u4},
    {"i4p", (Il2CppMethodPointer)b_i4p},
    {"i4pPS_S_pi4S_u2u2__i4i4u1u1u2u4_", (Il2CppMethodPointer)b_i4pPS_S_pi4S_u2u2__i4i4u1u1u2u4_},
    {"i4pi4p", (Il2CppMethodPointer)b_i4pi4p},
    {"i4pp", (Il2CppMethodPointer)b_i4pp},
    {"i4ppi4", (Il2CppMethodPointer)b_i4ppi4},
    {"i4ppi4Pi4", (Il2CppMethodPointer)b_i4ppi4Pi4},
    {"i4r4r4", (Il2CppMethodPointer)b_i4r4r4},
    {"i4r8r8", (Il2CppMethodPointer)b_i4r8r8},
    {"i4s", (Il2CppMethodPointer)b_i4s},
    {"i4si4", (Il2CppMethodPointer)b_i4si4},
    {"i4si4i4oPS_si4i4_PoPb", (Il2CppMethodPointer)b_i4si4i4oPS_si4i4_PoPb},
    {"i4si4o", (Il2CppMethodPointer)b_i4si4o},
    {"i4so", (Il2CppMethodPointer)b_i4so},
    {"i4ss", (Il2CppMethodPointer)b_i4ss},
    {"i4u1", (Il2CppMethodPointer)b_i4u1},
    {"i4u1u1", (Il2CppMethodPointer)b_i4u1u1},
    {"i4u2u2", (Il2CppMethodPointer)b_i4u2u2},
    {"i4u4u4", (Il2CppMethodPointer)b_i4u4u4},
    {"i4u8u8", (Il2CppMethodPointer)b_i4u8u8},
    {"i8", (Il2CppMethodPointer)b_i8},
    {"i8O", (Il2CppMethodPointer)b_i8O},
    {"i8PS_S_i4_i4_", (Il2CppMethodPointer)b_i8PS_S_i4_i4_},
    {"i8i4PS_S_i4_i4_", (Il2CppMethodPointer)b_i8i4PS_S_i4_i4_},
    {"i8o", (Il2CppMethodPointer)b_i8o},
    {"i8os", (Il2CppMethodPointer)b_i8os},
    {"i8ou4u4", (Il2CppMethodPointer)b_i8ou4u4},
    {"i8pi4i8", (Il2CppMethodPointer)b_i8pi4i8},
    {"i8pp", (Il2CppMethodPointer)b_i8pp},
    {"o", (Il2CppMethodPointer)b_o},
    {"oO", (Il2CppMethodPointer)b_oO},
    {"oOo", (Il2CppMethodPointer)b_oOo},
    {"oOooO", (Il2CppMethodPointer)b_oOooO},
    {"oOs", (Il2CppMethodPointer)b_oOs},
    {"oOsooo", (Il2CppMethodPointer)b_oOsooo},
    {"oPo", (Il2CppMethodPointer)b_oPo},
    {"oS_OS_oi4__", (Il2CppMethodPointer)b_oS_OS_oi4__},
    {"oS_Oi4_", (Il2CppMethodPointer)b_oS_Oi4_},
    {"oS_Oi8_", (Il2CppMethodPointer)b_oS_Oi8_},
    {"oS_Oi8i8S_r4r4r4r4__", (Il2CppMethodPointer)b_oS_Oi8i8S_r4r4r4r4__},
    {"oS_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_oS_PS_S_i4u2u2r8i4___},
    {"oS_Pu1i4i4i4i4S_pi4i4__", (Il2CppMethodPointer)b_oS_Pu1i4i4i4i4S_pi4i4__},
    {"oS_Pvi4i4i4S_pi4i4_i4_", (Il2CppMethodPointer)b_oS_Pvi4i4i4S_pi4i4_i4_},
    {"oS_S_Oi4i4__", (Il2CppMethodPointer)b_oS_S_Oi4i4__},
    {"oS_S_Pvi4i4i4S_pi4i4_i4_i4_", (Il2CppMethodPointer)b_oS_S_Pvi4i4i4S_pi4i4_i4_i4_},
    {"oS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_", (Il2CppMethodPointer)b_oS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_},
    {"oS_S_S_p__i4_", (Il2CppMethodPointer)b_oS_S_S_p__i4_},
    {"oS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_oS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_},
    {"oS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_", (Il2CppMethodPointer)b_oS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_},
    {"oS_S_S_u4i4i4_b_i4_", (Il2CppMethodPointer)b_oS_S_S_u4i4i4_b_i4_},
    {"oS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__", (Il2CppMethodPointer)b_oS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__},
    {"oS_S_S_u4u4u4u4_i8i4s_o_", (Il2CppMethodPointer)b_oS_S_S_u4u4u4u4_i8i4s_o_},
    {"oS_S_i4i2_S_o__", (Il2CppMethodPointer)b_oS_S_i4i2_S_o__},
    {"oS_S_i4i2_S_r4r4r4r4r4i4__", (Il2CppMethodPointer)b_oS_S_i4i2_S_r4r4r4r4r4i4__},
    {"oS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_oS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___},
    {"oS_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_S_i4S_r4r4r4_r4r4i4_S_u1_i4u4u8u8S_r4_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_r4r4i4i4S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4b_r4i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4i4bi4_or4i4i4pi4i4bbS_pi4S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_i4i4bS_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_bi4p__", (Il2CppMethodPointer)b_oS_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_S_S_i4S_r4r4r4_r4r4i4_S_u1_i4u4u8u8S_r4_i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_r4r4i4i4S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4b_r4i4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4i4bi4_or4i4i4pi4i4bbS_pi4S_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_i4i4bS_i4i4i4pi4i4i4_S_i4i4i4i4i4i4i4i4i4i4i4i4i4_bi4p__},
    {"oS_S_ooi4_i4i4_", (Il2CppMethodPointer)b_oS_S_ooi4_i4i4_},
    {"oS_S_oooo_ooi4_", (Il2CppMethodPointer)b_oS_S_oooo_ooi4_},
    {"oS_S_oooo_ooi4_S__", (Il2CppMethodPointer)b_oS_S_oooo_ooi4_S__},
    {"oS_S_oooo_ooi4_o", (Il2CppMethodPointer)b_oS_S_oooo_ooi4_o},
    {"oS_S_pu4__", (Il2CppMethodPointer)b_oS_S_pu4__},
    {"oS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_", (Il2CppMethodPointer)b_oS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_},
    {"oS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_", (Il2CppMethodPointer)b_oS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_},
    {"oS_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_oS_S_r4r4_S_r4r4__},
    {"oS_S_r4r4_r4_", (Il2CppMethodPointer)b_oS_S_r4r4_r4_},
    {"oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___},
    {"oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_},
    {"oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_},
    {"oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_},
    {"oS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__},
    {"oS_S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4__},
    {"oS_S_r4r4r4_S_r4r4r4_r4i4b_", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4_r4i4b_},
    {"oS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_oS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__},
    {"oS_S_r4r4r4_r4_", (Il2CppMethodPointer)b_oS_S_r4r4r4_r4_},
    {"oS_S_r4r4r4r4_S_r4r4r4r4_o_", (Il2CppMethodPointer)b_oS_S_r4r4r4r4_S_r4r4r4r4_o_},
    {"oS_S_r4r4r4r4_i4_", (Il2CppMethodPointer)b_oS_S_r4r4r4r4_i4_},
    {"oS_S_r4r4r4r4_r4_", (Il2CppMethodPointer)b_oS_S_r4r4r4r4_r4_},
    {"oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_", (Il2CppMethodPointer)b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_},
    {"oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_", (Il2CppMethodPointer)b_oS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_},
    {"oS_S_s_s_", (Il2CppMethodPointer)b_oS_S_s_s_},
    {"oS_S_ss_S_o__", (Il2CppMethodPointer)b_oS_S_ss_S_o__},
    {"oS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_", (Il2CppMethodPointer)b_oS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_},
    {"oS_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_oS_S_u4u4Ob_ob_},
    {"oS_S_u4u4_i8u8b_", (Il2CppMethodPointer)b_oS_S_u4u4_i8u8b_},
    {"oS_S_u4u4_o_", (Il2CppMethodPointer)b_oS_S_u4u4_o_},
    {"oS_S_u4u4u4u4_i8i4s_", (Il2CppMethodPointer)b_oS_S_u4u4u4u4_i8i4s_},
    {"oS_S_u4u4u4u4_o_", (Il2CppMethodPointer)b_oS_S_u4u4u4u4_o_},
    {"oS_S_u8S_u8u8__bS_O__", (Il2CppMethodPointer)b_oS_S_u8S_u8u8__bS_O__},
    {"oS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__", (Il2CppMethodPointer)b_oS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__},
    {"oS_S_u8u8_i4i4_", (Il2CppMethodPointer)b_oS_S_u8u8_i4i4_},
    {"oS__", (Il2CppMethodPointer)b_oS__},
    {"oS_bS_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_oS_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_r4r4r4r4S_r4r4__", (Il2CppMethodPointer)b_oS_bS_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_S_bi4r4S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ooooS_r4r4_r4i4bbb_oS_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_r4r4r4r4S_r4r4__},
    {"oS_bsi4bb_", (Il2CppMethodPointer)b_oS_bsi4bb_},
    {"oS_bssos_", (Il2CppMethodPointer)b_oS_bssos_},
    {"oS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_oS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__},
    {"oS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_", (Il2CppMethodPointer)b_oS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_},
    {"oS_i4_", (Il2CppMethodPointer)b_oS_i4_},
    {"oS_i4bi4_", (Il2CppMethodPointer)b_oS_i4bi4_},
    {"oS_i4i2i2u1u1u1u1u1u1u1u1_", (Il2CppMethodPointer)b_oS_i4i2i2u1u1u1u1u1u1u1u1_},
    {"oS_i4i4O_", (Il2CppMethodPointer)b_oS_i4i4O_},
    {"oS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_oS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__},
    {"oS_i4i4S_r4r4__", (Il2CppMethodPointer)b_oS_i4i4S_r4r4__},
    {"oS_i4i4S_r4r4__o", (Il2CppMethodPointer)b_oS_i4i4S_r4r4__o},
    {"oS_i4i4S_r4r4__oo", (Il2CppMethodPointer)b_oS_i4i4S_r4r4__oo},
    {"oS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_", (Il2CppMethodPointer)b_oS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_},
    {"oS_i4i4_", (Il2CppMethodPointer)b_oS_i4i4_},
    {"oS_i4i4i4_", (Il2CppMethodPointer)b_oS_i4i4i4_},
    {"oS_i4i4i4i4_", (Il2CppMethodPointer)b_oS_i4i4i4i4_},
    {"oS_i4i4i4i4i4i4i4i4_", (Il2CppMethodPointer)b_oS_i4i4i4i4i4i4i4i4_},
    {"oS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__", (Il2CppMethodPointer)b_oS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__},
    {"oS_i4i4r4r4_", (Il2CppMethodPointer)b_oS_i4i4r4r4_},
    {"oS_i4i4s_", (Il2CppMethodPointer)b_oS_i4i4s_},
    {"oS_i4i4sb_", (Il2CppMethodPointer)b_oS_i4i4sb_},
    {"oS_i4i4ssi4b_", (Il2CppMethodPointer)b_oS_i4i4ssi4b_},
    {"oS_i4i4u8_", (Il2CppMethodPointer)b_oS_i4i4u8_},
    {"oS_i4oOi4_", (Il2CppMethodPointer)b_oS_i4oOi4_},
    {"oS_i4o_", (Il2CppMethodPointer)b_oS_i4o_},
    {"oS_i4oo_", (Il2CppMethodPointer)b_oS_i4oo_},
    {"oS_i4oor4_", (Il2CppMethodPointer)b_oS_i4oor4_},
    {"oS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_oS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__},
    {"oS_i4r4_", (Il2CppMethodPointer)b_oS_i4r4_},
    {"oS_i4r4i4i4i4i4S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_oS_i4r4i4i4i4i4S_r4r4_S_r4r4__},
    {"oS_i4r8i4s_", (Il2CppMethodPointer)b_oS_i4r8i4s_},
    {"oS_i4s_", (Il2CppMethodPointer)b_oS_i4s_},
    {"oS_i4si4O_", (Il2CppMethodPointer)b_oS_i4si4O_},
    {"oS_i4si4_", (Il2CppMethodPointer)b_oS_i4si4_},
    {"oS_i4sr4S_r4i4_b_", (Il2CppMethodPointer)b_oS_i4sr4S_r4i4_b_},
    {"oS_i4ss_", (Il2CppMethodPointer)b_oS_i4ss_},
    {"oS_i4u1u1u1u1_", (Il2CppMethodPointer)b_oS_i4u1u1u1u1_},
    {"oS_i4u2u2so_", (Il2CppMethodPointer)b_oS_i4u2u2so_},
    {"oS_i4u4u1_", (Il2CppMethodPointer)b_oS_i4u4u1_},
    {"oS_i4u8ss_", (Il2CppMethodPointer)b_oS_i4u8ss_},
    {"oS_i8i4i4i4i4_", (Il2CppMethodPointer)b_oS_i8i4i4i4i4_},
    {"oS_i8i4u1i4r8S_i4i4i4i4i4pi4__", (Il2CppMethodPointer)b_oS_i8i4u1i4r8S_i4i4i4i4i4pi4__},
    {"oS_i8i8S_Oi8i8S_r4r4r4r4___", (Il2CppMethodPointer)b_oS_i8i8S_Oi8i8S_r4r4r4r4___},
    {"oS_i8i8_", (Il2CppMethodPointer)b_oS_i8i8_},
    {"oS_i8i8i8_", (Il2CppMethodPointer)b_oS_i8i8i8_},
    {"oS_i8i8o_", (Il2CppMethodPointer)b_oS_i8i8o_},
    {"oS_i8oo_", (Il2CppMethodPointer)b_oS_i8oo_},
    {"oS_i8s_", (Il2CppMethodPointer)b_oS_i8s_},
    {"oS_oO_", (Il2CppMethodPointer)b_oS_oO_},
    {"oS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_oS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"oS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_oS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_},
    {"oS_oS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_oS_oS_S_r4r4r4_S_r4r4r4___},
    {"oS_oS_i4i4__", (Il2CppMethodPointer)b_oS_oS_i4i4__},
    {"oS_oS_i4r4o_r4_", (Il2CppMethodPointer)b_oS_oS_i4r4o_r4_},
    {"oS_oS_r4r4r4_S_r4r4_r4_", (Il2CppMethodPointer)b_oS_oS_r4r4r4_S_r4r4_r4_},
    {"oS_oS_r4r4r4__", (Il2CppMethodPointer)b_oS_oS_r4r4r4__},
    {"oS_oS_r4r4r4r4_bbo_", (Il2CppMethodPointer)b_oS_oS_r4r4r4r4_bbo_},
    {"oS_oS_u4u4_o_", (Il2CppMethodPointer)b_oS_oS_u4u4_o_},
    {"oS_o_", (Il2CppMethodPointer)b_oS_o_},
    {"oS_ob_", (Il2CppMethodPointer)b_oS_ob_},
    {"oS_obi4_", (Il2CppMethodPointer)b_oS_obi4_},
    {"oS_oi4_", (Il2CppMethodPointer)b_oS_oi4_},
    {"oS_oi4i4_", (Il2CppMethodPointer)b_oS_oi4i4_},
    {"oS_oi4o_", (Il2CppMethodPointer)b_oS_oi4o_},
    {"oS_oi4r4_", (Il2CppMethodPointer)b_oS_oi4r4_},
    {"oS_oi4s_", (Il2CppMethodPointer)b_oS_oi4s_},
    {"oS_oo_", (Il2CppMethodPointer)b_oS_oo_},
    {"oS_oobsoobr4_", (Il2CppMethodPointer)b_oS_oobsoobr4_},
    {"oS_ooi4_", (Il2CppMethodPointer)b_oS_ooi4_},
    {"oS_ooi4b_", (Il2CppMethodPointer)b_oS_ooi4b_},
    {"oS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_", (Il2CppMethodPointer)b_oS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_},
    {"oS_ooo_", (Il2CppMethodPointer)b_oS_ooo_},
    {"oS_oooi4_", (Il2CppMethodPointer)b_oS_oooi4_},
    {"oS_oooi4s_", (Il2CppMethodPointer)b_oS_oooi4s_},
    {"oS_ooooi4b_", (Il2CppMethodPointer)b_oS_ooooi4b_},
    {"oS_oor4r4_", (Il2CppMethodPointer)b_oS_oor4r4_},
    {"oS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_", (Il2CppMethodPointer)b_oS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_},
    {"oS_or4_", (Il2CppMethodPointer)b_oS_or4_},
    {"oS_or4r4S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_oS_or4r4S_r4r4r4_S_r4r4r4__},
    {"oS_or8oi8i4_", (Il2CppMethodPointer)b_oS_or8oi8i4_},
    {"oS_os_", (Il2CppMethodPointer)b_oS_os_},
    {"oS_osi4_", (Il2CppMethodPointer)b_oS_osi4_},
    {"oS_oso_", (Il2CppMethodPointer)b_oS_oso_},
    {"oS_ossS_u4u4u4u4__", (Il2CppMethodPointer)b_oS_ossS_u4u4u4u4__},
    {"oS_ou4_", (Il2CppMethodPointer)b_oS_ou4_},
    {"oS_ou4os_", (Il2CppMethodPointer)b_oS_ou4os_},
    {"oS_ou4u4u4u4u4u4u8u8_", (Il2CppMethodPointer)b_oS_ou4u4u4u4u4u4u8u8_},
    {"oS_pi4_", (Il2CppMethodPointer)b_oS_pi4_},
    {"oS_pi4i4_", (Il2CppMethodPointer)b_oS_pi4i4_},
    {"oS_pu4u4u4u4_", (Il2CppMethodPointer)b_oS_pu4u4u4u4_},
    {"oS_r4S_oS_r4r4r4_r4__", (Il2CppMethodPointer)b_oS_r4S_oS_r4r4r4_r4__},
    {"oS_r4S_r4__", (Il2CppMethodPointer)b_oS_r4S_r4__},
    {"oS_r4S_r4r4r4r4__", (Il2CppMethodPointer)b_oS_r4S_r4r4r4r4__},
    {"oS_r4i4_", (Il2CppMethodPointer)b_oS_r4i4_},
    {"oS_r4o_", (Il2CppMethodPointer)b_oS_r4o_},
    {"oS_r4r4_", (Il2CppMethodPointer)b_oS_r4r4_},
    {"oS_r4r4r4_", (Il2CppMethodPointer)b_oS_r4r4r4_},
    {"oS_r4r4r4_S_r4r4r4_o", (Il2CppMethodPointer)b_oS_r4r4r4_S_r4r4r4_o},
    {"oS_r4r4r4r4_", (Il2CppMethodPointer)b_oS_r4r4r4r4_},
    {"oS_r4r4r4r4_o", (Il2CppMethodPointer)b_oS_r4r4r4r4_o},
    {"oS_r4r4r4r4i4i4i4i4_", (Il2CppMethodPointer)b_oS_r4r4r4r4i4i4i4i4_},
    {"oS_r4r4r4r4r4r4_", (Il2CppMethodPointer)b_oS_r4r4r4r4r4r4_},
    {"oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_oS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"oS_r4s_", (Il2CppMethodPointer)b_oS_r4s_},
    {"oS_r8obi2_", (Il2CppMethodPointer)b_oS_r8obi2_},
    {"oS_r8r8_", (Il2CppMethodPointer)b_oS_r8r8_},
    {"oS_sO_", (Il2CppMethodPointer)b_oS_sO_},
    {"oS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_oS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___},
    {"oS_sS_i4oo__", (Il2CppMethodPointer)b_oS_sS_i4oo__},
    {"oS_sS_oi4i4__", (Il2CppMethodPointer)b_oS_sS_oi4i4__},
    {"oS_sS_r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_oS_sS_r4r4r4_S_r4r4r4r4__},
    {"oS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_oS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__},
    {"oS_sS_ssob_so_", (Il2CppMethodPointer)b_oS_sS_ssob_so_},
    {"oS_sS_u8__", (Il2CppMethodPointer)b_oS_sS_u8__},
    {"oS_s_", (Il2CppMethodPointer)b_oS_s_},
    {"oS_sb_", (Il2CppMethodPointer)b_oS_sb_},
    {"oS_sbi4i4ooboo_", (Il2CppMethodPointer)b_oS_sbi4i4ooboo_},
    {"oS_si4O_", (Il2CppMethodPointer)b_oS_si4O_},
    {"oS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_", (Il2CppMethodPointer)b_oS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_},
    {"oS_si4_", (Il2CppMethodPointer)b_oS_si4_},
    {"oS_si4i4_", (Il2CppMethodPointer)b_oS_si4i4_},
    {"oS_si4i4_o", (Il2CppMethodPointer)b_oS_si4i4_o},
    {"oS_si4i4_s", (Il2CppMethodPointer)b_oS_si4i4_s},
    {"oS_si4i4_so", (Il2CppMethodPointer)b_oS_si4i4_so},
    {"oS_si4i4b_", (Il2CppMethodPointer)b_oS_si4i4b_},
    {"oS_si4i4i4o_", (Il2CppMethodPointer)b_oS_si4i4i4o_},
    {"oS_si4i4o_", (Il2CppMethodPointer)b_oS_si4i4o_},
    {"oS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_oS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_},
    {"oS_si4oobbi4i4i4boo_", (Il2CppMethodPointer)b_oS_si4oobbi4i4i4boo_},
    {"oS_so_", (Il2CppMethodPointer)b_oS_so_},
    {"oS_sob_", (Il2CppMethodPointer)b_oS_sob_},
    {"oS_soi4u4_", (Il2CppMethodPointer)b_oS_soi4u4_},
    {"oS_soo_", (Il2CppMethodPointer)b_oS_soo_},
    {"oS_sosi4_", (Il2CppMethodPointer)b_oS_sosi4_},
    {"oS_soss_", (Il2CppMethodPointer)b_oS_soss_},
    {"oS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__", (Il2CppMethodPointer)b_oS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__},
    {"oS_sr4_", (Il2CppMethodPointer)b_oS_sr4_},
    {"oS_ssS_i4_i4o_", (Il2CppMethodPointer)b_oS_ssS_i4_i4o_},
    {"oS_ss_", (Il2CppMethodPointer)b_oS_ss_},
    {"oS_ss_o", (Il2CppMethodPointer)b_oS_ss_o},
    {"oS_ss_oo", (Il2CppMethodPointer)b_oS_ss_oo},
    {"oS_ssb_", (Il2CppMethodPointer)b_oS_ssb_},
    {"oS_ssi4_", (Il2CppMethodPointer)b_oS_ssi4_},
    {"oS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_oS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_},
    {"oS_sso_", (Il2CppMethodPointer)b_oS_sso_},
    {"oS_ssob_", (Il2CppMethodPointer)b_oS_ssob_},
    {"oS_ssoo_", (Il2CppMethodPointer)b_oS_ssoo_},
    {"oS_sss_", (Il2CppMethodPointer)b_oS_sss_},
    {"oS_sssi4i4i4_", (Il2CppMethodPointer)b_oS_sssi4i4i4_},
    {"oS_sssi4i4osS_r4r4r4r4_oi4O_", (Il2CppMethodPointer)b_oS_sssi4i4osS_r4r4r4r4_oi4O_},
    {"oS_ssss_", (Il2CppMethodPointer)b_oS_ssss_},
    {"oS_sssss_", (Il2CppMethodPointer)b_oS_sssss_},
    {"oS_sssssss_", (Il2CppMethodPointer)b_oS_sssssss_},
    {"oS_ssu1_", (Il2CppMethodPointer)b_oS_ssu1_},
    {"oS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_", (Il2CppMethodPointer)b_oS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_},
    {"oS_su4_", (Il2CppMethodPointer)b_oS_su4_},
    {"oS_su4so_", (Il2CppMethodPointer)b_oS_su4so_},
    {"oS_u2S_i4u1u1u1u1_su2_", (Il2CppMethodPointer)b_oS_u2S_i4u1u1u1u1_su2_},
    {"oS_u2u2i4_", (Il2CppMethodPointer)b_oS_u2u2i4_},
    {"oS_u4S_r4r4_u4S_r4r4__", (Il2CppMethodPointer)b_oS_u4S_r4r4_u4S_r4r4__},
    {"oS_u4i4i4_", (Il2CppMethodPointer)b_oS_u4i4i4_},
    {"oS_u4o_", (Il2CppMethodPointer)b_oS_u4o_},
    {"oS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_oS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_},
    {"oS_u4u4u4u4_", (Il2CppMethodPointer)b_oS_u4u4u4u4_},
    {"oS_u8_", (Il2CppMethodPointer)b_oS_u8_},
    {"oS_u8b_", (Il2CppMethodPointer)b_oS_u8b_},
    {"oS_u8i4i4S_u4u4_S_i4i4i4i4_s_", (Il2CppMethodPointer)b_oS_u8i4i4S_u4u4_S_i4i4i4i4_s_},
    {"oS_u8u4_", (Il2CppMethodPointer)b_oS_u8u4_},
    {"oS_u8u8_", (Il2CppMethodPointer)b_oS_u8u8_},
    {"ob", (Il2CppMethodPointer)b_ob},
    {"oc", (Il2CppMethodPointer)b_oc},
    {"oi2", (Il2CppMethodPointer)b_oi2},
    {"oi4", (Il2CppMethodPointer)b_oi4},
    {"oi4S_r4r4r4_r4", (Il2CppMethodPointer)b_oi4S_r4r4r4_r4},
    {"oi4oo", (Il2CppMethodPointer)b_oi4oo},
    {"oi4s", (Il2CppMethodPointer)b_oi4s},
    {"oi4soO", (Il2CppMethodPointer)b_oi4soO},
    {"oi8", (Il2CppMethodPointer)b_oi8},
    {"oi8oo", (Il2CppMethodPointer)b_oi8oo},
    {"oo", (Il2CppMethodPointer)b_oo},
    {"ooO", (Il2CppMethodPointer)b_ooO},
    {"ooS_r4r4_", (Il2CppMethodPointer)b_ooS_r4r4_},
    {"oobb", (Il2CppMethodPointer)b_oobb},
    {"ooi4", (Il2CppMethodPointer)b_ooi4},
    {"ooi4S_r4r4_ooPi4", (Il2CppMethodPointer)b_ooi4S_r4r4_ooPi4},
    {"ooi4i4S_o_", (Il2CppMethodPointer)b_ooi4i4S_o_},
    {"ooo", (Il2CppMethodPointer)b_ooo},
    {"oooO", (Il2CppMethodPointer)b_oooO},
    {"oooS_r4r4_i4", (Il2CppMethodPointer)b_oooS_r4r4_i4},
    {"oooi4", (Il2CppMethodPointer)b_oooi4},
    {"oooi8o", (Il2CppMethodPointer)b_oooi8o},
    {"oooo", (Il2CppMethodPointer)b_oooo},
    {"ooooO", (Il2CppMethodPointer)b_ooooO},
    {"ooooo", (Il2CppMethodPointer)b_ooooo},
    {"oooooO", (Il2CppMethodPointer)b_oooooO},
    {"oooooo", (Il2CppMethodPointer)b_oooooo},
    {"ooooooo", (Il2CppMethodPointer)b_ooooooo},
    {"oooooooo", (Il2CppMethodPointer)b_oooooooo},
    {"ooooooooo", (Il2CppMethodPointer)b_ooooooooo},
    {"oooooooooo", (Il2CppMethodPointer)b_oooooooooo},
    {"ooooooooooo", (Il2CppMethodPointer)b_ooooooooooo},
    {"oooooooooooo", (Il2CppMethodPointer)b_oooooooooooo},
    {"ooooooooooooo", (Il2CppMethodPointer)b_ooooooooooooo},
    {"oooooooooooooo", (Il2CppMethodPointer)b_oooooooooooooo},
    {"ooooooooooooooo", (Il2CppMethodPointer)b_ooooooooooooooo},
    {"oooooooooooooooo", (Il2CppMethodPointer)b_oooooooooooooooo},
    {"oop", (Il2CppMethodPointer)b_oop},
    {"oos", (Il2CppMethodPointer)b_oos},
    {"oosPS_si4i4_oi4o", (Il2CppMethodPointer)b_oosPS_si4i4_oi4o},
    {"oosb", (Il2CppMethodPointer)b_oosb},
    {"ooso", (Il2CppMethodPointer)b_ooso},
    {"oosu8", (Il2CppMethodPointer)b_oosu8},
    {"oou4u4", (Il2CppMethodPointer)b_oou4u4},
    {"op", (Il2CppMethodPointer)b_op},
    {"or4", (Il2CppMethodPointer)b_or4},
    {"or8", (Il2CppMethodPointer)b_or8},
    {"os", (Il2CppMethodPointer)b_os},
    {"osi4o", (Il2CppMethodPointer)b_osi4o},
    {"oso", (Il2CppMethodPointer)b_oso},
    {"osoo", (Il2CppMethodPointer)b_osoo},
    {"osooo", (Il2CppMethodPointer)b_osooo},
    {"oss", (Il2CppMethodPointer)b_oss},
    {"ou1", (Il2CppMethodPointer)b_ou1},
    {"ou2", (Il2CppMethodPointer)b_ou2},
    {"ou4", (Il2CppMethodPointer)b_ou4},
    {"ou8", (Il2CppMethodPointer)b_ou8},
    {"pPS__Pu1pPS_u4u4u8_", (Il2CppMethodPointer)b_pPS__Pu1pPS_u4u4u8_},
    {"pPvPu1pPS_u4u4u8_", (Il2CppMethodPointer)b_pPvPu1pPS_u4u4u8_},
    {"pS_u8_Pu1pPS_u4u4u8_", (Il2CppMethodPointer)b_pS_u8_Pu1pPS_u4u4u8_},
    {"pp", (Il2CppMethodPointer)b_pp},
    {"ppPu4", (Il2CppMethodPointer)b_ppPu4},
    {"ppb", (Il2CppMethodPointer)b_ppb},
    {"ppi4", (Il2CppMethodPointer)b_ppi4},
    {"ppi8", (Il2CppMethodPointer)b_ppi8},
    {"ppopo", (Il2CppMethodPointer)b_ppopo},
    {"ppp", (Il2CppMethodPointer)b_ppp},
    {"pppPp", (Il2CppMethodPointer)b_pppPp},
    {"pppi4i8", (Il2CppMethodPointer)b_pppi4i8},
    {"pppp", (Il2CppMethodPointer)b_pppp},
    {"ppppPp", (Il2CppMethodPointer)b_ppppPp},
    {"ppppb", (Il2CppMethodPointer)b_ppppb},
    {"ppppi4o", (Il2CppMethodPointer)b_ppppi4o},
    {"pppps", (Il2CppMethodPointer)b_pppps},
    {"ppps", (Il2CppMethodPointer)b_ppps},
    {"pppu4", (Il2CppMethodPointer)b_pppu4},
    {"ppr8", (Il2CppMethodPointer)b_ppr8},
    {"ppsp", (Il2CppMethodPointer)b_ppsp},
    {"ppu4", (Il2CppMethodPointer)b_ppu4},
    {"ppu8", (Il2CppMethodPointer)b_ppu8},
    {"r4", (Il2CppMethodPointer)b_r4},
    {"r4PS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4r4", (Il2CppMethodPointer)b_r4PS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4r4},
    {"r4S_r4r4_", (Il2CppMethodPointer)b_r4S_r4r4_},
    {"r4S_r4r4r4_", (Il2CppMethodPointer)b_r4S_r4r4r4_},
    {"r4S_r4r4r4r4_", (Il2CppMethodPointer)b_r4S_r4r4r4r4_},
    {"r4S_r4r4r4r4_i4r4", (Il2CppMethodPointer)b_r4S_r4r4r4r4_i4r4},
    {"r4i4", (Il2CppMethodPointer)b_r4i4},
    {"r4o", (Il2CppMethodPointer)b_r4o},
    {"r4oS_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_r4oS_PS_S_i4u2u2r8i4___},
    {"r4oi4oo", (Il2CppMethodPointer)b_r4oi4oo},
    {"r4ooS_r4r4r4_", (Il2CppMethodPointer)b_r4ooS_r4r4r4_},
    {"r4or4S_r4r4r4_", (Il2CppMethodPointer)b_r4or4S_r4r4r4_},
    {"r4os", (Il2CppMethodPointer)b_r4os},
    {"r4r4", (Il2CppMethodPointer)b_r4r4},
    {"r4r4PS_r4r4r4r4_", (Il2CppMethodPointer)b_r4r4PS_r4r4r4r4_},
    {"r4r4r4r4", (Il2CppMethodPointer)b_r4r4r4r4},
    {"r4r4r4r4r4", (Il2CppMethodPointer)b_r4r4r4r4r4},
    {"r4s", (Il2CppMethodPointer)b_r4s},
    {"r8", (Il2CppMethodPointer)b_r8},
    {"r8o", (Il2CppMethodPointer)b_r8o},
    {"r8os", (Il2CppMethodPointer)b_r8os},
    {"r8pp", (Il2CppMethodPointer)b_r8pp},
    {"s", (Il2CppMethodPointer)b_s},
    {"sO", (Il2CppMethodPointer)b_sO},
    {"sPS_sssssss_so", (Il2CppMethodPointer)b_sPS_sssssss_so},
    {"sS_oS_i4_osS_i4u1u1u1u1__", (Il2CppMethodPointer)b_sS_oS_i4_osS_i4u1u1u1u1__},
    {"si4", (Il2CppMethodPointer)b_si4},
    {"so", (Il2CppMethodPointer)b_so},
    {"sob", (Il2CppMethodPointer)b_sob},
    {"soo", (Il2CppMethodPointer)b_soo},
    {"sooO", (Il2CppMethodPointer)b_sooO},
    {"sos", (Il2CppMethodPointer)b_sos},
    {"sou4u4", (Il2CppMethodPointer)b_sou4u4},
    {"ss", (Il2CppMethodPointer)b_ss},
    {"sso", (Il2CppMethodPointer)b_sso},
    {"sss", (Il2CppMethodPointer)b_sss},
    {"ssso", (Il2CppMethodPointer)b_ssso},
    {"u1", (Il2CppMethodPointer)b_u1},
    {"u2os", (Il2CppMethodPointer)b_u2os},
    {"u4", (Il2CppMethodPointer)b_u4},
    {"u4PS__PS_u4u4u8_", (Il2CppMethodPointer)b_u4PS__PS_u4u4u8_},
    {"u4PvS_u8_PS_u4u4u8_", (Il2CppMethodPointer)b_u4PvS_u8_PS_u4u4u8_},
    {"u4PvS_u8_u4PS_u4u4u8_", (Il2CppMethodPointer)b_u4PvS_u8_u4PS_u4u4u8_},
    {"u4S_u8_Pu1poPvPS_u4u4u8_", (Il2CppMethodPointer)b_u4S_u8_Pu1poPvPS_u4u4u8_},
    {"u4S_u8_S_u8_Pu1poPvPS_u4u4u8_", (Il2CppMethodPointer)b_u4S_u8_S_u8_Pu1poPvPS_u4u4u8_},
    {"u4os", (Il2CppMethodPointer)b_u4os},
    {"u4pp", (Il2CppMethodPointer)b_u4pp},
    {"u4u4pu4", (Il2CppMethodPointer)b_u4u4pu4},
    {"u8", (Il2CppMethodPointer)b_u8},
    {"u8Pu1Pu1i8Pu1", (Il2CppMethodPointer)b_u8Pu1Pu1i8Pu1},
    {"u8o", (Il2CppMethodPointer)b_u8o},
    {"u8os", (Il2CppMethodPointer)b_u8os},
    {"u8ou4u4", (Il2CppMethodPointer)b_u8ou4u4},
    {"u8pp", (Il2CppMethodPointer)b_u8pp},
    {"v", (Il2CppMethodPointer)b_v},
    {"vO", (Il2CppMethodPointer)b_vO},
    {"vODo", (Il2CppMethodPointer)b_vODo},
    {"vOO", (Il2CppMethodPointer)b_vOO},
    {"vOS_Oi4_", (Il2CppMethodPointer)b_vOS_Oi4_},
    {"vOS_Oi4_o", (Il2CppMethodPointer)b_vOS_Oi4_o},
    {"vOS_S_S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_s__", (Il2CppMethodPointer)b_vOS_S_S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_oi4_s__},
    {"vOS_ooo_", (Il2CppMethodPointer)b_vOS_ooo_},
    {"vOb", (Il2CppMethodPointer)b_vOb},
    {"vOi4", (Il2CppMethodPointer)b_vOi4},
    {"vOo", (Il2CppMethodPointer)b_vOo},
    {"vOoi4", (Il2CppMethodPointer)b_vOoi4},
    {"vOsO", (Il2CppMethodPointer)b_vOsO},
    {"vPS_Pi4PS_S_r4r4r4_S_r4r4r4__PS_r4r4r4r4_Pi4Pu4Pi4Pi4PS_u4_Pi4Pi4Pi2Pi4Pi2Pi4Pi4PS_u8_i4Pi4i4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Pi4i4Pi4Pi2Pi4i4PS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_i4Pi4i4Pi4PS_u4_Pi4i4_ooo", (Il2CppMethodPointer)b_vPS_Pi4PS_S_r4r4r4_S_r4r4r4__PS_r4r4r4r4_Pi4Pu4Pi4Pi4PS_u4_Pi4Pi4Pi2Pi4Pi2Pi4Pi4PS_u8_i4Pi4i4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Pi4i4Pi4Pi2Pi4i4PS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_i4Pi4i4Pi4PS_u4_Pi4i4_ooo},
    {"vPS_Pi4Pi4Pi4Pi4PS_r4r4r4_Pr4Pi2PbPu1i4Pi4i4Pi2Pr4Pr4i4_o", (Il2CppMethodPointer)b_vPS_Pi4Pi4Pi4Pi4PS_r4r4r4_Pr4Pi2PbPu1i4Pi4i4Pi2Pr4Pr4i4_o},
    {"vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__oo", (Il2CppMethodPointer)b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__oo},
    {"vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__},
    {"vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_vPS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__},
    {"vPS_S_i4i4S_i4___", (Il2CppMethodPointer)b_vPS_S_i4i4S_i4___},
    {"vPS_S_i4i4_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___i4_", (Il2CppMethodPointer)b_vPS_S_i4i4_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___i4_},
    {"vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___N_bS_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4_____", (Il2CppMethodPointer)b_vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4___N_bS_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4_____},
    {"vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____", (Il2CppMethodPointer)b_vPS_S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____},
    {"vPS__", (Il2CppMethodPointer)b_vPS__},
    {"vPS__PS_u4u4u8_", (Il2CppMethodPointer)b_vPS__PS_u4u4u8_},
    {"vPS__Pu1pPS_u4u4u8_", (Il2CppMethodPointer)b_vPS__Pu1pPS_u4u4u8_},
    {"vPS__Pu4pPS_u4u4u8_", (Il2CppMethodPointer)b_vPS__Pu4pPS_u4u4u8_},
    {"vPS__S_u8_PS_u4u4u8_", (Il2CppMethodPointer)b_vPS__S_u8_PS_u4u4u8_},
    {"vPS__oPvPS_u4u4u8_", (Il2CppMethodPointer)b_vPS__oPvPS_u4u4u8_},
    {"vPS__u4", (Il2CppMethodPointer)b_vPS__u4},
    {"vPS_i4_", (Il2CppMethodPointer)b_vPS_i4_},
    {"vPS_i4i4_i4", (Il2CppMethodPointer)b_vPS_i4i4_i4},
    {"vPS_i4i4i4_i4", (Il2CppMethodPointer)b_vPS_i4i4i4_i4},
    {"vPS_i4i4i4i4_i4", (Il2CppMethodPointer)b_vPS_i4i4i4i4_i4},
    {"vPS_oS_i4S_i4_S_i4___", (Il2CppMethodPointer)b_vPS_oS_i4S_i4_S_i4___},
    {"vPS_oS_i4S_i4___", (Il2CppMethodPointer)b_vPS_oS_i4S_i4___},
    {"vPS_oS_i4i4i4i4S_i4_S_i4__S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____", (Il2CppMethodPointer)b_vPS_oS_i4i4i4i4S_i4_S_i4__S_oS_i4S_i4_S_i4_S_i4_S_i4_S_i4_S_i4____},
    {"vPS_r4r4_r4", (Il2CppMethodPointer)b_vPS_r4r4_r4},
    {"vPS_r4r4r4_r4", (Il2CppMethodPointer)b_vPS_r4r4r4_r4},
    {"vPS_r4r4r4r4_r4", (Il2CppMethodPointer)b_vPS_r4r4r4r4_r4},
    {"vPS_r4r4r4r4i4i4r4r4_", (Il2CppMethodPointer)b_vPS_r4r4r4r4i4i4r4r4_},
    {"vPS_si4i4_", (Il2CppMethodPointer)b_vPS_si4i4_},
    {"vPS_u4u4u8_u4", (Il2CppMethodPointer)b_vPS_u4u4u8_u4},
    {"vPr4Pb", (Il2CppMethodPointer)b_vPr4Pb},
    {"vPu1Pu1i8Pu1PS_u4u4u4u4_", (Il2CppMethodPointer)b_vPu1Pu1i8Pu1PS_u4u4u4u4_},
    {"vPu1pPS_u4u4u8_", (Il2CppMethodPointer)b_vPu1pPS_u4u4u8_},
    {"vPvPS__Pu1p", (Il2CppMethodPointer)b_vPvPS__Pu1p},
    {"vPvPS__Pu1pPS__pPS_u8_PS_u8_PS_u4u4u8_", (Il2CppMethodPointer)b_vPvPS__Pu1pPS__pPS_u8_PS_u8_PS_u4u4u8_},
    {"vS_OS_oi4__", (Il2CppMethodPointer)b_vS_OS_oi4__},
    {"vS_Oi4_", (Il2CppMethodPointer)b_vS_Oi4_},
    {"vS_Oi8_", (Il2CppMethodPointer)b_vS_Oi8_},
    {"vS_Oi8i8S_r4r4r4r4__", (Il2CppMethodPointer)b_vS_Oi8i8S_r4r4r4r4__},
    {"vS_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_vS_PS_S_i4u2u2r8i4___},
    {"vS_PS_S_i4u2u2r8i4___o", (Il2CppMethodPointer)b_vS_PS_S_i4u2u2r8i4___o},
    {"vS_Pu1i4i4i4i4S_pi4i4__", (Il2CppMethodPointer)b_vS_Pu1i4i4i4i4S_pi4i4__},
    {"vS_Pvi4i4i4S_pi4i4_i4_", (Il2CppMethodPointer)b_vS_Pvi4i4i4S_pi4i4_i4_},
    {"vS_S_Oi4i4__", (Il2CppMethodPointer)b_vS_S_Oi4i4__},
    {"vS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_vS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__},
    {"vS_S_Pvi4i4i4S_pi4i4_i4_i4_", (Il2CppMethodPointer)b_vS_S_Pvi4i4i4S_pi4i4_i4_i4_},
    {"vS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_", (Il2CppMethodPointer)b_vS_S_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_S_i4i4_i4_S_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_S_i4i4i4i4_i4_S_i4i4_S_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_S_S_u4i4i4_i4i4i4_i4_S_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_S_S_u4i4i4_i4i4bi4i4_i4_i4i4i4i4i4i4i4i4i4i4bbbi4i4i4_},
    {"vS_S_S_p__i4_", (Il2CppMethodPointer)b_vS_S_S_p__i4_},
    {"vS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_vS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4__o_},
    {"vS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_", (Il2CppMethodPointer)b_vS_S_S_r4r4r4_S_r4r4r4__i4i4i4i4i4i4_},
    {"vS_S_S_u4i4i4_b_i4_", (Il2CppMethodPointer)b_vS_S_S_u4i4i4_b_i4_},
    {"vS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__", (Il2CppMethodPointer)b_vS_S_S_u4u4u4u4_i8i4s_S_su8u8_S_su8u8__},
    {"vS_S_S_u4u4u4u4_i8i4s_o_", (Il2CppMethodPointer)b_vS_S_S_u4u4u4u4_i8i4s_o_},
    {"vS_S_i4i2_S_o__", (Il2CppMethodPointer)b_vS_S_i4i2_S_o__},
    {"vS_S_i4i2_S_r4r4r4r4r4i4__", (Il2CppMethodPointer)b_vS_S_i4i2_S_r4r4r4r4r4i4__},
    {"vS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_vS_S_i4i4i4_i4oooooooooooi4i4i4ooS_S_r4r4r4_S_r4r4r4___},
    {"vS_S_ooi4_i4i4_", (Il2CppMethodPointer)b_vS_S_ooi4_i4i4_},
    {"vS_S_oooo_ooi4_o", (Il2CppMethodPointer)b_vS_S_oooo_ooi4_o},
    {"vS_S_oooo_ooi4_oo", (Il2CppMethodPointer)b_vS_S_oooo_ooi4_oo},
    {"vS_S_p_i4_o", (Il2CppMethodPointer)b_vS_S_p_i4_o},
    {"vS_S_pu4__", (Il2CppMethodPointer)b_vS_S_pu4__},
    {"vS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_", (Il2CppMethodPointer)b_vS_S_r4r4_S_r4r4_S_r4r4_r4r4i4_},
    {"vS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_", (Il2CppMethodPointer)b_vS_S_r4r4_S_r4r4_S_r4r4_r4r4r4r4r4i4i4i4i4i4_},
    {"vS_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_vS_S_r4r4_S_r4r4__},
    {"vS_S_r4r4_oi4_", (Il2CppMethodPointer)b_vS_S_r4r4_oi4_},
    {"vS_S_r4r4_r4_", (Il2CppMethodPointer)b_vS_S_r4r4_r4_},
    {"vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_S_r4r4r4r4___},
    {"vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_},
    {"vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4_},
    {"vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4i4r4_},
    {"vS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4__},
    {"vS_S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4__},
    {"vS_S_r4r4r4_S_r4r4r4_r4i4b_", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4_r4i4b_},
    {"vS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_vS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4__},
    {"vS_S_r4r4r4_r4_", (Il2CppMethodPointer)b_vS_S_r4r4r4_r4_},
    {"vS_S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_vS_S_r4r4r4r4_S_r4r4r4r4__},
    {"vS_S_r4r4r4r4_S_r4r4r4r4_o_", (Il2CppMethodPointer)b_vS_S_r4r4r4r4_S_r4r4r4r4_o_},
    {"vS_S_r4r4r4r4_i4_", (Il2CppMethodPointer)b_vS_S_r4r4r4r4_i4_},
    {"vS_S_r4r4r4r4_r4_", (Il2CppMethodPointer)b_vS_S_r4r4r4r4_r4_},
    {"vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_", (Il2CppMethodPointer)b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_i4i4i4i4i4_},
    {"vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_", (Il2CppMethodPointer)b_vS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_oi4S_r4r4_b_},
    {"vS_S_s_s_", (Il2CppMethodPointer)b_vS_S_s_s_},
    {"vS_S_ss_S_o__", (Il2CppMethodPointer)b_vS_S_ss_S_o__},
    {"vS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_", (Il2CppMethodPointer)b_vS_S_u4S_r4r4r4r4__S_u4S_r4r4r4r4__i4_},
    {"vS_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_vS_S_u4u4Ob_ob_},
    {"vS_S_u4u4_i8u8b_", (Il2CppMethodPointer)b_vS_S_u4u4_i8u8b_},
    {"vS_S_u4u4_o_", (Il2CppMethodPointer)b_vS_S_u4u4_o_},
    {"vS_S_u4u4u4u4_i8i4s_", (Il2CppMethodPointer)b_vS_S_u4u4u4u4_i8i4s_},
    {"vS_S_u4u4u4u4_o_", (Il2CppMethodPointer)b_vS_S_u4u4u4u4_o_},
    {"vS_S_u8S_u8u8__bS_O__", (Il2CppMethodPointer)b_vS_S_u8S_u8u8__bS_O__},
    {"vS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__", (Il2CppMethodPointer)b_vS_S_u8S_u8u8__u1S_u1u4u4u4u4u4u4u4u4__},
    {"vS_S_u8u8_i4i4_", (Il2CppMethodPointer)b_vS_S_u8u8_i4i4_},
    {"vS_S_u8u8_ooi4i4u8S_r4r4r4_S_r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_vS_S_u8u8_ooi4i4u8S_r4r4r4_S_r4r4r4r4_S_r4r4r4__},
    {"vS__", (Il2CppMethodPointer)b_vS__},
    {"vS_bsi4bb_", (Il2CppMethodPointer)b_vS_bsi4bb_},
    {"vS_bssos_", (Il2CppMethodPointer)b_vS_bssos_},
    {"vS_i4S_c__", (Il2CppMethodPointer)b_vS_i4S_c__},
    {"vS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_vS_i4S_i4i4_S_Pvi4i4i4S_pi4i4_i4_i4S_Pvi4i4i4S_pi4i4_i4_S_i4i4_S_i4i4_oi4oboS_Pvi4i4i4S_pi4i4_i4__},
    {"vS_i4S_r4r4_i4_", (Il2CppMethodPointer)b_vS_i4S_r4r4_i4_},
    {"vS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_", (Il2CppMethodPointer)b_vS_i4S_r4r4r4r4_soS_r4r4r4r4_oo_},
    {"vS_i4_", (Il2CppMethodPointer)b_vS_i4_},
    {"vS_i4_S_Pvi4S_pi4i4__", (Il2CppMethodPointer)b_vS_i4_S_Pvi4S_pi4i4__},
    {"vS_i4_S_Pvi4i4i4S_pi4i4_i4_", (Il2CppMethodPointer)b_vS_i4_S_Pvi4i4i4S_pi4i4_i4_},
    {"vS_i4_S_i4_", (Il2CppMethodPointer)b_vS_i4_S_i4_},
    {"vS_i4_b", (Il2CppMethodPointer)b_vS_i4_b},
    {"vS_i4_i4", (Il2CppMethodPointer)b_vS_i4_i4},
    {"vS_i4_i4i4", (Il2CppMethodPointer)b_vS_i4_i4i4},
    {"vS_i4_s", (Il2CppMethodPointer)b_vS_i4_s},
    {"vS_i4b_", (Il2CppMethodPointer)b_vS_i4b_},
    {"vS_i4bi4_", (Il2CppMethodPointer)b_vS_i4bi4_},
    {"vS_i4i2i2u1u1u1u1u1u1u1u1_", (Il2CppMethodPointer)b_vS_i4i2i2u1u1u1u1u1u1u1u1_},
    {"vS_i4i4O_", (Il2CppMethodPointer)b_vS_i4i4O_},
    {"vS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_vS_i4i4S_i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4__},
    {"vS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_", (Il2CppMethodPointer)b_vS_i4i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_i4u8_},
    {"vS_i4i4_", (Il2CppMethodPointer)b_vS_i4i4_},
    {"vS_i4i4_i4", (Il2CppMethodPointer)b_vS_i4i4_i4},
    {"vS_i4i4i4_", (Il2CppMethodPointer)b_vS_i4i4i4_},
    {"vS_i4i4i4i4_", (Il2CppMethodPointer)b_vS_i4i4i4i4_},
    {"vS_i4i4i4i4bS_r4r4r4_or4bS_r4r4r4r4_bobbbS_r4r4r4r4_r4bb_oS_r4r4r4r4_o", (Il2CppMethodPointer)b_vS_i4i4i4i4bS_r4r4r4_or4bS_r4r4r4r4_bobbbS_r4r4r4r4_r4bb_oS_r4r4r4r4_o},
    {"vS_i4i4i4i4i4_", (Il2CppMethodPointer)b_vS_i4i4i4i4i4_},
    {"vS_i4i4i4i4i4i4i4i4_", (Il2CppMethodPointer)b_vS_i4i4i4i4i4i4i4i4_},
    {"vS_i4i4i4pi4i4i4_o", (Il2CppMethodPointer)b_vS_i4i4i4pi4i4i4_o},
    {"vS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__", (Il2CppMethodPointer)b_vS_i4i4r4S_r4i4_S_r4r4r4r4_S_p_S_i4S_r4i4__S_i4i4__},
    {"vS_i4i4r4r4_", (Il2CppMethodPointer)b_vS_i4i4r4r4_},
    {"vS_i4i4s_", (Il2CppMethodPointer)b_vS_i4i4s_},
    {"vS_i4i4sb_", (Il2CppMethodPointer)b_vS_i4i4sb_},
    {"vS_i4i4ssi4b_", (Il2CppMethodPointer)b_vS_i4i4ssi4b_},
    {"vS_i4i4u8_", (Il2CppMethodPointer)b_vS_i4i4u8_},
    {"vS_i4i8_", (Il2CppMethodPointer)b_vS_i4i8_},
    {"vS_i4i8_o", (Il2CppMethodPointer)b_vS_i4i8_o},
    {"vS_i4oOi4_", (Il2CppMethodPointer)b_vS_i4oOi4_},
    {"vS_i4o_", (Il2CppMethodPointer)b_vS_i4o_},
    {"vS_i4oo_", (Il2CppMethodPointer)b_vS_i4oo_},
    {"vS_i4oor4_", (Il2CppMethodPointer)b_vS_i4oor4_},
    {"vS_i4osS_u8_S_i8__", (Il2CppMethodPointer)b_vS_i4osS_u8_S_i8__},
    {"vS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_vS_i4ppi4i4i4oi4S_r4r4r4r4_S_r4r4r4r4__},
    {"vS_i4r4_", (Il2CppMethodPointer)b_vS_i4r4_},
    {"vS_i4r4i4i4i4i4S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_vS_i4r4i4i4i4i4S_r4r4_S_r4r4__},
    {"vS_i4r8i4s_", (Il2CppMethodPointer)b_vS_i4r8i4s_},
    {"vS_i4s_", (Il2CppMethodPointer)b_vS_i4s_},
    {"vS_i4si4O_", (Il2CppMethodPointer)b_vS_i4si4O_},
    {"vS_i4si4_", (Il2CppMethodPointer)b_vS_i4si4_},
    {"vS_i4sr4S_r4i4_b_", (Il2CppMethodPointer)b_vS_i4sr4S_r4i4_b_},
    {"vS_i4ss_", (Il2CppMethodPointer)b_vS_i4ss_},
    {"vS_i4ssb_", (Il2CppMethodPointer)b_vS_i4ssb_},
    {"vS_i4u1u1_", (Il2CppMethodPointer)b_vS_i4u1u1_},
    {"vS_i4u1u1u1u1_", (Il2CppMethodPointer)b_vS_i4u1u1u1u1_},
    {"vS_i4u2u2so_", (Il2CppMethodPointer)b_vS_i4u2u2so_},
    {"vS_i4u4u1_", (Il2CppMethodPointer)b_vS_i4u4u1_},
    {"vS_i4u8ss_", (Il2CppMethodPointer)b_vS_i4u8ss_},
    {"vS_i8i4i4i4i4_", (Il2CppMethodPointer)b_vS_i8i4i4i4i4_},
    {"vS_i8i4u1i4r8S_i4i4i4i4i4pi4__", (Il2CppMethodPointer)b_vS_i8i4u1i4r8S_i4i4i4i4i4pi4__},
    {"vS_i8i8S_Oi8i8S_r4r4r4r4___", (Il2CppMethodPointer)b_vS_i8i8S_Oi8i8S_r4r4r4r4___},
    {"vS_i8i8_", (Il2CppMethodPointer)b_vS_i8i8_},
    {"vS_i8i8i8_", (Il2CppMethodPointer)b_vS_i8i8i8_},
    {"vS_i8i8o_", (Il2CppMethodPointer)b_vS_i8i8o_},
    {"vS_i8oo_", (Il2CppMethodPointer)b_vS_i8oo_},
    {"vS_i8s_", (Il2CppMethodPointer)b_vS_i8s_},
    {"vS_oO_", (Il2CppMethodPointer)b_vS_oO_},
    {"vS_oS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_vS_oS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__},
    {"vS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_vS_oS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4r4_S_S_r4r4r4_S_r4r4r4___},
    {"vS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_", (Il2CppMethodPointer)b_vS_oS_S_r4r4r4_S_r4r4r4__S_S_r4r4r4_S_r4r4r4__o_},
    {"vS_oS_S_r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_vS_oS_S_r4r4r4_S_r4r4r4___},
    {"vS_oS_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4___oob", (Il2CppMethodPointer)b_vS_oS_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4__S_S_r4r4r4_S_r4r4r4r4___oob},
    {"vS_oS_i4i4__", (Il2CppMethodPointer)b_vS_oS_i4i4__},
    {"vS_oS_i4r4o_r4_", (Il2CppMethodPointer)b_vS_oS_i4r4o_r4_},
    {"vS_oS_r4r4r4_S_r4r4_r4_", (Il2CppMethodPointer)b_vS_oS_r4r4r4_S_r4r4_r4_},
    {"vS_oS_r4r4r4__", (Il2CppMethodPointer)b_vS_oS_r4r4r4__},
    {"vS_oS_r4r4r4r4_bbo_", (Il2CppMethodPointer)b_vS_oS_r4r4r4r4_bbo_},
    {"vS_oS_u4u4_o_", (Il2CppMethodPointer)b_vS_oS_u4u4_o_},
    {"vS_o_", (Il2CppMethodPointer)b_vS_o_},
    {"vS_ob_", (Il2CppMethodPointer)b_vS_ob_},
    {"vS_obi4_", (Il2CppMethodPointer)b_vS_obi4_},
    {"vS_oi4_", (Il2CppMethodPointer)b_vS_oi4_},
    {"vS_oi4i4_", (Il2CppMethodPointer)b_vS_oi4i4_},
    {"vS_oi4o_", (Il2CppMethodPointer)b_vS_oi4o_},
    {"vS_oi4r4_", (Il2CppMethodPointer)b_vS_oi4r4_},
    {"vS_oi4s_", (Il2CppMethodPointer)b_vS_oi4s_},
    {"vS_oi4s_o", (Il2CppMethodPointer)b_vS_oi4s_o},
    {"vS_oi4u4_", (Il2CppMethodPointer)b_vS_oi4u4_},
    {"vS_oo_", (Il2CppMethodPointer)b_vS_oo_},
    {"vS_oobsoobr4_", (Il2CppMethodPointer)b_vS_oobsoobr4_},
    {"vS_ooi4_", (Il2CppMethodPointer)b_vS_ooi4_},
    {"vS_ooi4b_", (Il2CppMethodPointer)b_vS_ooi4b_},
    {"vS_oooObS_r4r4r4r4_bb_", (Il2CppMethodPointer)b_vS_oooObS_r4r4r4r4_bb_},
    {"vS_oooObS_r4r4r4r4_bb_o", (Il2CppMethodPointer)b_vS_oooObS_r4r4r4r4_bb_o},
    {"vS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_", (Il2CppMethodPointer)b_vS_oooS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_i4i4i4i4i4r4r4i4i4i4i4i4bbbb_},
    {"vS_ooo_", (Il2CppMethodPointer)b_vS_ooo_},
    {"vS_oooi4_", (Il2CppMethodPointer)b_vS_oooi4_},
    {"vS_oooi4s_", (Il2CppMethodPointer)b_vS_oooi4s_},
    {"vS_ooooi4b_", (Il2CppMethodPointer)b_vS_ooooi4b_},
    {"vS_oor4r4_", (Il2CppMethodPointer)b_vS_oor4r4_},
    {"vS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_", (Il2CppMethodPointer)b_vS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_},
    {"vS_or4_", (Il2CppMethodPointer)b_vS_or4_},
    {"vS_or4r4S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_vS_or4r4S_r4r4r4_S_r4r4r4__},
    {"vS_os_", (Il2CppMethodPointer)b_vS_os_},
    {"vS_osi4_", (Il2CppMethodPointer)b_vS_osi4_},
    {"vS_oso_", (Il2CppMethodPointer)b_vS_oso_},
    {"vS_ossS_u4u4u4u4__", (Il2CppMethodPointer)b_vS_ossS_u4u4u4u4__},
    {"vS_ossi4i4i4i4o_", (Il2CppMethodPointer)b_vS_ossi4i4i4i4o_},
    {"vS_ou4_", (Il2CppMethodPointer)b_vS_ou4_},
    {"vS_ou4os_", (Il2CppMethodPointer)b_vS_ou4os_},
    {"vS_ou4u4u4u4u4u4u8u8_", (Il2CppMethodPointer)b_vS_ou4u4u4u4u4u4u8u8_},
    {"vS_pS_pi4i4__o", (Il2CppMethodPointer)b_vS_pS_pi4i4__o},
    {"vS_pi4_", (Il2CppMethodPointer)b_vS_pi4_},
    {"vS_pi4i4_", (Il2CppMethodPointer)b_vS_pi4i4_},
    {"vS_pu4_", (Il2CppMethodPointer)b_vS_pu4_},
    {"vS_pu4u4u4u4_", (Il2CppMethodPointer)b_vS_pu4u4u4u4_},
    {"vS_r4S_oS_r4r4r4_r4__", (Il2CppMethodPointer)b_vS_r4S_oS_r4r4r4_r4__},
    {"vS_r4S_r4__", (Il2CppMethodPointer)b_vS_r4S_r4__},
    {"vS_r4S_r4r4r4r4__", (Il2CppMethodPointer)b_vS_r4S_r4r4r4r4__},
    {"vS_r4i4_", (Il2CppMethodPointer)b_vS_r4i4_},
    {"vS_r4o_", (Il2CppMethodPointer)b_vS_r4o_},
    {"vS_r4r4_", (Il2CppMethodPointer)b_vS_r4r4_},
    {"vS_r4r4r4_", (Il2CppMethodPointer)b_vS_r4r4r4_},
    {"vS_r4r4r4_O", (Il2CppMethodPointer)b_vS_r4r4r4_O},
    {"vS_r4r4r4_S_r4r4r4r4_", (Il2CppMethodPointer)b_vS_r4r4r4_S_r4r4r4r4_},
    {"vS_r4r4r4r4_", (Il2CppMethodPointer)b_vS_r4r4r4r4_},
    {"vS_r4r4r4r4_O", (Il2CppMethodPointer)b_vS_r4r4r4r4_O},
    {"vS_r4r4r4r4_i4", (Il2CppMethodPointer)b_vS_r4r4r4r4_i4},
    {"vS_r4r4r4r4_i4bb", (Il2CppMethodPointer)b_vS_r4r4r4r4_i4bb},
    {"vS_r4r4r4r4_o", (Il2CppMethodPointer)b_vS_r4r4r4r4_o},
    {"vS_r4r4r4r4_oo", (Il2CppMethodPointer)b_vS_r4r4r4r4_oo},
    {"vS_r4r4r4r4i4i4i4i4_", (Il2CppMethodPointer)b_vS_r4r4r4r4i4i4i4i4_},
    {"vS_r4r4r4r4r4r4_", (Il2CppMethodPointer)b_vS_r4r4r4r4r4r4_},
    {"vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_", (Il2CppMethodPointer)b_vS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_},
    {"vS_r4s_", (Il2CppMethodPointer)b_vS_r4s_},
    {"vS_r8obi2_", (Il2CppMethodPointer)b_vS_r8obi2_},
    {"vS_r8r8_", (Il2CppMethodPointer)b_vS_r8r8_},
    {"vS_sO_", (Il2CppMethodPointer)b_vS_sO_},
    {"vS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___", (Il2CppMethodPointer)b_vS_sS_S_r4r4r4_S_r4r4r4r4_S_r4r4r4___},
    {"vS_sS_i4oo__", (Il2CppMethodPointer)b_vS_sS_i4oo__},
    {"vS_sS_o_S_o__", (Il2CppMethodPointer)b_vS_sS_o_S_o__},
    {"vS_sS_oi4i4__", (Il2CppMethodPointer)b_vS_sS_oi4i4__},
    {"vS_sS_r4r4r4_S_r4r4r4r4__", (Il2CppMethodPointer)b_vS_sS_r4r4r4_S_r4r4r4r4__},
    {"vS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__", (Il2CppMethodPointer)b_vS_sS_r4r4r4r4_bbS_r4r4r4r4_S_r4r4_S_r4r4__},
    {"vS_sS_ssob_so_", (Il2CppMethodPointer)b_vS_sS_ssob_so_},
    {"vS_sS_u8__", (Il2CppMethodPointer)b_vS_sS_u8__},
    {"vS_s_", (Il2CppMethodPointer)b_vS_s_},
    {"vS_sb_", (Il2CppMethodPointer)b_vS_sb_},
    {"vS_sbi4i4ooboo_", (Il2CppMethodPointer)b_vS_sbi4i4ooboo_},
    {"vS_si4O_", (Il2CppMethodPointer)b_vS_si4O_},
    {"vS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_", (Il2CppMethodPointer)b_vS_si4S_oooo_S_S_r4r4r4r4_S_r4r4r4r4_r4bS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4_},
    {"vS_si4_", (Il2CppMethodPointer)b_vS_si4_},
    {"vS_si4i4_", (Il2CppMethodPointer)b_vS_si4i4_},
    {"vS_si4i4b_", (Il2CppMethodPointer)b_vS_si4i4b_},
    {"vS_si4i4i4o_", (Il2CppMethodPointer)b_vS_si4i4i4o_},
    {"vS_si4i4o_", (Il2CppMethodPointer)b_vS_si4i4o_},
    {"vS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_vS_si4i4r4i4i4i4i4i4i4sssi4r4i4b_},
    {"vS_si4oobbi4i4i4boo_", (Il2CppMethodPointer)b_vS_si4oobbi4i4i4boo_},
    {"vS_so_", (Il2CppMethodPointer)b_vS_so_},
    {"vS_sob_", (Il2CppMethodPointer)b_vS_sob_},
    {"vS_soi4u4_", (Il2CppMethodPointer)b_vS_soi4u4_},
    {"vS_soo_", (Il2CppMethodPointer)b_vS_soo_},
    {"vS_sosi4_", (Il2CppMethodPointer)b_vS_sosi4_},
    {"vS_soss_", (Il2CppMethodPointer)b_vS_soss_},
    {"vS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__", (Il2CppMethodPointer)b_vS_sr4S_i4S_r4r4_S_r4r4_r4i4r4r4i4S_r4r4_r4r4__},
    {"vS_sr4_", (Il2CppMethodPointer)b_vS_sr4_},
    {"vS_ssS_i4_i4o_", (Il2CppMethodPointer)b_vS_ssS_i4_i4o_},
    {"vS_ss_", (Il2CppMethodPointer)b_vS_ss_},
    {"vS_ssb_", (Il2CppMethodPointer)b_vS_ssb_},
    {"vS_ssi4_", (Il2CppMethodPointer)b_vS_ssi4_},
    {"vS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_", (Il2CppMethodPointer)b_vS_ssi4i4i4i4i4i4i4i4i4sssi4r4i4b_},
    {"vS_sso_", (Il2CppMethodPointer)b_vS_sso_},
    {"vS_ssob_", (Il2CppMethodPointer)b_vS_ssob_},
    {"vS_ssoo_", (Il2CppMethodPointer)b_vS_ssoo_},
    {"vS_sss_", (Il2CppMethodPointer)b_vS_sss_},
    {"vS_sssi4i4i4_", (Il2CppMethodPointer)b_vS_sssi4i4i4_},
    {"vS_sssi4i4osS_r4r4r4r4_oi4O_", (Il2CppMethodPointer)b_vS_sssi4i4osS_r4r4r4r4_oi4O_},
    {"vS_ssss_", (Il2CppMethodPointer)b_vS_ssss_},
    {"vS_sssss_", (Il2CppMethodPointer)b_vS_sssss_},
    {"vS_sssssss_", (Il2CppMethodPointer)b_vS_sssssss_},
    {"vS_ssu1_", (Il2CppMethodPointer)b_vS_ssu1_},
    {"vS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_", (Il2CppMethodPointer)b_vS_ssu8u8u8u8u4bi4i4i4i4r8r8r8_},
    {"vS_su4_", (Il2CppMethodPointer)b_vS_su4_},
    {"vS_su4so_", (Il2CppMethodPointer)b_vS_su4so_},
    {"vS_u2S_i4u1u1u1u1_su2_", (Il2CppMethodPointer)b_vS_u2S_i4u1u1u1u1_su2_},
    {"vS_u2u2i4_", (Il2CppMethodPointer)b_vS_u2u2i4_},
    {"vS_u4S_r4r4_u4S_r4r4__", (Il2CppMethodPointer)b_vS_u4S_r4r4_u4S_r4r4__},
    {"vS_u4_i4o", (Il2CppMethodPointer)b_vS_u4_i4o},
    {"vS_u4i4i4_", (Il2CppMethodPointer)b_vS_u4i4i4_},
    {"vS_u4o_", (Il2CppMethodPointer)b_vS_u4o_},
    {"vS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_", (Il2CppMethodPointer)b_vS_u4u4oS_u4u4Ob_S_u4u4Ob_ob_},
    {"vS_u4u4u4u4_", (Il2CppMethodPointer)b_vS_u4u4u4u4_},
    {"vS_u4u4u4u4_o", (Il2CppMethodPointer)b_vS_u4u4u4u4_o},
    {"vS_u8_", (Il2CppMethodPointer)b_vS_u8_},
    {"vS_u8b_", (Il2CppMethodPointer)b_vS_u8b_},
    {"vS_u8i4i4S_u4u4_S_i4i4i4i4_s_", (Il2CppMethodPointer)b_vS_u8i4i4S_u4u4_S_i4i4i4i4_s_},
    {"vS_u8i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__", (Il2CppMethodPointer)b_vS_u8i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_i4S_r4r4r4_r4r4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4S_u8_u4u8u2u1i4i4p_PS_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4__},
    {"vS_u8u4_", (Il2CppMethodPointer)b_vS_u8u4_},
    {"vS_u8u8_", (Il2CppMethodPointer)b_vS_u8u8_},
    {"vVo", (Il2CppMethodPointer)b_vVo},
    {"vb", (Il2CppMethodPointer)b_vb},
    {"vbO", (Il2CppMethodPointer)b_vbO},
    {"vbbi4", (Il2CppMethodPointer)b_vbbi4},
    {"vbi4", (Il2CppMethodPointer)b_vbi4},
    {"vbo", (Il2CppMethodPointer)b_vbo},
    {"vboob", (Il2CppMethodPointer)b_vboob},
    {"vbs", (Il2CppMethodPointer)b_vbs},
    {"vc", (Il2CppMethodPointer)b_vc},
    {"vi2", (Il2CppMethodPointer)b_vi2},
    {"vi4", (Il2CppMethodPointer)b_vi4},
    {"vi4O", (Il2CppMethodPointer)b_vi4O},
    {"vi4PS_S_Pvi4i4i4S_pi4i4_i4_i8i4b_", (Il2CppMethodPointer)b_vi4PS_S_Pvi4i4i4S_pi4i4_i4_i8i4b_},
    {"vi4S_i4i4_", (Il2CppMethodPointer)b_vi4S_i4i4_},
    {"vi4S_r4r4r4_S_r4r4r4r4_r4i4", (Il2CppMethodPointer)b_vi4S_r4r4r4_S_r4r4r4r4_r4i4},
    {"vi4S_r4r4r4r4_", (Il2CppMethodPointer)b_vi4S_r4r4r4r4_},
    {"vi4b", (Il2CppMethodPointer)b_vi4b},
    {"vi4i4", (Il2CppMethodPointer)b_vi4i4},
    {"vi4i4i4p", (Il2CppMethodPointer)b_vi4i4i4p},
    {"vi4i4soo", (Il2CppMethodPointer)b_vi4i4soo},
    {"vi4i8i8b", (Il2CppMethodPointer)b_vi4i8i8b},
    {"vi4o", (Il2CppMethodPointer)b_vi4o},
    {"vi4oi4", (Il2CppMethodPointer)b_vi4oi4},
    {"vi4popO", (Il2CppMethodPointer)b_vi4popO},
    {"vi4r4", (Il2CppMethodPointer)b_vi4r4},
    {"vi4s", (Il2CppMethodPointer)b_vi4s},
    {"vi4si4S_u8_s", (Il2CppMethodPointer)b_vi4si4S_u8_s},
    {"vi8", (Il2CppMethodPointer)b_vi8},
    {"vi8b", (Il2CppMethodPointer)b_vi8b},
    {"vi8i8", (Il2CppMethodPointer)b_vi8i8},
    {"vi8o", (Il2CppMethodPointer)b_vi8o},
    {"vo", (Il2CppMethodPointer)b_vo},
    {"voO", (Il2CppMethodPointer)b_voO},
    {"voOPi4", (Il2CppMethodPointer)b_voOPi4},
    {"voOoo", (Il2CppMethodPointer)b_voOoo},
    {"voPS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4i4r4i4PS_r4r4_", (Il2CppMethodPointer)b_voPS_S_i4S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1____S_i4PS_i4i4i4Pi4PS_i4i4i4i4PS_Pu1_____S_i4i4__r4i4r4i4PS_r4r4_},
    {"voS_PS_S_i4u2u2r8i4___", (Il2CppMethodPointer)b_voS_PS_S_i4u2u2r8i4___},
    {"voS_Pvi4i4i4S_pi4i4_i4_", (Il2CppMethodPointer)b_voS_Pvi4i4i4S_pi4i4_i4_},
    {"voS_bi4i4_", (Il2CppMethodPointer)b_voS_bi4i4_},
    {"voS_i4_", (Il2CppMethodPointer)b_voS_i4_},
    {"voS_i4_ob", (Il2CppMethodPointer)b_voS_i4_ob},
    {"voS_i4i4i4i4_b", (Il2CppMethodPointer)b_voS_i4i4i4i4_b},
    {"voS_i4i4sS_u4u4__u4r8", (Il2CppMethodPointer)b_voS_i4i4sS_u4u4__u4r8},
    {"voS_oS_i4_osS_i4u1u1u1u1__", (Il2CppMethodPointer)b_voS_oS_i4_osS_i4u1u1u1u1__},
    {"voS_o_", (Il2CppMethodPointer)b_voS_o_},
    {"voS_oo_", (Il2CppMethodPointer)b_voS_oo_},
    {"voS_or4r4S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_voS_or4r4S_r4r4r4_S_r4r4r4__},
    {"voS_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__", (Il2CppMethodPointer)b_voS_or4r4S_r4r4r4_S_r4r4r4__S_or4r4S_r4r4r4_S_r4r4r4__},
    {"voS_r4r4_", (Il2CppMethodPointer)b_voS_r4r4_},
    {"voS_r4r4r4_", (Il2CppMethodPointer)b_voS_r4r4r4_},
    {"voS_r4r4r4r4_", (Il2CppMethodPointer)b_voS_r4r4r4r4_},
    {"voS_sosi4i4i4i4i4i4i4_i4", (Il2CppMethodPointer)b_voS_sosi4i4i4i4i4i4i4_i4},
    {"vob", (Il2CppMethodPointer)b_vob},
    {"vobb", (Il2CppMethodPointer)b_vobb},
    {"voi4", (Il2CppMethodPointer)b_voi4},
    {"voi4Do", (Il2CppMethodPointer)b_voi4Do},
    {"voi4O", (Il2CppMethodPointer)b_voi4O},
    {"voi4S_r4r4_", (Il2CppMethodPointer)b_voi4S_r4r4_},
    {"voi4i4", (Il2CppMethodPointer)b_voi4i4},
    {"voi4o", (Il2CppMethodPointer)b_voi4o},
    {"voi4so", (Il2CppMethodPointer)b_voi4so},
    {"voi8", (Il2CppMethodPointer)b_voi8},
    {"voi8i8i8i8i8i8i8", (Il2CppMethodPointer)b_voi8i8i8i8i8i8i8},
    {"voo", (Il2CppMethodPointer)b_voo},
    {"vooS_S_i4i4S_r4r4__oS_u8__", (Il2CppMethodPointer)b_vooS_S_i4i4S_r4r4__oS_u8__},
    {"voob", (Il2CppMethodPointer)b_voob},
    {"vooi4", (Il2CppMethodPointer)b_vooi4},
    {"vooi4S_r4r4_o", (Il2CppMethodPointer)b_vooi4S_r4r4_o},
    {"vooi8", (Il2CppMethodPointer)b_vooi8},
    {"vooo", (Il2CppMethodPointer)b_vooo},
    {"voooo", (Il2CppMethodPointer)b_voooo},
    {"vooooo", (Il2CppMethodPointer)b_vooooo},
    {"voos", (Il2CppMethodPointer)b_voos},
    {"vor4", (Il2CppMethodPointer)b_vor4},
    {"vor8", (Il2CppMethodPointer)b_vor8},
    {"vor8S_PS_S_i4u2u2r8i4___i8", (Il2CppMethodPointer)b_vor8S_PS_S_i4u2u2r8i4___i8},
    {"vor8i8i4", (Il2CppMethodPointer)b_vor8i8i4},
    {"vos", (Il2CppMethodPointer)b_vos},
    {"vosS_i4i4i4i4_b", (Il2CppMethodPointer)b_vosS_i4i4i4i4_b},
    {"vosb", (Il2CppMethodPointer)b_vosb},
    {"vosbsr4oo", (Il2CppMethodPointer)b_vosbsr4oo},
    {"voso", (Il2CppMethodPointer)b_voso},
    {"voss", (Il2CppMethodPointer)b_voss},
    {"vosu4r8", (Il2CppMethodPointer)b_vosu4r8},
    {"vou4", (Il2CppMethodPointer)b_vou4},
    {"vp", (Il2CppMethodPointer)b_vp},
    {"vpi8", (Il2CppMethodPointer)b_vpi8},
    {"vpp", (Il2CppMethodPointer)b_vpp},
    {"vppp", (Il2CppMethodPointer)b_vppp},
    {"vpppPPu1Pu4Pu8", (Il2CppMethodPointer)b_vpppPPu1Pu4Pu8},
    {"vpppi4", (Il2CppMethodPointer)b_vpppi4},
    {"vpppi4i8", (Il2CppMethodPointer)b_vpppi4i8},
    {"vppsp", (Il2CppMethodPointer)b_vppsp},
    {"vppu4p", (Il2CppMethodPointer)b_vppu4p},
    {"vps", (Il2CppMethodPointer)b_vps},
    {"vpu4u4", (Il2CppMethodPointer)b_vpu4u4},
    {"vr4", (Il2CppMethodPointer)b_vr4},
    {"vr4PS_r4r4r4r4_Pr4Pr4", (Il2CppMethodPointer)b_vr4PS_r4r4r4r4_Pr4Pr4},
    {"vr8", (Il2CppMethodPointer)b_vr8},
    {"vs", (Il2CppMethodPointer)b_vs},
    {"vsN_bi4_", (Il2CppMethodPointer)b_vsN_bi4_},
    {"vsO", (Il2CppMethodPointer)b_vsO},
    {"vsOb", (Il2CppMethodPointer)b_vsOb},
    {"vsOi4", (Il2CppMethodPointer)b_vsOi4},
    {"vsS_r4r4r4r4_", (Il2CppMethodPointer)b_vsS_r4r4r4r4_},
    {"vsb", (Il2CppMethodPointer)b_vsb},
    {"vsbS_S_Pvi4i4i4S_pi4i4_i4_i4i4i4_", (Il2CppMethodPointer)b_vsbS_S_Pvi4i4i4S_pi4i4_i4_i4i4i4_},
    {"vsbs", (Il2CppMethodPointer)b_vsbs},
    {"vsi4", (Il2CppMethodPointer)b_vsi4},
    {"vsi4POPoPS_u8_PS_i8_", (Il2CppMethodPointer)b_vsi4POPoPS_u8_PS_i8_},
    {"vsi4i4", (Il2CppMethodPointer)b_vsi4i4},
    {"vso", (Il2CppMethodPointer)b_vso},
    {"vsoo", (Il2CppMethodPointer)b_vsoo},
    {"vsr4", (Il2CppMethodPointer)b_vsr4},
    {"vss", (Il2CppMethodPointer)b_vss},
    {"vssi4", (Il2CppMethodPointer)b_vssi4},
    {"vsso", (Il2CppMethodPointer)b_vsso},
    {"vu1", (Il2CppMethodPointer)b_vu1},
    {"vu2", (Il2CppMethodPointer)b_vu2},
    {"vu4", (Il2CppMethodPointer)b_vu4},
    {"vu4o", (Il2CppMethodPointer)b_vu4o},
    {"vu4u4PS_ppi4i4p_", (Il2CppMethodPointer)b_vu4u4PS_ppi4i4p_},
    {"vu8", (Il2CppMethodPointer)b_vu8},
    {"vu8o", (Il2CppMethodPointer)b_vu8o},
    {nullptr, nullptr}
};


Il2CppMethodPointer FindBridgeFunc(const char* signature)
{
    auto begin = &g_bridgeFuncInfos[0];
    auto end = &g_bridgeFuncInfos[sizeof(g_bridgeFuncInfos) / sizeof(BridgeFuncInfo) - 1];
    auto first = std::lower_bound(begin, end, signature, [](const BridgeFuncInfo& x, const char* signature) {return strcmp(x.Signature, signature) < 0;});
    if (first != end && strcmp(first->Signature, signature) == 0) {
        return first->Method;
    }
    return nullptr;
}

}

